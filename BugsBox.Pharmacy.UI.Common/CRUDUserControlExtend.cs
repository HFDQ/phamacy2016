using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using BugsBox.Pharmacy.Models;
using BugsBox.Pharmacy.AppClient.PS;
using System.Windows.Forms;
using BugsBox.Pharmacy.UI.Common.Helper;
using CustomValidatorsLibrary;
using BugsBox.Windows.Forms;
using BugsBox.Application.Core;
using System.ComponentModel;

namespace BugsBox.Pharmacy.UI.Common
{
    public partial class CRUDControl
    {
        //定义需要隐藏显示的字段
        private void HiddenFields()
        {
            HiddenColumns();
            if (GridDataSourceType != DataSoruceType.UserLog)
            {
                HiddenFields("CreateUserId");
                HiddenFields("CreateTime");
                HiddenFields("StoreId");
            }
            HiddenFields("Id");
            HiddenFields("Deleted");
            HiddenFields("DeleteTime");
            HiddenFields("UpdateUserId");
            HiddenFields("CreateUser");
            HiddenFields("UpdateUser");
            HiddenFields("UpdateTime");
            HiddenFields("WarehouseZoneType");
            HiddenFields("Warehouse");
            HiddenFields("DictionaryStorageType");
            HiddenFields("DictionaryMeasurementUnit");
            HiddenFields("ModuleCatetories");

            HiddenFields("BusinessLicFile");
            HiddenFields("PharmaceuticalTradingLicFile");
            HiddenFields("AnnualFile");
            HiddenFields("TaxRegistrationFile");
            HiddenFields("ApprovalStatus");
            HiddenFields("IsApproval");


            HiddenFields("ProofFile");
            HiddenFields("SealFile");
            HiddenFields("SingleTicketFile");
            HiddenFields("Valid");
            HiddenFields("GSPGMPLicFile");
            HiddenFields("IsBusinessLicOut");
            HiddenFields("IsOutDate");
            HiddenFields("IsPharmaceuticalTradingLicOut");
            HiddenFields("IsGSMPOut");

            HiddenFields("IsQualityAgreementOut");
            HiddenFields("PharmaceuticalTradingLicFile");
            HiddenFields("QualityAgreementFile");
            HiddenFields("AttorneyAattorneyFile");
            HiddenFields("IsAttorneyAattorneyOut");
            HiddenFields("AttorneyAattorneyFile");
            HiddenFields("BusinessLicFile");
            HiddenFields("PharmaceuticalTradingLicFile");
            HiddenFields("TaxRegistrationFile");
            HiddenFields("AnnualFile");

            HiddenFields("DrugCategory");
            HiddenFields("SupplyUnit");
            HiddenFields("AuthorizationDocId");

            HiddenFields("PurchaseUnit");
            HiddenFields("District");
            HiddenFields("Employee");

            HiddenFields("BusinessType");
            HiddenFields("UnitType");

            HiddenFields("BusinessType");
            HiddenFields("IDFile");
            HiddenFields("Department");
            HiddenFields("old_DepartId");
            if (GridDataSourceType == DataSoruceType.User)
            {
                HiddenFields("PurchaseTaxReturn");
                HiddenFields("SalesManageFee");
            }


        }

        //绑定数据源
        private void BindDataSourceType(DataSoruceType type, Entity[] searchResult = null)
        {
            try
            {
                string msg = string.Empty;
                if (searchResult == null)
                {
                    this.dataGridView1.DataSource = AutoGeneratedLoadEntity(out msg);
                    if (!string.IsNullOrEmpty(msg))
                    {
                        MessageBox.Show(msg);
                        Log.Error(msg);
                        return;
                    }
                }
                else
                {
                    this.dataGridView1.DataSource = searchResult;
                }

                //隐藏字段
                HiddenFields();

                //设置中文字段名
                FormatFieldCN();
                SetHeadColumnNames();
                InitFieldValues();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Log.Error(ex);
            }
        }

        //查询操作处理
        private Entity[] SearchEnties(out string msg, Dictionary<string, object> searchConditions,out PagerInfo pageInfo)
        {
            msg = string.Empty;
            pageInfo = null;
            try
            {
                return AutoGeneratedSearchEntity(out msg, searchConditions,out pageInfo);
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }
            return null;
        }

        //删除数据
        //返回值是否忽略提示信息
        private bool DeleteEntity(out string msg)
        {
            msg = string.Empty;
            if (MessageBox.Show("确定要删除吗？", "信息", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
            {
                try
                {
                    AutoGeneratedDeleteEntity(out msg);
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
                return false;
            }
            else
            {
                return true;
            }
        }

        //添加或修改数据数据
        private void AddEditEntity(Dictionary<string, object> bindValues, out string msg)
        {
            try
            {
                msg = string.Empty;
                AutoGeneratedAddEditEntity(bindValues, out msg);
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }
        }

        //格式化显示
        private void FormatDisplay(object sender, DataGridViewCellFormattingEventArgs e)
        {

            string columnName = this.dataGridView1.Columns[e.ColumnIndex].Name;
            if (_InitFieldValues.ContainsKey(columnName))
            {
                if (_InitFieldValues[columnName].Where(l => l.ID == e.Value.ToString()).FirstOrDefault() != null)
                {
                    e.Value = _InitFieldValues[columnName].Where(l => l.ID == e.Value.ToString()).FirstOrDefault().Name;
                }
            }
            if (GridDataSourceType == DataSoruceType.UserLog)
            {
                this.dataGridView1.Columns[e.ColumnIndex].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;

            }
        }

        //字段验证处理
        private void HandelValidation(RichTextBox label, Control control, string headerText)
        {
            if (control is ComboBox )
            {
                AddRequiredValidate(label, control, headerText);
            }
            else
            {
                List<string> requiredFields = new List<string>();
                requiredFields.Add("Name");
                requiredFields.Add("Code");
                requiredFields.Add("Decription");
                requiredFields.Add("Description");
                switch (GridDataSourceType)
                {
                    case DataSoruceType.Store:
                        requiredFields.Add("Name");
                        requiredFields.Add("Address");
                        requiredFields.Add("Tel");
                        requiredFields.Add("Head");
                        break;
                    case DataSoruceType.Rareword:
                        requiredFields.Add("PinYin");
                        requiredFields.Add("Word");
                        break;
                    case DataSoruceType.User:
                        requiredFields.Add("Account");
                        requiredFields.Add("Pwd");
                        break;
                    case DataSoruceType.Vehicle:
                        requiredFields.Add("Type");
                        requiredFields.Add("Cubage");
                        requiredFields.Add("LicensePlate");
                        //requiredFields.Add("Rule");
                        //requiredFields.Add("Driver");
                        requiredFields.Add("Cubage");
                        break;
                    case DataSoruceType.Warehouse:
                        requiredFields.Add("Type");
                        requiredFields.Add("Cubage");
                        requiredFields.Add("MnemonicCode");
                        requiredFields.Add("Address");
                        //requiredFields.Add("Phone");
                        break;
                    case DataSoruceType.WarehouseZone:
                        requiredFields.Add("MnemonicCode");
                        requiredFields.Add("Decription");
                        requiredFields.Add("Cubage");
                        break;
                    case DataSoruceType.Module:
                        requiredFields.Add("AuthKey");
                        break;
                    case DataSoruceType.Employee:
                        //requiredFields.Add("Address");
                        requiredFields.Add("Number");
                        break;
                }
                AddRequiredValidate(label, control, headerText, requiredFields);
            }
        }

        //初始化控件选项
        private void InitControlOptions(Control control, bool isSearch = false)
        {

            switch (control.GetType().Name)
            {
                case "ComboBox":
                    string msg = String.Empty;
                    ComboBox cbo = (ComboBox)control;
                    cbo.Items.Clear();
                    string controlName = control.Name.Replace(_SEARCHPREFIX, "");
                    if (isSearch && controlName == "Enabled")
                    {
                        List<ListItem> enabledItems = new List<ListItem>();
                        enabledItems.Add(new ListItem("All", ResourceStrings.Common_All));
                        enabledItems.Add(new ListItem("True", ResourceStrings.Common_Enabled));
                        enabledItems.Add(new ListItem("False", ResourceStrings.Common_UnEnabled));
                        //WFZ

                        cbo.Items.AddRange(enabledItems.ToArray());
                        cbo.SelectedIndex = 0;
                    }
                    if (_InitFieldValues.ContainsKey(controlName))
                    {
                        cbo.Items.AddRange(_InitFieldValues[controlName].ToArray());
                    }
                    if (cbo.Items.Count > 0 && !isSearch)
                    {
                        cbo.SelectedIndex = 0;
                    }
                    break;

                    //WFZ
                case "CheckBox":
                    CheckBox ckb =(CheckBox)control;
                    ckb.Checked = true;
                    break;
            }
        }

        //过滤增加或修改UI字段生成
        private bool FilterGenerateControl(string fieldName)
        {

            switch (fieldName)
            {
                case "StoreTypeValue":
                    return true;
            }
            return false;
        }

        /// <summary>
        /// 过滤导航实体属性
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        private bool FilterGenerateControl(DataGridViewColumn col)
        {
            switch (col.Name)
            {
                case "StoreTypeValue":
                    return true;
            }
            if (col != null)
            {

                if (
                     IsNavigationColunm(col)
                    || (col.ValueType.BaseType != null && col.ValueType.BaseType is Enum)
                    )
                {
                    return true;
                }
            }
            return false;
        }

        private bool IsNavigationColunm(DataGridViewColumn col)
        {
            if (
                   col.ValueType.BaseType == typeof(Entity)
                   || col.ValueType.BaseType == typeof(BaseUnit)
                   || col.ValueType.BaseType == typeof(PharmacyLicense)
                   || (col.ValueType.IsEnum)
                   ||
                   (col.ValueType.IsGenericType
                       && col.ValueType != typeof(DateTime?)
                       && col.ValueType != typeof(int?)
                       && col.ValueType != typeof(decimal?))
                   )
            {
                return true;
            }
            return false;
        }


        /// <summary>
        /// 隐藏导航属性
        /// </summary>
        private void HiddenColumns()
        {
            if (this.dataGridView1 != null)
            {
                var columns = this.dataGridView1.Columns;
                foreach (DataGridViewColumn column in columns)
                {
                    column.Visible = !IsNavigationColunm(column);
                }
            }
        }

    }
}
