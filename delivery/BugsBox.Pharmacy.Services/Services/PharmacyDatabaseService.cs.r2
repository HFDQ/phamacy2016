
 
 
 
   
   
 
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Xml.Linq;
using BugsBox.Application.Core;
using BugsBox.Pharmacy.Models;
using BugsBox.Pharmacy.Service.Models; 
using BugsBox.Pharmacy.Business.Models;
using BugsBox.Pharmacy.Business.Models.QueryModelExtesion; 
namespace BugsBox.Pharmacy.Services
{ 
		/// <summary>
		/// 系统wcf数据库服务接口ServiceContract
		/// 所有数据库实体基本的添、删、改、查就是与业务相关逻辑在由这个接口负责 
		/// </summary>  
	  partial class PharmacyService
	  {
	  	   
		#region 审批结点

		/// <summary>
        /// 获取实体审批结点
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public ApprovalFlow GetApprovalFlow(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<ApprovalFlow>("调用审批结点业务逻辑:根据编号获取实体(审批结点)失败", ex);
            }
		} 

        /// <summary>
        /// 统计审批结点
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountApprovalFlow(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用审批结点业务逻辑:统计所有(审批结点)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加审批结点
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddApprovalFlow(ApprovalFlow value,out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批结点业务逻辑:添加实体(审批结点)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除审批结点
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteApprovalFlow(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批结点业务逻辑:删除实体(审批结点)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存审批结点
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveApprovalFlow(ApprovalFlow value, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批结点业务逻辑:保存实体(审批结点)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录审批结点
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<ApprovalFlow> AllApprovalFlows(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用审批结点业务逻辑:获取所有实体(审批结点)失败";
                return this.HandleException<List<ApprovalFlow>>(message, ex);
            }
		}

		 
        public List<ApprovalFlow> QueryApprovalFlows(int statusfrom,int statusto,string changenote,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<ApprovalFlow>(); 
                if(statusto==statusfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Status, statusfrom);
                }
                else if(statusto>statusfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Status, statusfrom,statusto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(changenote)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ChangeNote, changenote);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.ApprovalFlowBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用审批结点业务逻辑:查询实体(审批结点)失败";
                return this.HandleException<List<ApprovalFlow>>(msg, ex);
            }
        } 
		
		 
        public List<ApprovalFlow> QueryPagedApprovalFlows(int statusfrom,int statusto,string changenote,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlow>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlow>(); 
                if(statusto==statusfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Status, statusfrom);
                }
                else if(statusto>statusfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Status, statusfrom,statusto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(changenote)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ChangeNote, changenote);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.ApprovalFlowBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<ApprovalFlow>>("调用审批结点业务逻辑:查询实体(审批结点)失败", ex);
            }
        } 
 
        public List<ApprovalFlow> SearchApprovalFlowsByQueryModel(QueryApprovalFlowModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<ApprovalFlow>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlow>(); 
                if(qModel.FlowId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowId, qModel.FlowId);
                }
                if(qModel.SubFlowIdTo==qModel.SubFlowIdFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SubFlowId, qModel.SubFlowIdFrom);
                }
                else if(qModel.SubFlowIdTo>qModel.SubFlowIdFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SubFlowId, qModel.SubFlowIdFrom,qModel.SubFlowIdTo);
                }//From>To不参与条件
                if(qModel.StatusTo==qModel.StatusFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Status, qModel.StatusFrom);
                }
                else if(qModel.StatusTo>qModel.StatusFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Status, qModel.StatusFrom,qModel.StatusTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ChangeNote)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ChangeNote, qModel.ChangeNote);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ApprovalFlowTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowTypeId, qModel.ApprovalFlowTypeId);
                }
                if(qModel.NextNodeID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.NextNodeID, qModel.NextNodeID);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ApprovalFlowBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用审批结点业务逻辑:通查询Model查询实体(审批结点)失败";
                return this.HandleException<List<ApprovalFlow>>(message, ex);
            }  
		} 

		 
        public List<ApprovalFlow> SearchPagedApprovalFlowsByQueryModel(QueryApprovalFlowModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlow>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlow>(); 
                if(qModel.FlowId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowId, qModel.FlowId);
                }
                if(qModel.SubFlowIdTo==qModel.SubFlowIdFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SubFlowId, qModel.SubFlowIdFrom);
                }
                else if(qModel.SubFlowIdTo>qModel.SubFlowIdFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SubFlowId, qModel.SubFlowIdFrom,qModel.SubFlowIdTo);
                }//From>To不参与条件
                if(qModel.StatusTo==qModel.StatusFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Status, qModel.StatusFrom);
                }
                else if(qModel.StatusTo>qModel.StatusFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Status, qModel.StatusFrom,qModel.StatusTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ChangeNote)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ChangeNote, qModel.ChangeNote);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ApprovalFlowTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowTypeId, qModel.ApprovalFlowTypeId);
                }
                if(qModel.NextNodeID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.NextNodeID, qModel.NextNodeID);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ApprovalFlowBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<ApprovalFlow>>("调用审批结点业务逻辑:通过查询Model分页查询实体(审批结点)失败", ex);
            }  
		}

		#endregion 审批结点 
		   
		#region 审批结点

		/// <summary>
        /// 获取实体审批结点
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public ApprovalFlowNode GetApprovalFlowNode(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<ApprovalFlowNode>("调用审批结点业务逻辑:根据编号获取实体(审批结点)失败", ex);
            }
		} 

        /// <summary>
        /// 统计审批结点
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountApprovalFlowNode(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用审批结点业务逻辑:统计所有(审批结点)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加审批结点
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddApprovalFlowNode(ApprovalFlowNode value,out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批结点业务逻辑:添加实体(审批结点)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除审批结点
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteApprovalFlowNode(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批结点业务逻辑:删除实体(审批结点)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存审批结点
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveApprovalFlowNode(ApprovalFlowNode value, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批结点业务逻辑:保存实体(审批结点)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录审批结点
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<ApprovalFlowNode> AllApprovalFlowNodes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用审批结点业务逻辑:获取所有实体(审批结点)失败";
                return this.HandleException<List<ApprovalFlowNode>>(message, ex);
            }
		}

		 
        public List<ApprovalFlowNode> QueryApprovalFlowNodes(int orderfrom,int orderto,string name,string decription,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<ApprovalFlowNode>(); 
                if(orderto==orderfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Order, orderfrom);
                }
                else if(orderto>orderfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Order, orderfrom,orderto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用审批结点业务逻辑:查询实体(审批结点)失败";
                return this.HandleException<List<ApprovalFlowNode>>(msg, ex);
            }
        } 
		
		 
        public List<ApprovalFlowNode> QueryPagedApprovalFlowNodes(int orderfrom,int orderto,string name,string decription,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowNode>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowNode>(); 
                if(orderto==orderfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Order, orderfrom);
                }
                else if(orderto>orderfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Order, orderfrom,orderto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<ApprovalFlowNode>>("调用审批结点业务逻辑:查询实体(审批结点)失败", ex);
            }
        } 
 
        public List<ApprovalFlowNode> SearchApprovalFlowNodesByQueryModel(QueryApprovalFlowNodeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowNode>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowNode>(); 
                if(qModel.OrderTo==qModel.OrderFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Order, qModel.OrderFrom);
                }
                else if(qModel.OrderTo>qModel.OrderFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Order, qModel.OrderFrom,qModel.OrderTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.RoleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RoleId, qModel.RoleId);
                }
                if(qModel.ApprovalFlowTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowTypeId, qModel.ApprovalFlowTypeId);
                }

                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用审批结点业务逻辑:通查询Model查询实体(审批结点)失败";
                return this.HandleException<List<ApprovalFlowNode>>(message, ex);
            }  
		} 

		 
        public List<ApprovalFlowNode> SearchPagedApprovalFlowNodesByQueryModel(QueryApprovalFlowNodeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowNode>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowNode>(); 
                if(qModel.OrderTo==qModel.OrderFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Order, qModel.OrderFrom);
                }
                else if(qModel.OrderTo>qModel.OrderFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Order, qModel.OrderFrom,qModel.OrderTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.RoleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RoleId, qModel.RoleId);
                }
                if(qModel.ApprovalFlowTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowTypeId, qModel.ApprovalFlowTypeId);
                }

                return HandlerFactory.ApprovalFlowNodeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<ApprovalFlowNode>>("调用审批结点业务逻辑:通过查询Model分页查询实体(审批结点)失败", ex);
            }  
		}

		#endregion 审批结点 
		   
		#region 审批流程类型

		/// <summary>
        /// 获取实体审批流程类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public ApprovalFlowType GetApprovalFlowType(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<ApprovalFlowType>("调用审批流程类型业务逻辑:根据编号获取实体(审批流程类型)失败", ex);
            }
		} 

        /// <summary>
        /// 统计审批流程类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountApprovalFlowType(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用审批流程类型业务逻辑:统计所有(审批流程类型)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加审批流程类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddApprovalFlowType(ApprovalFlowType value,out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批流程类型业务逻辑:添加实体(审批流程类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除审批流程类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteApprovalFlowType(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批流程类型业务逻辑:删除实体(审批流程类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存审批流程类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveApprovalFlowType(ApprovalFlowType value, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批流程类型业务逻辑:保存实体(审批流程类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录审批流程类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<ApprovalFlowType> AllApprovalFlowTypes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用审批流程类型业务逻辑:获取所有实体(审批流程类型)失败";
                return this.HandleException<List<ApprovalFlowType>>(message, ex);
            }
		}

		 
        public List<ApprovalFlowType> QueryApprovalFlowTypes(string name,string decription,int approvaltypevaluefrom,int approvaltypevalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<ApprovalFlowType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(approvaltypevalueto==approvaltypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalTypeValue, approvaltypevaluefrom);
                }
                else if(approvaltypevalueto>approvaltypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalTypeValue, approvaltypevaluefrom,approvaltypevalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用审批流程类型业务逻辑:查询实体(审批流程类型)失败";
                return this.HandleException<List<ApprovalFlowType>>(msg, ex);
            }
        } 
		
		 
        public List<ApprovalFlowType> QueryPagedApprovalFlowTypes(string name,string decription,int approvaltypevaluefrom,int approvaltypevalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowType>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(approvaltypevalueto==approvaltypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalTypeValue, approvaltypevaluefrom);
                }
                else if(approvaltypevalueto>approvaltypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ApprovalTypeValue, approvaltypevaluefrom,approvaltypevalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<ApprovalFlowType>>("调用审批流程类型业务逻辑:查询实体(审批流程类型)失败", ex);
            }
        } 
 
        public List<ApprovalFlowType> SearchApprovalFlowTypesByQueryModel(QueryApprovalFlowTypeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowType>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.ApprovalTypeValueTo==qModel.ApprovalTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalTypeValue, qModel.ApprovalTypeValueFrom);
                }
                else if(qModel.ApprovalTypeValueTo>qModel.ApprovalTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalTypeValue, qModel.ApprovalTypeValueFrom,qModel.ApprovalTypeValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用审批流程类型业务逻辑:通查询Model查询实体(审批流程类型)失败";
                return this.HandleException<List<ApprovalFlowType>>(message, ex);
            }  
		} 

		 
        public List<ApprovalFlowType> SearchPagedApprovalFlowTypesByQueryModel(QueryApprovalFlowTypeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowType>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.ApprovalTypeValueTo==qModel.ApprovalTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalTypeValue, qModel.ApprovalTypeValueFrom);
                }
                else if(qModel.ApprovalTypeValueTo>qModel.ApprovalTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalTypeValue, qModel.ApprovalTypeValueFrom,qModel.ApprovalTypeValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ApprovalFlowTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<ApprovalFlowType>>("调用审批流程类型业务逻辑:通过查询Model分页查询实体(审批流程类型)失败", ex);
            }  
		}

		#endregion 审批流程类型 
		   
		#region 审批流程记录

		/// <summary>
        /// 获取实体审批流程记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public ApprovalFlowRecord GetApprovalFlowRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<ApprovalFlowRecord>("调用审批流程记录业务逻辑:根据编号获取实体(审批流程记录)失败", ex);
            }
		} 

        /// <summary>
        /// 统计审批流程记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountApprovalFlowRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用审批流程记录业务逻辑:统计所有(审批流程记录)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加审批流程记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddApprovalFlowRecord(ApprovalFlowRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批流程记录业务逻辑:添加实体(审批流程记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除审批流程记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteApprovalFlowRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批流程记录业务逻辑:删除实体(审批流程记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存审批流程记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveApprovalFlowRecord(ApprovalFlowRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用审批流程记录业务逻辑:保存实体(审批流程记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录审批流程记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<ApprovalFlowRecord> AllApprovalFlowRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用审批流程记录业务逻辑:获取所有实体(审批流程记录)失败";
                return this.HandleException<List<ApprovalFlowRecord>>(message, ex);
            }
		}

		 
        public List<ApprovalFlowRecord> QueryApprovalFlowRecords(DateTime approvetimefrom,DateTime approvetimeto,string comment,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<ApprovalFlowRecord>(); 
                if(approvetimeto!=default(DateTime)&&approvetimefrom!=default(DateTime)){//From==To执行==
                if(approvetimeto==approvetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApproveTime, approvetimefrom);
                }
                else if(approvetimeto>approvetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApproveTime, approvetimefrom,approvetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(comment)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Comment, comment);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用审批流程记录业务逻辑:查询实体(审批流程记录)失败";
                return this.HandleException<List<ApprovalFlowRecord>>(msg, ex);
            }
        } 
		
		 
        public List<ApprovalFlowRecord> QueryPagedApprovalFlowRecords(DateTime approvetimefrom,DateTime approvetimeto,string comment,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowRecord>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowRecord>(); 
                if(approvetimeto!=default(DateTime)&&approvetimefrom!=default(DateTime)){//From==To执行==
                if(approvetimeto==approvetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApproveTime, approvetimefrom);
                }
                else if(approvetimeto>approvetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ApproveTime, approvetimefrom,approvetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(comment)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Comment, comment);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<ApprovalFlowRecord>>("调用审批流程记录业务逻辑:查询实体(审批流程记录)失败", ex);
            }
        } 
 
        public List<ApprovalFlowRecord> SearchApprovalFlowRecordsByQueryModel(QueryApprovalFlowRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowRecord>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowRecord>(); 
                if(qModel.FlowId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowId, qModel.FlowId);
                }
                if(qModel.SubFlowIdTo==qModel.SubFlowIdFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SubFlowId, qModel.SubFlowIdFrom);
                }
                else if(qModel.SubFlowIdTo>qModel.SubFlowIdFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SubFlowId, qModel.SubFlowIdFrom,qModel.SubFlowIdTo);
                }//From>To不参与条件
                if(qModel.ApproveUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApproveUserId, qModel.ApproveUserId);
                }
                if(qModel.ApproveTimeTo!=default(DateTime)&&qModel.ApproveTimeFrom!=default(DateTime)){
                if(qModel.ApproveTimeTo==qModel.ApproveTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApproveTime, qModel.ApproveTimeFrom);
                }
                else if(qModel.ApproveTimeTo>qModel.ApproveTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApproveTime, qModel.ApproveTimeFrom,qModel.ApproveTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Comment)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Comment, qModel.Comment);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ApprovalFlowNodeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowNodeId, qModel.ApprovalFlowNodeId);
                }
                if(qModel.ApprovalFlowId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowId, qModel.ApprovalFlowId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用审批流程记录业务逻辑:通查询Model查询实体(审批流程记录)失败";
                return this.HandleException<List<ApprovalFlowRecord>>(message, ex);
            }  
		} 

		 
        public List<ApprovalFlowRecord> SearchPagedApprovalFlowRecordsByQueryModel(QueryApprovalFlowRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ApprovalFlowRecord>();
                var queryBuilder = QueryBuilder.Create<ApprovalFlowRecord>(); 
                if(qModel.FlowId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowId, qModel.FlowId);
                }
                if(qModel.SubFlowIdTo==qModel.SubFlowIdFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SubFlowId, qModel.SubFlowIdFrom);
                }
                else if(qModel.SubFlowIdTo>qModel.SubFlowIdFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SubFlowId, qModel.SubFlowIdFrom,qModel.SubFlowIdTo);
                }//From>To不参与条件
                if(qModel.ApproveUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApproveUserId, qModel.ApproveUserId);
                }
                if(qModel.ApproveTimeTo!=default(DateTime)&&qModel.ApproveTimeFrom!=default(DateTime)){
                if(qModel.ApproveTimeTo==qModel.ApproveTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApproveTime, qModel.ApproveTimeFrom);
                }
                else if(qModel.ApproveTimeTo>qModel.ApproveTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApproveTime, qModel.ApproveTimeFrom,qModel.ApproveTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Comment)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Comment, qModel.Comment);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ApprovalFlowNodeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowNodeId, qModel.ApprovalFlowNodeId);
                }
                if(qModel.ApprovalFlowId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalFlowId, qModel.ApprovalFlowId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ApprovalFlowRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<ApprovalFlowRecord>>("调用审批流程记录业务逻辑:通过查询Model分页查询实体(审批流程记录)失败", ex);
            }  
		}

		#endregion 审批流程记录 
		   
		#region 单据编号

		/// <summary>
        /// 获取实体单据编号
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public BillDocumentCode GetBillDocumentCode(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BillDocumentCodeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<BillDocumentCode>("调用单据编号业务逻辑:根据编号获取实体(单据编号)失败", ex);
            }
		} 

        /// <summary>
        /// 统计单据编号
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountBillDocumentCode(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BillDocumentCodeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用单据编号业务逻辑:统计所有(单据编号)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加单据编号
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddBillDocumentCode(BillDocumentCode value,out string msg)
		{
			try
            {
                return HandlerFactory.BillDocumentCodeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用单据编号业务逻辑:添加实体(单据编号)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除单据编号
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteBillDocumentCode(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.BillDocumentCodeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用单据编号业务逻辑:删除实体(单据编号)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存单据编号
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveBillDocumentCode(BillDocumentCode value, out string msg)
		{
			try
            {
                return HandlerFactory.BillDocumentCodeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用单据编号业务逻辑:保存实体(单据编号)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录单据编号
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<BillDocumentCode> AllBillDocumentCodes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BillDocumentCodeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用单据编号业务逻辑:获取所有实体(单据编号)失败";
                return this.HandleException<List<BillDocumentCode>>(message, ex);
            }
		}

		 
        public List<BillDocumentCode> QueryBillDocumentCodes(bool locked,bool querylocked,bool used,bool queryused,bool canceled,bool querycanceled,string code,int billdocumenttypevaluefrom,int billdocumenttypevalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<BillDocumentCode>(); 
                if(querylocked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Locked, locked);
}
                if(queryused){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Used, used);
}
                if(querycanceled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Canceled, canceled);
}
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(billdocumenttypevalueto==billdocumenttypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.BillDocumentTypeValue, billdocumenttypevaluefrom);
                }
                else if(billdocumenttypevalueto>billdocumenttypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.BillDocumentTypeValue, billdocumenttypevaluefrom,billdocumenttypevalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.BillDocumentCodeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用单据编号业务逻辑:查询实体(单据编号)失败";
                return this.HandleException<List<BillDocumentCode>>(msg, ex);
            }
        } 
		
		 
        public List<BillDocumentCode> QueryPagedBillDocumentCodes(bool locked,bool querylocked,bool used,bool queryused,bool canceled,bool querycanceled,string code,int billdocumenttypevaluefrom,int billdocumenttypevalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BillDocumentCode>();
                var queryBuilder = QueryBuilder.Create<BillDocumentCode>(); 
                if(querylocked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Locked, locked);
}
                if(queryused){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Used, used);
}
                if(querycanceled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Canceled, canceled);
}
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(billdocumenttypevalueto==billdocumenttypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.BillDocumentTypeValue, billdocumenttypevaluefrom);
                }
                else if(billdocumenttypevalueto>billdocumenttypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.BillDocumentTypeValue, billdocumenttypevaluefrom,billdocumenttypevalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.BillDocumentCodeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<BillDocumentCode>>("调用单据编号业务逻辑:查询实体(单据编号)失败", ex);
            }
        } 
 
        public List<BillDocumentCode> SearchBillDocumentCodesByQueryModel(QueryBillDocumentCodeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<BillDocumentCode>();
                var queryBuilder = QueryBuilder.Create<BillDocumentCode>(); 
                if(qModel.QueryLocked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Locked, qModel.Locked);
}
                if(qModel.QueryUsed){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Used, qModel.Used);
}
                if(qModel.UsedId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UsedId, qModel.UsedId);
                }
                if(qModel.QueryCanceled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Canceled, qModel.Canceled);
}
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.BillDocumentTypeValueTo==qModel.BillDocumentTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.BillDocumentTypeValue, qModel.BillDocumentTypeValueFrom);
                }
                else if(qModel.BillDocumentTypeValueTo>qModel.BillDocumentTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.BillDocumentTypeValue, qModel.BillDocumentTypeValueFrom,qModel.BillDocumentTypeValueTo);
                }//From>To不参与条件
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.BillDocumentCodeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用单据编号业务逻辑:通查询Model查询实体(单据编号)失败";
                return this.HandleException<List<BillDocumentCode>>(message, ex);
            }  
		} 

		 
        public List<BillDocumentCode> SearchPagedBillDocumentCodesByQueryModel(QueryBillDocumentCodeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BillDocumentCode>();
                var queryBuilder = QueryBuilder.Create<BillDocumentCode>(); 
                if(qModel.QueryLocked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Locked, qModel.Locked);
}
                if(qModel.QueryUsed){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Used, qModel.Used);
}
                if(qModel.UsedId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UsedId, qModel.UsedId);
                }
                if(qModel.QueryCanceled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Canceled, qModel.Canceled);
}
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.BillDocumentTypeValueTo==qModel.BillDocumentTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.BillDocumentTypeValue, qModel.BillDocumentTypeValueFrom);
                }
                else if(qModel.BillDocumentTypeValueTo>qModel.BillDocumentTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.BillDocumentTypeValue, qModel.BillDocumentTypeValueFrom,qModel.BillDocumentTypeValueTo);
                }//From>To不参与条件
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.BillDocumentCodeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<BillDocumentCode>>("调用单据编号业务逻辑:通过查询Model分页查询实体(单据编号)失败", ex);
            }  
		}

		#endregion 单据编号 
		   
		#region 经营范围

		/// <summary>
        /// 获取实体经营范围
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public BusinessScope GetBusinessScope(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessScopeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<BusinessScope>("调用经营范围业务逻辑:根据编号获取实体(经营范围)失败", ex);
            }
		} 

        /// <summary>
        /// 统计经营范围
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountBusinessScope(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessScopeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用经营范围业务逻辑:统计所有(经营范围)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加经营范围
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddBusinessScope(BusinessScope value,out string msg)
		{
			try
            {
                return HandlerFactory.BusinessScopeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营范围业务逻辑:添加实体(经营范围)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除经营范围
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteBusinessScope(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessScopeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营范围业务逻辑:删除实体(经营范围)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存经营范围
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveBusinessScope(BusinessScope value, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessScopeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营范围业务逻辑:保存实体(经营范围)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录经营范围
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<BusinessScope> AllBusinessScopes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessScopeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用经营范围业务逻辑:获取所有实体(经营范围)失败";
                return this.HandleException<List<BusinessScope>>(message, ex);
            }
		}

		 
        public List<BusinessScope> QueryBusinessScopes(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<BusinessScope>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.BusinessScopeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用经营范围业务逻辑:查询实体(经营范围)失败";
                return this.HandleException<List<BusinessScope>>(msg, ex);
            }
        } 
		
		 
        public List<BusinessScope> QueryPagedBusinessScopes(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessScope>();
                var queryBuilder = QueryBuilder.Create<BusinessScope>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.BusinessScopeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<BusinessScope>>("调用经营范围业务逻辑:查询实体(经营范围)失败", ex);
            }
        } 
 
        public List<BusinessScope> SearchBusinessScopesByQueryModel(QueryBusinessScopeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<BusinessScope>();
                var queryBuilder = QueryBuilder.Create<BusinessScope>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.BusinessScopeCategoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessScopeCategoryId, qModel.BusinessScopeCategoryId);
                }

                return HandlerFactory.BusinessScopeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用经营范围业务逻辑:通查询Model查询实体(经营范围)失败";
                return this.HandleException<List<BusinessScope>>(message, ex);
            }  
		} 

		 
        public List<BusinessScope> SearchPagedBusinessScopesByQueryModel(QueryBusinessScopeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessScope>();
                var queryBuilder = QueryBuilder.Create<BusinessScope>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.BusinessScopeCategoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessScopeCategoryId, qModel.BusinessScopeCategoryId);
                }

                return HandlerFactory.BusinessScopeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<BusinessScope>>("调用经营范围业务逻辑:通过查询Model分页查询实体(经营范围)失败", ex);
            }  
		}

		#endregion 经营范围 
		   
		#region 经营范围分类

		/// <summary>
        /// 获取实体经营范围分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public BusinessScopeCategory GetBusinessScopeCategory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<BusinessScopeCategory>("调用经营范围分类业务逻辑:根据编号获取实体(经营范围分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计经营范围分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountBusinessScopeCategory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用经营范围分类业务逻辑:统计所有(经营范围分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加经营范围分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddBusinessScopeCategory(BusinessScopeCategory value,out string msg)
		{
			try
            {
                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营范围分类业务逻辑:添加实体(经营范围分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除经营范围分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteBusinessScopeCategory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营范围分类业务逻辑:删除实体(经营范围分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存经营范围分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveBusinessScopeCategory(BusinessScopeCategory value, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营范围分类业务逻辑:保存实体(经营范围分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录经营范围分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<BusinessScopeCategory> AllBusinessScopeCategorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用经营范围分类业务逻辑:获取所有实体(经营范围分类)失败";
                return this.HandleException<List<BusinessScopeCategory>>(message, ex);
            }
		}

		 
        public List<BusinessScopeCategory> QueryBusinessScopeCategorys(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<BusinessScopeCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用经营范围分类业务逻辑:查询实体(经营范围分类)失败";
                return this.HandleException<List<BusinessScopeCategory>>(msg, ex);
            }
        } 
		
		 
        public List<BusinessScopeCategory> QueryPagedBusinessScopeCategorys(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessScopeCategory>();
                var queryBuilder = QueryBuilder.Create<BusinessScopeCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<BusinessScopeCategory>>("调用经营范围分类业务逻辑:查询实体(经营范围分类)失败", ex);
            }
        } 
 
        public List<BusinessScopeCategory> SearchBusinessScopeCategorysByQueryModel(QueryBusinessScopeCategoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<BusinessScopeCategory>();
                var queryBuilder = QueryBuilder.Create<BusinessScopeCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用经营范围分类业务逻辑:通查询Model查询实体(经营范围分类)失败";
                return this.HandleException<List<BusinessScopeCategory>>(message, ex);
            }  
		} 

		 
        public List<BusinessScopeCategory> SearchPagedBusinessScopeCategorysByQueryModel(QueryBusinessScopeCategoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessScopeCategory>();
                var queryBuilder = QueryBuilder.Create<BusinessScopeCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.BusinessScopeCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<BusinessScopeCategory>>("调用经营范围分类业务逻辑:通过查询Model分页查询实体(经营范围分类)失败", ex);
            }  
		}

		#endregion 经营范围分类 
		   
		#region 经营方式

		/// <summary>
        /// 获取实体经营方式
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public BusinessType GetBusinessType(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessTypeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<BusinessType>("调用经营方式业务逻辑:根据编号获取实体(经营方式)失败", ex);
            }
		} 

        /// <summary>
        /// 统计经营方式
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountBusinessType(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessTypeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用经营方式业务逻辑:统计所有(经营方式)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加经营方式
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddBusinessType(BusinessType value,out string msg)
		{
			try
            {
                return HandlerFactory.BusinessTypeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营方式业务逻辑:添加实体(经营方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除经营方式
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteBusinessType(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessTypeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营方式业务逻辑:删除实体(经营方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存经营方式
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveBusinessType(BusinessType value, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessTypeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营方式业务逻辑:保存实体(经营方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录经营方式
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<BusinessType> AllBusinessTypes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessTypeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用经营方式业务逻辑:获取所有实体(经营方式)失败";
                return this.HandleException<List<BusinessType>>(message, ex);
            }
		}

		 
        public List<BusinessType> QueryBusinessTypes(string decription,string code,string name,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<BusinessType>(); 
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.BusinessTypeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用经营方式业务逻辑:查询实体(经营方式)失败";
                return this.HandleException<List<BusinessType>>(msg, ex);
            }
        } 
		
		 
        public List<BusinessType> QueryPagedBusinessTypes(string decription,string code,string name,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessType>();
                var queryBuilder = QueryBuilder.Create<BusinessType>(); 
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.BusinessTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<BusinessType>>("调用经营方式业务逻辑:查询实体(经营方式)失败", ex);
            }
        } 
 
        public List<BusinessType> SearchBusinessTypesByQueryModel(QueryBusinessTypeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<BusinessType>();
                var queryBuilder = QueryBuilder.Create<BusinessType>(); 
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.BusinessTypeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用经营方式业务逻辑:通查询Model查询实体(经营方式)失败";
                return this.HandleException<List<BusinessType>>(message, ex);
            }  
		} 

		 
        public List<BusinessType> SearchPagedBusinessTypesByQueryModel(QueryBusinessTypeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessType>();
                var queryBuilder = QueryBuilder.Create<BusinessType>(); 
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.BusinessTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<BusinessType>>("调用经营方式业务逻辑:通过查询Model分页查询实体(经营方式)失败", ex);
            }  
		}

		#endregion 经营方式 
		   
		#region 经营方式的管理要求分类详细

		/// <summary>
        /// 获取实体经营方式的管理要求分类详细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public BusinessTypeManageCategoryDetail GetBusinessTypeManageCategoryDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<BusinessTypeManageCategoryDetail>("调用经营方式的管理要求分类详细业务逻辑:根据编号获取实体(经营方式的管理要求分类详细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计经营方式的管理要求分类详细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountBusinessTypeManageCategoryDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用经营方式的管理要求分类详细业务逻辑:统计所有(经营方式的管理要求分类详细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加经营方式的管理要求分类详细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddBusinessTypeManageCategoryDetail(BusinessTypeManageCategoryDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营方式的管理要求分类详细业务逻辑:添加实体(经营方式的管理要求分类详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除经营方式的管理要求分类详细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteBusinessTypeManageCategoryDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营方式的管理要求分类详细业务逻辑:删除实体(经营方式的管理要求分类详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存经营方式的管理要求分类详细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveBusinessTypeManageCategoryDetail(BusinessTypeManageCategoryDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用经营方式的管理要求分类详细业务逻辑:保存实体(经营方式的管理要求分类详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录经营方式的管理要求分类详细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<BusinessTypeManageCategoryDetail> AllBusinessTypeManageCategoryDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用经营方式的管理要求分类详细业务逻辑:获取所有实体(经营方式的管理要求分类详细)失败";
                return this.HandleException<List<BusinessTypeManageCategoryDetail>>(message, ex);
            }
		}

		 
        public List<BusinessTypeManageCategoryDetail> QueryBusinessTypeManageCategoryDetails(out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<BusinessTypeManageCategoryDetail>(); 

                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用经营方式的管理要求分类详细业务逻辑:查询实体(经营方式的管理要求分类详细)失败";
                return this.HandleException<List<BusinessTypeManageCategoryDetail>>(msg, ex);
            }
        } 
		
		 
        public List<BusinessTypeManageCategoryDetail> QueryPagedBusinessTypeManageCategoryDetails(int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessTypeManageCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<BusinessTypeManageCategoryDetail>(); 

                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<BusinessTypeManageCategoryDetail>>("调用经营方式的管理要求分类详细业务逻辑:查询实体(经营方式的管理要求分类详细)失败", ex);
            }
        } 
 
        public List<BusinessTypeManageCategoryDetail> SearchBusinessTypeManageCategoryDetailsByQueryModel(QueryBusinessTypeManageCategoryDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<BusinessTypeManageCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<BusinessTypeManageCategoryDetail>(); 
                if(qModel.PurchaseManageCategoryDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseManageCategoryDetailId, qModel.PurchaseManageCategoryDetailId);
                }
                if(qModel.BusinessTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessTypeId, qModel.BusinessTypeId);
                }

                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用经营方式的管理要求分类详细业务逻辑:通查询Model查询实体(经营方式的管理要求分类详细)失败";
                return this.HandleException<List<BusinessTypeManageCategoryDetail>>(message, ex);
            }  
		} 

		 
        public List<BusinessTypeManageCategoryDetail> SearchPagedBusinessTypeManageCategoryDetailsByQueryModel(QueryBusinessTypeManageCategoryDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessTypeManageCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<BusinessTypeManageCategoryDetail>(); 
                if(qModel.PurchaseManageCategoryDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseManageCategoryDetailId, qModel.PurchaseManageCategoryDetailId);
                }
                if(qModel.BusinessTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessTypeId, qModel.BusinessTypeId);
                }

                return HandlerFactory.BusinessTypeManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<BusinessTypeManageCategoryDetail>>("调用经营方式的管理要求分类详细业务逻辑:通过查询Model分页查询实体(经营方式的管理要求分类详细)失败", ex);
            }  
		}

		#endregion 经营方式的管理要求分类详细 
		   
		#region 商品附加属性

		/// <summary>
        /// 获取实体商品附加属性
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public GoodsAdditionalProperty GetGoodsAdditionalProperty(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<GoodsAdditionalProperty>("调用商品附加属性业务逻辑:根据编号获取实体(商品附加属性)失败", ex);
            }
		} 

        /// <summary>
        /// 统计商品附加属性
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountGoodsAdditionalProperty(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用商品附加属性业务逻辑:统计所有(商品附加属性)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加商品附加属性
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddGoodsAdditionalProperty(GoodsAdditionalProperty value,out string msg)
		{
			try
            {
                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用商品附加属性业务逻辑:添加实体(商品附加属性)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除商品附加属性
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteGoodsAdditionalProperty(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用商品附加属性业务逻辑:删除实体(商品附加属性)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存商品附加属性
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveGoodsAdditionalProperty(GoodsAdditionalProperty value, out string msg)
		{
			try
            {
                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用商品附加属性业务逻辑:保存实体(商品附加属性)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录商品附加属性
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<GoodsAdditionalProperty> AllGoodsAdditionalPropertys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用商品附加属性业务逻辑:获取所有实体(商品附加属性)失败";
                return this.HandleException<List<GoodsAdditionalProperty>>(message, ex);
            }
		}

		 
        public List<GoodsAdditionalProperty> QueryGoodsAdditionalPropertys(string carefunction,string putonrecord,DateTime putonrecorddatefrom,DateTime putonrecorddateto,string notsuitablepeople,string suitablepeople,string landmarkingredient,DateTime licensepermissiondatefrom,DateTime licensepermissiondateto,string usageanddosage,string mainingredient,string productaddress,string productaddressenglish,string productcountry,string productcountryenglish,string healthpermit,string regcode,string regproxycompany,string factorynameenglish,string factoryaddress,string factoryaddressenglish,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<GoodsAdditionalProperty>(); 
                if(!string.IsNullOrEmpty(carefunction)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CareFunction, carefunction);
                }
                if(!string.IsNullOrEmpty(putonrecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PutOnRecord, putonrecord);
                }
                if(putonrecorddateto!=default(DateTime)&&putonrecorddatefrom!=default(DateTime)){//From==To执行==
                if(putonrecorddateto==putonrecorddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PutOnRecordDate, putonrecorddatefrom);
                }
                else if(putonrecorddateto>putonrecorddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PutOnRecordDate, putonrecorddatefrom,putonrecorddateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(notsuitablepeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NotSuitablePeople, notsuitablepeople);
                }
                if(!string.IsNullOrEmpty(suitablepeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SuitablePeople, suitablepeople);
                }
                if(!string.IsNullOrEmpty(landmarkingredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LandmarkIngredient, landmarkingredient);
                }
                if(licensepermissiondateto!=default(DateTime)&&licensepermissiondatefrom!=default(DateTime)){//From==To执行==
                if(licensepermissiondateto==licensepermissiondatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicensePermissionDate, licensepermissiondatefrom);
                }
                else if(licensepermissiondateto>licensepermissiondatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicensePermissionDate, licensepermissiondatefrom,licensepermissiondateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(usageanddosage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UsageAndDosage, usageanddosage);
                }
                if(!string.IsNullOrEmpty(mainingredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MainIngredient, mainingredient);
                }
                if(!string.IsNullOrEmpty(productaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, productaddress);
                }
                if(!string.IsNullOrEmpty(productaddressenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddressEnglish, productaddressenglish);
                }
                if(!string.IsNullOrEmpty(productcountry)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountry, productcountry);
                }
                if(!string.IsNullOrEmpty(productcountryenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountryEnglish, productcountryenglish);
                }
                if(!string.IsNullOrEmpty(healthpermit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HealthPermit, healthpermit);
                }
                if(!string.IsNullOrEmpty(regcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegCode, regcode);
                }
                if(!string.IsNullOrEmpty(regproxycompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegProxyCompany, regproxycompany);
                }
                if(!string.IsNullOrEmpty(factorynameenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameEnglish, factorynameenglish);
                }
                if(!string.IsNullOrEmpty(factoryaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddress, factoryaddress);
                }
                if(!string.IsNullOrEmpty(factoryaddressenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddressEnglish, factoryaddressenglish);
                }

                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用商品附加属性业务逻辑:查询实体(商品附加属性)失败";
                return this.HandleException<List<GoodsAdditionalProperty>>(msg, ex);
            }
        } 
		
		 
        public List<GoodsAdditionalProperty> QueryPagedGoodsAdditionalPropertys(string carefunction,string putonrecord,DateTime putonrecorddatefrom,DateTime putonrecorddateto,string notsuitablepeople,string suitablepeople,string landmarkingredient,DateTime licensepermissiondatefrom,DateTime licensepermissiondateto,string usageanddosage,string mainingredient,string productaddress,string productaddressenglish,string productcountry,string productcountryenglish,string healthpermit,string regcode,string regproxycompany,string factorynameenglish,string factoryaddress,string factoryaddressenglish,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GoodsAdditionalProperty>();
                var queryBuilder = QueryBuilder.Create<GoodsAdditionalProperty>(); 
                if(!string.IsNullOrEmpty(carefunction)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CareFunction, carefunction);
                }
                if(!string.IsNullOrEmpty(putonrecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PutOnRecord, putonrecord);
                }
                if(putonrecorddateto!=default(DateTime)&&putonrecorddatefrom!=default(DateTime)){//From==To执行==
                if(putonrecorddateto==putonrecorddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PutOnRecordDate, putonrecorddatefrom);
                }
                else if(putonrecorddateto>putonrecorddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PutOnRecordDate, putonrecorddatefrom,putonrecorddateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(notsuitablepeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NotSuitablePeople, notsuitablepeople);
                }
                if(!string.IsNullOrEmpty(suitablepeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SuitablePeople, suitablepeople);
                }
                if(!string.IsNullOrEmpty(landmarkingredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LandmarkIngredient, landmarkingredient);
                }
                if(licensepermissiondateto!=default(DateTime)&&licensepermissiondatefrom!=default(DateTime)){//From==To执行==
                if(licensepermissiondateto==licensepermissiondatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicensePermissionDate, licensepermissiondatefrom);
                }
                else if(licensepermissiondateto>licensepermissiondatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicensePermissionDate, licensepermissiondatefrom,licensepermissiondateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(usageanddosage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UsageAndDosage, usageanddosage);
                }
                if(!string.IsNullOrEmpty(mainingredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MainIngredient, mainingredient);
                }
                if(!string.IsNullOrEmpty(productaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, productaddress);
                }
                if(!string.IsNullOrEmpty(productaddressenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddressEnglish, productaddressenglish);
                }
                if(!string.IsNullOrEmpty(productcountry)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountry, productcountry);
                }
                if(!string.IsNullOrEmpty(productcountryenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountryEnglish, productcountryenglish);
                }
                if(!string.IsNullOrEmpty(healthpermit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HealthPermit, healthpermit);
                }
                if(!string.IsNullOrEmpty(regcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegCode, regcode);
                }
                if(!string.IsNullOrEmpty(regproxycompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegProxyCompany, regproxycompany);
                }
                if(!string.IsNullOrEmpty(factorynameenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameEnglish, factorynameenglish);
                }
                if(!string.IsNullOrEmpty(factoryaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddress, factoryaddress);
                }
                if(!string.IsNullOrEmpty(factoryaddressenglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddressEnglish, factoryaddressenglish);
                }

                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<GoodsAdditionalProperty>>("调用商品附加属性业务逻辑:查询实体(商品附加属性)失败", ex);
            }
        } 
 
        public List<GoodsAdditionalProperty> SearchGoodsAdditionalPropertysByQueryModel(QueryGoodsAdditionalPropertyModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<GoodsAdditionalProperty>();
                var queryBuilder = QueryBuilder.Create<GoodsAdditionalProperty>(); 
                if(!string.IsNullOrEmpty(qModel.CareFunction)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CareFunction, qModel.CareFunction);
                }
                if(!string.IsNullOrEmpty(qModel.PutOnRecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PutOnRecord, qModel.PutOnRecord);
                }
                if(qModel.PutOnRecordDateTo!=default(DateTime)&&qModel.PutOnRecordDateFrom!=default(DateTime)){
                if(qModel.PutOnRecordDateTo==qModel.PutOnRecordDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PutOnRecordDate, qModel.PutOnRecordDateFrom);
                }
                else if(qModel.PutOnRecordDateTo>qModel.PutOnRecordDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PutOnRecordDate, qModel.PutOnRecordDateFrom,qModel.PutOnRecordDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.NotSuitablePeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NotSuitablePeople, qModel.NotSuitablePeople);
                }
                if(!string.IsNullOrEmpty(qModel.SuitablePeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SuitablePeople, qModel.SuitablePeople);
                }
                if(!string.IsNullOrEmpty(qModel.LandmarkIngredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LandmarkIngredient, qModel.LandmarkIngredient);
                }
                if(qModel.LicensePermissionDateTo!=default(DateTime)&&qModel.LicensePermissionDateFrom!=default(DateTime)){
                if(qModel.LicensePermissionDateTo==qModel.LicensePermissionDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicensePermissionDate, qModel.LicensePermissionDateFrom);
                }
                else if(qModel.LicensePermissionDateTo>qModel.LicensePermissionDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicensePermissionDate, qModel.LicensePermissionDateFrom,qModel.LicensePermissionDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.UsageAndDosage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UsageAndDosage, qModel.UsageAndDosage);
                }
                if(!string.IsNullOrEmpty(qModel.MainIngredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MainIngredient, qModel.MainIngredient);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, qModel.ProductAddress);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddressEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddressEnglish, qModel.ProductAddressEnglish);
                }
                if(!string.IsNullOrEmpty(qModel.ProductCountry)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountry, qModel.ProductCountry);
                }
                if(!string.IsNullOrEmpty(qModel.ProductCountryEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountryEnglish, qModel.ProductCountryEnglish);
                }
                if(!string.IsNullOrEmpty(qModel.HealthPermit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HealthPermit, qModel.HealthPermit);
                }
                if(!string.IsNullOrEmpty(qModel.RegCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegCode, qModel.RegCode);
                }
                if(!string.IsNullOrEmpty(qModel.RegProxyCompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegProxyCompany, qModel.RegProxyCompany);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryNameEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameEnglish, qModel.FactoryNameEnglish);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddress, qModel.FactoryAddress);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryAddressEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddressEnglish, qModel.FactoryAddressEnglish);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }

                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用商品附加属性业务逻辑:通查询Model查询实体(商品附加属性)失败";
                return this.HandleException<List<GoodsAdditionalProperty>>(message, ex);
            }  
		} 

		 
        public List<GoodsAdditionalProperty> SearchPagedGoodsAdditionalPropertysByQueryModel(QueryGoodsAdditionalPropertyModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GoodsAdditionalProperty>();
                var queryBuilder = QueryBuilder.Create<GoodsAdditionalProperty>(); 
                if(!string.IsNullOrEmpty(qModel.CareFunction)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CareFunction, qModel.CareFunction);
                }
                if(!string.IsNullOrEmpty(qModel.PutOnRecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PutOnRecord, qModel.PutOnRecord);
                }
                if(qModel.PutOnRecordDateTo!=default(DateTime)&&qModel.PutOnRecordDateFrom!=default(DateTime)){
                if(qModel.PutOnRecordDateTo==qModel.PutOnRecordDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PutOnRecordDate, qModel.PutOnRecordDateFrom);
                }
                else if(qModel.PutOnRecordDateTo>qModel.PutOnRecordDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PutOnRecordDate, qModel.PutOnRecordDateFrom,qModel.PutOnRecordDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.NotSuitablePeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NotSuitablePeople, qModel.NotSuitablePeople);
                }
                if(!string.IsNullOrEmpty(qModel.SuitablePeople)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SuitablePeople, qModel.SuitablePeople);
                }
                if(!string.IsNullOrEmpty(qModel.LandmarkIngredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LandmarkIngredient, qModel.LandmarkIngredient);
                }
                if(qModel.LicensePermissionDateTo!=default(DateTime)&&qModel.LicensePermissionDateFrom!=default(DateTime)){
                if(qModel.LicensePermissionDateTo==qModel.LicensePermissionDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicensePermissionDate, qModel.LicensePermissionDateFrom);
                }
                else if(qModel.LicensePermissionDateTo>qModel.LicensePermissionDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicensePermissionDate, qModel.LicensePermissionDateFrom,qModel.LicensePermissionDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.UsageAndDosage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UsageAndDosage, qModel.UsageAndDosage);
                }
                if(!string.IsNullOrEmpty(qModel.MainIngredient)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MainIngredient, qModel.MainIngredient);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, qModel.ProductAddress);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddressEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddressEnglish, qModel.ProductAddressEnglish);
                }
                if(!string.IsNullOrEmpty(qModel.ProductCountry)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountry, qModel.ProductCountry);
                }
                if(!string.IsNullOrEmpty(qModel.ProductCountryEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductCountryEnglish, qModel.ProductCountryEnglish);
                }
                if(!string.IsNullOrEmpty(qModel.HealthPermit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HealthPermit, qModel.HealthPermit);
                }
                if(!string.IsNullOrEmpty(qModel.RegCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegCode, qModel.RegCode);
                }
                if(!string.IsNullOrEmpty(qModel.RegProxyCompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegProxyCompany, qModel.RegProxyCompany);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryNameEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameEnglish, qModel.FactoryNameEnglish);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddress, qModel.FactoryAddress);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryAddressEnglish)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryAddressEnglish, qModel.FactoryAddressEnglish);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }

                return HandlerFactory.GoodsAdditionalPropertyBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<GoodsAdditionalProperty>>("调用商品附加属性业务逻辑:通过查询Model分页查询实体(商品附加属性)失败", ex);
            }  
		}

		#endregion 商品附加属性 
		   
		#region 采购结算单

		/// <summary>
        /// 获取实体采购结算单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseCashOrder GetPurchaseCashOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCashOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseCashOrder>("调用采购结算单业务逻辑:根据编号获取实体(采购结算单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购结算单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseCashOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCashOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购结算单业务逻辑:统计所有(采购结算单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购结算单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseCashOrder(PurchaseCashOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCashOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购结算单业务逻辑:添加实体(采购结算单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购结算单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseCashOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCashOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购结算单业务逻辑:删除实体(采购结算单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购结算单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseCashOrder(PurchaseCashOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCashOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购结算单业务逻辑:保存实体(采购结算单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购结算单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseCashOrder> AllPurchaseCashOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCashOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购结算单业务逻辑:获取所有实体(采购结算单)失败";
                return this.HandleException<List<PurchaseCashOrder>>(message, ex);
            }
		}

		 
        public List<PurchaseCashOrder> QueryPurchaseCashOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,int orderstatusvaluefrom,int orderstatusvalueto,string approvaldecription,DateTime paymenttimefrom,DateTime paymenttimeto,decimal paymentedamountfrom,decimal paymentedamountto,decimal paymentingamountfrom,decimal paymentingamountto,decimal paymentamountfrom,decimal paymentamountto,int dealermethodvaluefrom,int dealermethodvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseCashOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From>To不参与条件
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(approvaldecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, approvaldecription);
                }
                if(paymenttimeto!=default(DateTime)&&paymenttimefrom!=default(DateTime)){//From==To执行==
                if(paymenttimeto==paymenttimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentTime, paymenttimefrom);
                }
                else if(paymenttimeto>paymenttimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentTime, paymenttimefrom,paymenttimeto);
                }}//From>To不参与条件
                if(paymentedamountto==paymentedamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentedAmount, paymentedamountfrom);
                }
                else if(paymentedamountto>paymentedamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentedAmount, paymentedamountfrom,paymentedamountto);
                }//From>To不参与条件
                if(paymentingamountto==paymentingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentingAmount, paymentingamountfrom);
                }
                else if(paymentingamountto>paymentingamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentingAmount, paymentingamountfrom,paymentingamountto);
                }//From>To不参与条件
                if(paymentamountto==paymentamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentAmount, paymentamountfrom);
                }
                else if(paymentamountto>paymentamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentAmount, paymentamountfrom,paymentamountto);
                }//From>To不参与条件
                if(dealermethodvalueto==dealermethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DealerMethodValue, dealermethodvaluefrom);
                }
                else if(dealermethodvalueto>dealermethodvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DealerMethodValue, dealermethodvaluefrom,dealermethodvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From>To不参与条件

                return HandlerFactory.PurchaseCashOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购结算单业务逻辑:查询实体(采购结算单)失败";
                return this.HandleException<List<PurchaseCashOrder>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseCashOrder> QueryPagedPurchaseCashOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,int orderstatusvaluefrom,int orderstatusvalueto,string approvaldecription,DateTime paymenttimefrom,DateTime paymenttimeto,decimal paymentedamountfrom,decimal paymentedamountto,decimal paymentingamountfrom,decimal paymentingamountto,decimal paymentamountfrom,decimal paymentamountto,int dealermethodvaluefrom,int dealermethodvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseCashOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseCashOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From<To不参与条件
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(approvaldecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, approvaldecription);
                }
                if(paymenttimeto!=default(DateTime)&&paymenttimefrom!=default(DateTime)){//From==To执行==
                if(paymenttimeto==paymenttimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentTime, paymenttimefrom);
                }
                else if(paymenttimeto>paymenttimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PaymentTime, paymenttimefrom,paymenttimeto);
                }}//From<To不参与条件
                if(paymentedamountto==paymentedamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentedAmount, paymentedamountfrom);
                }
                else if(paymentedamountto>paymentedamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PaymentedAmount, paymentedamountfrom,paymentedamountto);
                }//From<To不参与条件
                if(paymentingamountto==paymentingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentingAmount, paymentingamountfrom);
                }
                else if(paymentingamountto>paymentingamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PaymentingAmount, paymentingamountfrom,paymentingamountto);
                }//From<To不参与条件
                if(paymentamountto==paymentamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentAmount, paymentamountfrom);
                }
                else if(paymentamountto>paymentamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PaymentAmount, paymentamountfrom,paymentamountto);
                }//From<To不参与条件
                if(dealermethodvalueto==dealermethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DealerMethodValue, dealermethodvaluefrom);
                }
                else if(dealermethodvalueto>dealermethodvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DealerMethodValue, dealermethodvaluefrom,dealermethodvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From<To不参与条件

                return HandlerFactory.PurchaseCashOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseCashOrder>>("调用采购结算单业务逻辑:查询实体(采购结算单)失败", ex);
            }
        } 
 
        public List<PurchaseCashOrder> SearchPurchaseCashOrdersByQueryModel(QueryPurchaseCashOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseCashOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseCashOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(!string.IsNullOrEmpty(qModel.ApprovalDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, qModel.ApprovalDecription);
                }
                if(qModel.PaymentTimeTo!=default(DateTime)&&qModel.PaymentTimeFrom!=default(DateTime)){
                if(qModel.PaymentTimeTo==qModel.PaymentTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentTime, qModel.PaymentTimeFrom);
                }
                else if(qModel.PaymentTimeTo>qModel.PaymentTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentTime, qModel.PaymentTimeFrom,qModel.PaymentTimeTo);
                }//From>To不参与条件
                }
                if(qModel.PaymentMethodId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PaymentMethodId, qModel.PaymentMethodId);
                }
                if(qModel.PaymentedAmountTo==qModel.PaymentedAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentedAmount, qModel.PaymentedAmountFrom);
                }
                else if(qModel.PaymentedAmountTo>qModel.PaymentedAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentedAmount, qModel.PaymentedAmountFrom,qModel.PaymentedAmountTo);
                }//From>To不参与条件
                if(qModel.PaymentingAmountTo==qModel.PaymentingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentingAmount, qModel.PaymentingAmountFrom);
                }
                else if(qModel.PaymentingAmountTo>qModel.PaymentingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentingAmount, qModel.PaymentingAmountFrom,qModel.PaymentingAmountTo);
                }//From>To不参与条件
                if(qModel.PaymentAmountTo==qModel.PaymentAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentAmount, qModel.PaymentAmountFrom);
                }
                else if(qModel.PaymentAmountTo>qModel.PaymentAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentAmount, qModel.PaymentAmountFrom,qModel.PaymentAmountTo);
                }//From>To不参与条件
                if(qModel.DealerMethodValueTo==qModel.DealerMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DealerMethodValue, qModel.DealerMethodValueFrom);
                }
                else if(qModel.DealerMethodValueTo>qModel.DealerMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DealerMethodValue, qModel.DealerMethodValueFrom,qModel.DealerMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }

                return HandlerFactory.PurchaseCashOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购结算单业务逻辑:通查询Model查询实体(采购结算单)失败";
                return this.HandleException<List<PurchaseCashOrder>>(message, ex);
            }  
		} 

		 
        public List<PurchaseCashOrder> SearchPagedPurchaseCashOrdersByQueryModel(QueryPurchaseCashOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseCashOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseCashOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(!string.IsNullOrEmpty(qModel.ApprovalDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, qModel.ApprovalDecription);
                }
                if(qModel.PaymentTimeTo!=default(DateTime)&&qModel.PaymentTimeFrom!=default(DateTime)){
                if(qModel.PaymentTimeTo==qModel.PaymentTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentTime, qModel.PaymentTimeFrom);
                }
                else if(qModel.PaymentTimeTo>qModel.PaymentTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentTime, qModel.PaymentTimeFrom,qModel.PaymentTimeTo);
                }//From>To不参与条件
                }
                if(qModel.PaymentMethodId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PaymentMethodId, qModel.PaymentMethodId);
                }
                if(qModel.PaymentedAmountTo==qModel.PaymentedAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentedAmount, qModel.PaymentedAmountFrom);
                }
                else if(qModel.PaymentedAmountTo>qModel.PaymentedAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentedAmount, qModel.PaymentedAmountFrom,qModel.PaymentedAmountTo);
                }//From>To不参与条件
                if(qModel.PaymentingAmountTo==qModel.PaymentingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentingAmount, qModel.PaymentingAmountFrom);
                }
                else if(qModel.PaymentingAmountTo>qModel.PaymentingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentingAmount, qModel.PaymentingAmountFrom,qModel.PaymentingAmountTo);
                }//From>To不参与条件
                if(qModel.PaymentAmountTo==qModel.PaymentAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentAmount, qModel.PaymentAmountFrom);
                }
                else if(qModel.PaymentAmountTo>qModel.PaymentAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentAmount, qModel.PaymentAmountFrom,qModel.PaymentAmountTo);
                }//From>To不参与条件
                if(qModel.DealerMethodValueTo==qModel.DealerMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DealerMethodValue, qModel.DealerMethodValueFrom);
                }
                else if(qModel.DealerMethodValueTo>qModel.DealerMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DealerMethodValue, qModel.DealerMethodValueFrom,qModel.DealerMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }

                return HandlerFactory.PurchaseCashOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseCashOrder>>("调用采购结算单业务逻辑:通过查询Model分页查询实体(采购结算单)失败", ex);
            }  
		}

		#endregion 采购结算单 
		   
		#region 配送信息

		/// <summary>
        /// 获取实体配送信息
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Delivery GetDelivery(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DeliveryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Delivery>("调用配送信息业务逻辑:根据编号获取实体(配送信息)失败", ex);
            }
		} 

        /// <summary>
        /// 统计配送信息
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDelivery(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DeliveryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用配送信息业务逻辑:统计所有(配送信息)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加配送信息
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDelivery(Delivery value,out string msg)
		{
			try
            {
                return HandlerFactory.DeliveryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用配送信息业务逻辑:添加实体(配送信息)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除配送信息
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDelivery(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DeliveryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用配送信息业务逻辑:删除实体(配送信息)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存配送信息
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDelivery(Delivery value, out string msg)
		{
			try
            {
                return HandlerFactory.DeliveryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用配送信息业务逻辑:保存实体(配送信息)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录配送信息
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Delivery> AllDeliverys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DeliveryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用配送信息业务逻辑:获取所有实体(配送信息)失败";
                return this.HandleException<List<Delivery>>(message, ex);
            }
		}

		 
        public List<Delivery> QueryDeliverys(DateTime deliverytimefrom,DateTime deliverytimeto,string shippingaddress,string deliveryaddress,string manifestnumber,int drugscountfrom,int drugscountto,int deliverymethodvaluefrom,int deliverymethodvalueto,int transportmethodvaluefrom,int transportmethodvalueto,string principal,string principalphone,string transportcompany,string vehicleinfo,int deliverystatusvaluefrom,int deliverystatusvalueto,string memo,bool isover,bool queryisover,DateTime reservationtimefrom,DateTime reservationtimeto,string reservationno,DateTime acceptedtimefrom,DateTime acceptedtimeto,string acceptedno,DateTime canceledtimefrom,DateTime canceledtimeto,string canceledno,DateTime outedtimefrom,DateTime outedtimeto,string outedno,DateTime signedtimefrom,DateTime signedtimeto,string signedno,DateTime returntimefrom,DateTime returntimeto,string returnno,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Delivery>(); 
                if(deliverytimeto!=default(DateTime)&&deliverytimefrom!=default(DateTime)){//From==To执行==
                if(deliverytimeto==deliverytimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryTime, deliverytimefrom);
                }
                else if(deliverytimeto>deliverytimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryTime, deliverytimefrom,deliverytimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(shippingaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAddress, shippingaddress);
                }
                if(!string.IsNullOrEmpty(deliveryaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DeliveryAddress, deliveryaddress);
                }
                if(!string.IsNullOrEmpty(manifestnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManifestNumber, manifestnumber);
                }
                if(drugscountto==drugscountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugsCount, drugscountfrom);
                }
                else if(drugscountto>drugscountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugsCount, drugscountfrom,drugscountto);
                }//From>To不参与条件
                if(deliverymethodvalueto==deliverymethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryMethodValue, deliverymethodvaluefrom);
                }
                else if(deliverymethodvalueto>deliverymethodvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryMethodValue, deliverymethodvaluefrom,deliverymethodvalueto);
                }//From>To不参与条件
                if(transportmethodvalueto==transportmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.TransportMethodValue, transportmethodvaluefrom);
                }
                else if(transportmethodvalueto>transportmethodvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.TransportMethodValue, transportmethodvaluefrom,transportmethodvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(principal)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Principal, principal);
                }
                if(!string.IsNullOrEmpty(principalphone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PrincipalPhone, principalphone);
                }
                if(!string.IsNullOrEmpty(transportcompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportCompany, transportcompany);
                }
                if(!string.IsNullOrEmpty(vehicleinfo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.VehicleInfo, vehicleinfo);
                }
                if(deliverystatusvalueto==deliverystatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryStatusValue, deliverystatusvaluefrom);
                }
                else if(deliverystatusvalueto>deliverystatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryStatusValue, deliverystatusvaluefrom,deliverystatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, memo);
                }
                if(queryisover){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOver, isover);
}
                if(reservationtimeto!=default(DateTime)&&reservationtimefrom!=default(DateTime)){//From==To执行==
                if(reservationtimeto==reservationtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReservationTime, reservationtimefrom);
                }
                else if(reservationtimeto>reservationtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReservationTime, reservationtimefrom,reservationtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(reservationno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReservationNo, reservationno);
                }
                if(acceptedtimeto!=default(DateTime)&&acceptedtimefrom!=default(DateTime)){//From==To执行==
                if(acceptedtimeto==acceptedtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.AcceptedTime, acceptedtimefrom);
                }
                else if(acceptedtimeto>acceptedtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.AcceptedTime, acceptedtimefrom,acceptedtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(acceptedno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AcceptedNo, acceptedno);
                }
                if(canceledtimeto!=default(DateTime)&&canceledtimefrom!=default(DateTime)){//From==To执行==
                if(canceledtimeto==canceledtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanceledTime, canceledtimefrom);
                }
                else if(canceledtimeto>canceledtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanceledTime, canceledtimefrom,canceledtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(canceledno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CanceledNo, canceledno);
                }
                if(outedtimeto!=default(DateTime)&&outedtimefrom!=default(DateTime)){//From==To执行==
                if(outedtimeto==outedtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.outedTime, outedtimefrom);
                }
                else if(outedtimeto>outedtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.outedTime, outedtimefrom,outedtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(outedno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.outedNo, outedno);
                }
                if(signedtimeto!=default(DateTime)&&signedtimefrom!=default(DateTime)){//From==To执行==
                if(signedtimeto==signedtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SignedTime, signedtimefrom);
                }
                else if(signedtimeto>signedtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.SignedTime, signedtimefrom,signedtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(signedno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SignedNo, signedno);
                }
                if(returntimeto!=default(DateTime)&&returntimefrom!=default(DateTime)){//From==To执行==
                if(returntimeto==returntimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnTime, returntimefrom);
                }
                else if(returntimeto>returntimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnTime, returntimefrom,returntimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(returnno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnNo, returnno);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.DeliveryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用配送信息业务逻辑:查询实体(配送信息)失败";
                return this.HandleException<List<Delivery>>(msg, ex);
            }
        } 
		
		 
        public List<Delivery> QueryPagedDeliverys(DateTime deliverytimefrom,DateTime deliverytimeto,string shippingaddress,string deliveryaddress,string manifestnumber,int drugscountfrom,int drugscountto,int deliverymethodvaluefrom,int deliverymethodvalueto,int transportmethodvaluefrom,int transportmethodvalueto,string principal,string principalphone,string transportcompany,string vehicleinfo,int deliverystatusvaluefrom,int deliverystatusvalueto,string memo,bool isover,bool queryisover,DateTime reservationtimefrom,DateTime reservationtimeto,string reservationno,DateTime acceptedtimefrom,DateTime acceptedtimeto,string acceptedno,DateTime canceledtimefrom,DateTime canceledtimeto,string canceledno,DateTime outedtimefrom,DateTime outedtimeto,string outedno,DateTime signedtimefrom,DateTime signedtimeto,string signedno,DateTime returntimefrom,DateTime returntimeto,string returnno,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Delivery>();
                var queryBuilder = QueryBuilder.Create<Delivery>(); 
                if(deliverytimeto!=default(DateTime)&&deliverytimefrom!=default(DateTime)){//From==To执行==
                if(deliverytimeto==deliverytimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryTime, deliverytimefrom);
                }
                else if(deliverytimeto>deliverytimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DeliveryTime, deliverytimefrom,deliverytimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(shippingaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAddress, shippingaddress);
                }
                if(!string.IsNullOrEmpty(deliveryaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DeliveryAddress, deliveryaddress);
                }
                if(!string.IsNullOrEmpty(manifestnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManifestNumber, manifestnumber);
                }
                if(drugscountto==drugscountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugsCount, drugscountfrom);
                }
                else if(drugscountto>drugscountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.DrugsCount, drugscountfrom,drugscountto);
                }//From<To不参与条件
                if(deliverymethodvalueto==deliverymethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryMethodValue, deliverymethodvaluefrom);
                }
                else if(deliverymethodvalueto>deliverymethodvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DeliveryMethodValue, deliverymethodvaluefrom,deliverymethodvalueto);
                }//From<To不参与条件
                if(transportmethodvalueto==transportmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.TransportMethodValue, transportmethodvaluefrom);
                }
                else if(transportmethodvalueto>transportmethodvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.TransportMethodValue, transportmethodvaluefrom,transportmethodvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(principal)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Principal, principal);
                }
                if(!string.IsNullOrEmpty(principalphone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PrincipalPhone, principalphone);
                }
                if(!string.IsNullOrEmpty(transportcompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportCompany, transportcompany);
                }
                if(!string.IsNullOrEmpty(vehicleinfo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.VehicleInfo, vehicleinfo);
                }
                if(deliverystatusvalueto==deliverystatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryStatusValue, deliverystatusvaluefrom);
                }
                else if(deliverystatusvalueto>deliverystatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DeliveryStatusValue, deliverystatusvaluefrom,deliverystatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, memo);
                }
                if(queryisover){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOver, isover);
}
                if(reservationtimeto!=default(DateTime)&&reservationtimefrom!=default(DateTime)){//From==To执行==
                if(reservationtimeto==reservationtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReservationTime, reservationtimefrom);
                }
                else if(reservationtimeto>reservationtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReservationTime, reservationtimefrom,reservationtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(reservationno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReservationNo, reservationno);
                }
                if(acceptedtimeto!=default(DateTime)&&acceptedtimefrom!=default(DateTime)){//From==To执行==
                if(acceptedtimeto==acceptedtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.AcceptedTime, acceptedtimefrom);
                }
                else if(acceptedtimeto>acceptedtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.AcceptedTime, acceptedtimefrom,acceptedtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(acceptedno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AcceptedNo, acceptedno);
                }
                if(canceledtimeto!=default(DateTime)&&canceledtimefrom!=default(DateTime)){//From==To执行==
                if(canceledtimeto==canceledtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanceledTime, canceledtimefrom);
                }
                else if(canceledtimeto>canceledtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CanceledTime, canceledtimefrom,canceledtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(canceledno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CanceledNo, canceledno);
                }
                if(outedtimeto!=default(DateTime)&&outedtimefrom!=default(DateTime)){//From==To执行==
                if(outedtimeto==outedtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.outedTime, outedtimefrom);
                }
                else if(outedtimeto>outedtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.outedTime, outedtimefrom,outedtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(outedno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.outedNo, outedno);
                }
                if(signedtimeto!=default(DateTime)&&signedtimefrom!=default(DateTime)){//From==To执行==
                if(signedtimeto==signedtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SignedTime, signedtimefrom);
                }
                else if(signedtimeto>signedtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.SignedTime, signedtimefrom,signedtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(signedno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SignedNo, signedno);
                }
                if(returntimeto!=default(DateTime)&&returntimefrom!=default(DateTime)){//From==To执行==
                if(returntimeto==returntimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnTime, returntimefrom);
                }
                else if(returntimeto>returntimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnTime, returntimefrom,returntimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(returnno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnNo, returnno);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.DeliveryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Delivery>>("调用配送信息业务逻辑:查询实体(配送信息)失败", ex);
            }
        } 
 
        public List<Delivery> SearchDeliverysByQueryModel(QueryDeliveryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Delivery>();
                var queryBuilder = QueryBuilder.Create<Delivery>(); 
                if(qModel.DeliveryTimeTo!=default(DateTime)&&qModel.DeliveryTimeFrom!=default(DateTime)){
                if(qModel.DeliveryTimeTo==qModel.DeliveryTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryTime, qModel.DeliveryTimeFrom);
                }
                else if(qModel.DeliveryTimeTo>qModel.DeliveryTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryTime, qModel.DeliveryTimeFrom,qModel.DeliveryTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.ShippingAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAddress, qModel.ShippingAddress);
                }
                if(qModel.ReceivingCompasnyID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReceivingCompasnyID, qModel.ReceivingCompasnyID);
                }
                if(!string.IsNullOrEmpty(qModel.DeliveryAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DeliveryAddress, qModel.DeliveryAddress);
                }
                if(!string.IsNullOrEmpty(qModel.ManifestNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManifestNumber, qModel.ManifestNumber);
                }
                if(qModel.DrugsCountTo==qModel.DrugsCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugsCount, qModel.DrugsCountFrom);
                }
                else if(qModel.DrugsCountTo>qModel.DrugsCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugsCount, qModel.DrugsCountFrom,qModel.DrugsCountTo);
                }//From>To不参与条件
                if(qModel.DeliveryMethodValueTo==qModel.DeliveryMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryMethodValue, qModel.DeliveryMethodValueFrom);
                }
                else if(qModel.DeliveryMethodValueTo>qModel.DeliveryMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryMethodValue, qModel.DeliveryMethodValueFrom,qModel.DeliveryMethodValueTo);
                }//From>To不参与条件
                if(qModel.TransportMethodValueTo==qModel.TransportMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TransportMethodValue, qModel.TransportMethodValueFrom);
                }
                else if(qModel.TransportMethodValueTo>qModel.TransportMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TransportMethodValue, qModel.TransportMethodValueFrom,qModel.TransportMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Principal)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Principal, qModel.Principal);
                }
                if(!string.IsNullOrEmpty(qModel.PrincipalPhone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PrincipalPhone, qModel.PrincipalPhone);
                }
                if(!string.IsNullOrEmpty(qModel.TransportCompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportCompany, qModel.TransportCompany);
                }
                if(!string.IsNullOrEmpty(qModel.VehicleInfo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.VehicleInfo, qModel.VehicleInfo);
                }
                if(qModel.VehicleID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.VehicleID, qModel.VehicleID);
                }
                if(qModel.DeliveryStatusValueTo==qModel.DeliveryStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryStatusValue, qModel.DeliveryStatusValueFrom);
                }
                else if(qModel.DeliveryStatusValueTo>qModel.DeliveryStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryStatusValue, qModel.DeliveryStatusValueFrom,qModel.DeliveryStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, qModel.Memo);
                }
                if(qModel.QueryIsOver){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOver, qModel.IsOver);
}
                if(qModel.ReservationTimeTo!=default(DateTime)&&qModel.ReservationTimeFrom!=default(DateTime)){
                if(qModel.ReservationTimeTo==qModel.ReservationTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReservationTime, qModel.ReservationTimeFrom);
                }
                else if(qModel.ReservationTimeTo>qModel.ReservationTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReservationTime, qModel.ReservationTimeFrom,qModel.ReservationTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ReservationOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReservationOperatorId, qModel.ReservationOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.ReservationNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReservationNo, qModel.ReservationNo);
                }
                if(qModel.AcceptedTimeTo!=default(DateTime)&&qModel.AcceptedTimeFrom!=default(DateTime)){
                if(qModel.AcceptedTimeTo==qModel.AcceptedTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AcceptedTime, qModel.AcceptedTimeFrom);
                }
                else if(qModel.AcceptedTimeTo>qModel.AcceptedTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AcceptedTime, qModel.AcceptedTimeFrom,qModel.AcceptedTimeTo);
                }//From>To不参与条件
                }
                if(qModel.AcceptedOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AcceptedOperatorId, qModel.AcceptedOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.AcceptedNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AcceptedNo, qModel.AcceptedNo);
                }
                if(qModel.CanceledTimeTo!=default(DateTime)&&qModel.CanceledTimeFrom!=default(DateTime)){
                if(qModel.CanceledTimeTo==qModel.CanceledTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanceledTime, qModel.CanceledTimeFrom);
                }
                else if(qModel.CanceledTimeTo>qModel.CanceledTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanceledTime, qModel.CanceledTimeFrom,qModel.CanceledTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CanceledOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CanceledOperatorId, qModel.CanceledOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.CanceledNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CanceledNo, qModel.CanceledNo);
                }
                if(qModel.outedTimeTo!=default(DateTime)&&qModel.outedTimeFrom!=default(DateTime)){
                if(qModel.outedTimeTo==qModel.outedTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.outedTime, qModel.outedTimeFrom);
                }
                else if(qModel.outedTimeTo>qModel.outedTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.outedTime, qModel.outedTimeFrom,qModel.outedTimeTo);
                }//From>To不参与条件
                }
                if(qModel.outedOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.outedOperatorId, qModel.outedOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.outedNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.outedNo, qModel.outedNo);
                }
                if(qModel.SignedTimeTo!=default(DateTime)&&qModel.SignedTimeFrom!=default(DateTime)){
                if(qModel.SignedTimeTo==qModel.SignedTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SignedTime, qModel.SignedTimeFrom);
                }
                else if(qModel.SignedTimeTo>qModel.SignedTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SignedTime, qModel.SignedTimeFrom,qModel.SignedTimeTo);
                }//From>To不参与条件
                }
                if(qModel.SignedOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SignedOperatorId, qModel.SignedOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.SignedNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SignedNo, qModel.SignedNo);
                }
                if(qModel.ReturnTimeTo!=default(DateTime)&&qModel.ReturnTimeFrom!=default(DateTime)){
                if(qModel.ReturnTimeTo==qModel.ReturnTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnTime, qModel.ReturnTimeFrom);
                }
                else if(qModel.ReturnTimeTo>qModel.ReturnTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnTime, qModel.ReturnTimeFrom,qModel.ReturnTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ReturnOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReturnOperatorId, qModel.ReturnOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.ReturnNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnNo, qModel.ReturnNo);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.OrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderID, qModel.OrderID);
                }
                if(qModel.OutInventoryID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryID, qModel.OutInventoryID);
                }
                if(qModel.OwnVehicleID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OwnVehicleID, qModel.OwnVehicleID);
                }

                return HandlerFactory.DeliveryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用配送信息业务逻辑:通查询Model查询实体(配送信息)失败";
                return this.HandleException<List<Delivery>>(message, ex);
            }  
		} 

		 
        public List<Delivery> SearchPagedDeliverysByQueryModel(QueryDeliveryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Delivery>();
                var queryBuilder = QueryBuilder.Create<Delivery>(); 
                if(qModel.DeliveryTimeTo!=default(DateTime)&&qModel.DeliveryTimeFrom!=default(DateTime)){
                if(qModel.DeliveryTimeTo==qModel.DeliveryTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryTime, qModel.DeliveryTimeFrom);
                }
                else if(qModel.DeliveryTimeTo>qModel.DeliveryTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryTime, qModel.DeliveryTimeFrom,qModel.DeliveryTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.ShippingAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAddress, qModel.ShippingAddress);
                }
                if(qModel.ReceivingCompasnyID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReceivingCompasnyID, qModel.ReceivingCompasnyID);
                }
                if(!string.IsNullOrEmpty(qModel.DeliveryAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DeliveryAddress, qModel.DeliveryAddress);
                }
                if(!string.IsNullOrEmpty(qModel.ManifestNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManifestNumber, qModel.ManifestNumber);
                }
                if(qModel.DrugsCountTo==qModel.DrugsCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugsCount, qModel.DrugsCountFrom);
                }
                else if(qModel.DrugsCountTo>qModel.DrugsCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugsCount, qModel.DrugsCountFrom,qModel.DrugsCountTo);
                }//From>To不参与条件
                if(qModel.DeliveryMethodValueTo==qModel.DeliveryMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryMethodValue, qModel.DeliveryMethodValueFrom);
                }
                else if(qModel.DeliveryMethodValueTo>qModel.DeliveryMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryMethodValue, qModel.DeliveryMethodValueFrom,qModel.DeliveryMethodValueTo);
                }//From>To不参与条件
                if(qModel.TransportMethodValueTo==qModel.TransportMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TransportMethodValue, qModel.TransportMethodValueFrom);
                }
                else if(qModel.TransportMethodValueTo>qModel.TransportMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TransportMethodValue, qModel.TransportMethodValueFrom,qModel.TransportMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Principal)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Principal, qModel.Principal);
                }
                if(!string.IsNullOrEmpty(qModel.PrincipalPhone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PrincipalPhone, qModel.PrincipalPhone);
                }
                if(!string.IsNullOrEmpty(qModel.TransportCompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportCompany, qModel.TransportCompany);
                }
                if(!string.IsNullOrEmpty(qModel.VehicleInfo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.VehicleInfo, qModel.VehicleInfo);
                }
                if(qModel.VehicleID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.VehicleID, qModel.VehicleID);
                }
                if(qModel.DeliveryStatusValueTo==qModel.DeliveryStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DeliveryStatusValue, qModel.DeliveryStatusValueFrom);
                }
                else if(qModel.DeliveryStatusValueTo>qModel.DeliveryStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DeliveryStatusValue, qModel.DeliveryStatusValueFrom,qModel.DeliveryStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, qModel.Memo);
                }
                if(qModel.QueryIsOver){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOver, qModel.IsOver);
}
                if(qModel.ReservationTimeTo!=default(DateTime)&&qModel.ReservationTimeFrom!=default(DateTime)){
                if(qModel.ReservationTimeTo==qModel.ReservationTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReservationTime, qModel.ReservationTimeFrom);
                }
                else if(qModel.ReservationTimeTo>qModel.ReservationTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReservationTime, qModel.ReservationTimeFrom,qModel.ReservationTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ReservationOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReservationOperatorId, qModel.ReservationOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.ReservationNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReservationNo, qModel.ReservationNo);
                }
                if(qModel.AcceptedTimeTo!=default(DateTime)&&qModel.AcceptedTimeFrom!=default(DateTime)){
                if(qModel.AcceptedTimeTo==qModel.AcceptedTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AcceptedTime, qModel.AcceptedTimeFrom);
                }
                else if(qModel.AcceptedTimeTo>qModel.AcceptedTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AcceptedTime, qModel.AcceptedTimeFrom,qModel.AcceptedTimeTo);
                }//From>To不参与条件
                }
                if(qModel.AcceptedOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AcceptedOperatorId, qModel.AcceptedOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.AcceptedNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AcceptedNo, qModel.AcceptedNo);
                }
                if(qModel.CanceledTimeTo!=default(DateTime)&&qModel.CanceledTimeFrom!=default(DateTime)){
                if(qModel.CanceledTimeTo==qModel.CanceledTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanceledTime, qModel.CanceledTimeFrom);
                }
                else if(qModel.CanceledTimeTo>qModel.CanceledTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanceledTime, qModel.CanceledTimeFrom,qModel.CanceledTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CanceledOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CanceledOperatorId, qModel.CanceledOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.CanceledNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CanceledNo, qModel.CanceledNo);
                }
                if(qModel.outedTimeTo!=default(DateTime)&&qModel.outedTimeFrom!=default(DateTime)){
                if(qModel.outedTimeTo==qModel.outedTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.outedTime, qModel.outedTimeFrom);
                }
                else if(qModel.outedTimeTo>qModel.outedTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.outedTime, qModel.outedTimeFrom,qModel.outedTimeTo);
                }//From>To不参与条件
                }
                if(qModel.outedOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.outedOperatorId, qModel.outedOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.outedNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.outedNo, qModel.outedNo);
                }
                if(qModel.SignedTimeTo!=default(DateTime)&&qModel.SignedTimeFrom!=default(DateTime)){
                if(qModel.SignedTimeTo==qModel.SignedTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SignedTime, qModel.SignedTimeFrom);
                }
                else if(qModel.SignedTimeTo>qModel.SignedTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SignedTime, qModel.SignedTimeFrom,qModel.SignedTimeTo);
                }//From>To不参与条件
                }
                if(qModel.SignedOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SignedOperatorId, qModel.SignedOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.SignedNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SignedNo, qModel.SignedNo);
                }
                if(qModel.ReturnTimeTo!=default(DateTime)&&qModel.ReturnTimeFrom!=default(DateTime)){
                if(qModel.ReturnTimeTo==qModel.ReturnTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnTime, qModel.ReturnTimeFrom);
                }
                else if(qModel.ReturnTimeTo>qModel.ReturnTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnTime, qModel.ReturnTimeFrom,qModel.ReturnTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ReturnOperatorId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReturnOperatorId, qModel.ReturnOperatorId);
                }
                if(!string.IsNullOrEmpty(qModel.ReturnNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnNo, qModel.ReturnNo);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.OrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderID, qModel.OrderID);
                }
                if(qModel.OutInventoryID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryID, qModel.OutInventoryID);
                }
                if(qModel.OwnVehicleID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OwnVehicleID, qModel.OwnVehicleID);
                }

                return HandlerFactory.DeliveryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Delivery>>("调用配送信息业务逻辑:通过查询Model分页查询实体(配送信息)失败", ex);
            }  
		}

		#endregion 配送信息 
		   
		#region 部门

		/// <summary>
        /// 获取实体部门
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Department GetDepartment(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DepartmentBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Department>("调用部门业务逻辑:根据编号获取实体(部门)失败", ex);
            }
		} 

        /// <summary>
        /// 统计部门
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDepartment(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DepartmentBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用部门业务逻辑:统计所有(部门)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加部门
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDepartment(Department value,out string msg)
		{
			try
            {
                return HandlerFactory.DepartmentBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用部门业务逻辑:添加实体(部门)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除部门
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDepartment(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DepartmentBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用部门业务逻辑:删除实体(部门)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存部门
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDepartment(Department value, out string msg)
		{
			try
            {
                return HandlerFactory.DepartmentBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用部门业务逻辑:保存实体(部门)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录部门
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Department> AllDepartments(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DepartmentBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用部门业务逻辑:获取所有实体(部门)失败";
                return this.HandleException<List<Department>>(message, ex);
            }
		}

		 
        public List<Department> QueryDepartments(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Department>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DepartmentBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用部门业务逻辑:查询实体(部门)失败";
                return this.HandleException<List<Department>>(msg, ex);
            }
        } 
		
		 
        public List<Department> QueryPagedDepartments(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Department>();
                var queryBuilder = QueryBuilder.Create<Department>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DepartmentBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Department>>("调用部门业务逻辑:查询实体(部门)失败", ex);
            }
        } 
 
        public List<Department> SearchDepartmentsByQueryModel(QueryDepartmentModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Department>();
                var queryBuilder = QueryBuilder.Create<Department>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DepartmentId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DepartmentId, qModel.DepartmentId);
                }

                return HandlerFactory.DepartmentBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用部门业务逻辑:通查询Model查询实体(部门)失败";
                return this.HandleException<List<Department>>(message, ex);
            }  
		} 

		 
        public List<Department> SearchPagedDepartmentsByQueryModel(QueryDepartmentModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Department>();
                var queryBuilder = QueryBuilder.Create<Department>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DepartmentId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DepartmentId, qModel.DepartmentId);
                }

                return HandlerFactory.DepartmentBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Department>>("调用部门业务逻辑:通过查询Model分页查询实体(部门)失败", ex);
            }  
		}

		#endregion 部门 
		   
		#region 区域

		/// <summary>
        /// 获取实体区域
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public District GetDistrict(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DistrictBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<District>("调用区域业务逻辑:根据编号获取实体(区域)失败", ex);
            }
		} 

        /// <summary>
        /// 统计区域
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDistrict(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DistrictBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用区域业务逻辑:统计所有(区域)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加区域
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDistrict(District value,out string msg)
		{
			try
            {
                return HandlerFactory.DistrictBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用区域业务逻辑:添加实体(区域)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除区域
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDistrict(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DistrictBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用区域业务逻辑:删除实体(区域)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存区域
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDistrict(District value, out string msg)
		{
			try
            {
                return HandlerFactory.DistrictBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用区域业务逻辑:保存实体(区域)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录区域
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<District> AllDistricts(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DistrictBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用区域业务逻辑:获取所有实体(区域)失败";
                return this.HandleException<List<District>>(message, ex);
            }
		}

		 
        public List<District> QueryDistricts(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<District>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DistrictBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用区域业务逻辑:查询实体(区域)失败";
                return this.HandleException<List<District>>(msg, ex);
            }
        } 
		
		 
        public List<District> QueryPagedDistricts(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<District>();
                var queryBuilder = QueryBuilder.Create<District>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DistrictBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<District>>("调用区域业务逻辑:查询实体(区域)失败", ex);
            }
        } 
 
        public List<District> SearchDistrictsByQueryModel(QueryDistrictModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<District>();
                var queryBuilder = QueryBuilder.Create<District>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DistrictBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用区域业务逻辑:通查询Model查询实体(区域)失败";
                return this.HandleException<List<District>>(message, ex);
            }  
		} 

		 
        public List<District> SearchPagedDistrictsByQueryModel(QueryDistrictModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<District>();
                var queryBuilder = QueryBuilder.Create<District>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DistrictBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<District>>("调用区域业务逻辑:通过查询Model分页查询实体(区域)失败", ex);
            }  
		}

		#endregion 区域 
		   
		#region 疑问药品

		/// <summary>
        /// 获取实体疑问药品
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DoubtDrug GetDoubtDrug(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DoubtDrugBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DoubtDrug>("调用疑问药品业务逻辑:根据编号获取实体(疑问药品)失败", ex);
            }
		} 

        /// <summary>
        /// 统计疑问药品
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDoubtDrug(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DoubtDrugBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用疑问药品业务逻辑:统计所有(疑问药品)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加疑问药品
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDoubtDrug(DoubtDrug value,out string msg)
		{
			try
            {
                return HandlerFactory.DoubtDrugBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用疑问药品业务逻辑:添加实体(疑问药品)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除疑问药品
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDoubtDrug(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DoubtDrugBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用疑问药品业务逻辑:删除实体(疑问药品)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存疑问药品
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDoubtDrug(DoubtDrug value, out string msg)
		{
			try
            {
                return HandlerFactory.DoubtDrugBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用疑问药品业务逻辑:保存实体(疑问药品)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录疑问药品
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DoubtDrug> AllDoubtDrugs(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DoubtDrugBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用疑问药品业务逻辑:获取所有实体(疑问药品)失败";
                return this.HandleException<List<DoubtDrug>>(message, ex);
            }
		}

		 
        public List<DoubtDrug> QueryDoubtDrugs(string jsondruginventoryrecord,string decription,bool handled,bool queryhandled,string handledecription,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DoubtDrug>(); 
                if(!string.IsNullOrEmpty(jsondruginventoryrecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.JsonDrugInventoryRecord, jsondruginventoryrecord);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(queryhandled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Handled, handled);
}
                if(!string.IsNullOrEmpty(handledecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HandleDecription, handledecription);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.DoubtDrugBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用疑问药品业务逻辑:查询实体(疑问药品)失败";
                return this.HandleException<List<DoubtDrug>>(msg, ex);
            }
        } 
		
		 
        public List<DoubtDrug> QueryPagedDoubtDrugs(string jsondruginventoryrecord,string decription,bool handled,bool queryhandled,string handledecription,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DoubtDrug>();
                var queryBuilder = QueryBuilder.Create<DoubtDrug>(); 
                if(!string.IsNullOrEmpty(jsondruginventoryrecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.JsonDrugInventoryRecord, jsondruginventoryrecord);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(queryhandled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Handled, handled);
}
                if(!string.IsNullOrEmpty(handledecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HandleDecription, handledecription);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.DoubtDrugBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DoubtDrug>>("调用疑问药品业务逻辑:查询实体(疑问药品)失败", ex);
            }
        } 
 
        public List<DoubtDrug> SearchDoubtDrugsByQueryModel(QueryDoubtDrugModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DoubtDrug>();
                var queryBuilder = QueryBuilder.Create<DoubtDrug>(); 
                if(!string.IsNullOrEmpty(qModel.JsonDrugInventoryRecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.JsonDrugInventoryRecord, qModel.JsonDrugInventoryRecord);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.QueryHandled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Handled, qModel.Handled);
}
                if(!string.IsNullOrEmpty(qModel.HandleDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HandleDecription, qModel.HandleDecription);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.DrugInventoryRecordId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordId, qModel.DrugInventoryRecordId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DoubtDrugBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用疑问药品业务逻辑:通查询Model查询实体(疑问药品)失败";
                return this.HandleException<List<DoubtDrug>>(message, ex);
            }  
		} 

		 
        public List<DoubtDrug> SearchPagedDoubtDrugsByQueryModel(QueryDoubtDrugModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DoubtDrug>();
                var queryBuilder = QueryBuilder.Create<DoubtDrug>(); 
                if(!string.IsNullOrEmpty(qModel.JsonDrugInventoryRecord)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.JsonDrugInventoryRecord, qModel.JsonDrugInventoryRecord);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.QueryHandled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Handled, qModel.Handled);
}
                if(!string.IsNullOrEmpty(qModel.HandleDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.HandleDecription, qModel.HandleDecription);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.DrugInventoryRecordId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordId, qModel.DrugInventoryRecordId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DoubtDrugBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DoubtDrug>>("调用疑问药品业务逻辑:通过查询Model分页查询实体(疑问药品)失败", ex);
            }  
		}

		#endregion 疑问药品 
		   
		#region 药品批准文号

		/// <summary>
        /// 获取实体药品批准文号
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugApprovalNumber GetDrugApprovalNumber(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugApprovalNumberBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugApprovalNumber>("调用药品批准文号业务逻辑:根据编号获取实体(药品批准文号)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品批准文号
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugApprovalNumber(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugApprovalNumberBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品批准文号业务逻辑:统计所有(药品批准文号)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品批准文号
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugApprovalNumber(DrugApprovalNumber value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugApprovalNumberBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品批准文号业务逻辑:添加实体(药品批准文号)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品批准文号
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugApprovalNumber(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugApprovalNumberBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品批准文号业务逻辑:删除实体(药品批准文号)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品批准文号
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugApprovalNumber(DrugApprovalNumber value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugApprovalNumberBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品批准文号业务逻辑:保存实体(药品批准文号)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品批准文号
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugApprovalNumber> AllDrugApprovalNumbers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugApprovalNumberBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品批准文号业务逻辑:获取所有实体(药品批准文号)失败";
                return this.HandleException<List<DrugApprovalNumber>>(message, ex);
            }
		}

		 
        public List<DrugApprovalNumber> QueryDrugApprovalNumbers(string name,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugApprovalNumber>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DrugApprovalNumberBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品批准文号业务逻辑:查询实体(药品批准文号)失败";
                return this.HandleException<List<DrugApprovalNumber>>(msg, ex);
            }
        } 
		
		 
        public List<DrugApprovalNumber> QueryPagedDrugApprovalNumbers(string name,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugApprovalNumber>();
                var queryBuilder = QueryBuilder.Create<DrugApprovalNumber>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DrugApprovalNumberBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugApprovalNumber>>("调用药品批准文号业务逻辑:查询实体(药品批准文号)失败", ex);
            }
        } 
 
        public List<DrugApprovalNumber> SearchDrugApprovalNumbersByQueryModel(QueryDrugApprovalNumberModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugApprovalNumber>();
                var queryBuilder = QueryBuilder.Create<DrugApprovalNumber>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DrugApprovalNumberBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品批准文号业务逻辑:通查询Model查询实体(药品批准文号)失败";
                return this.HandleException<List<DrugApprovalNumber>>(message, ex);
            }  
		} 

		 
        public List<DrugApprovalNumber> SearchPagedDrugApprovalNumbersByQueryModel(QueryDrugApprovalNumberModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugApprovalNumber>();
                var queryBuilder = QueryBuilder.Create<DrugApprovalNumber>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DrugApprovalNumberBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugApprovalNumber>>("调用药品批准文号业务逻辑:通过查询Model分页查询实体(药品批准文号)失败", ex);
            }  
		}

		#endregion 药品批准文号 
		   
		#region 药物分类

		/// <summary>
        /// 获取实体药物分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugCategory GetDrugCategory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugCategoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugCategory>("调用药物分类业务逻辑:根据编号获取实体(药物分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药物分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugCategory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugCategoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药物分类业务逻辑:统计所有(药物分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药物分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugCategory(DrugCategory value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugCategoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物分类业务逻辑:添加实体(药物分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药物分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugCategory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugCategoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物分类业务逻辑:删除实体(药物分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药物分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugCategory(DrugCategory value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugCategoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物分类业务逻辑:保存实体(药物分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药物分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugCategory> AllDrugCategorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugCategoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药物分类业务逻辑:获取所有实体(药物分类)失败";
                return this.HandleException<List<DrugCategory>>(message, ex);
            }
		}

		 
        public List<DrugCategory> QueryDrugCategorys(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DrugCategoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药物分类业务逻辑:查询实体(药物分类)失败";
                return this.HandleException<List<DrugCategory>>(msg, ex);
            }
        } 
		
		 
        public List<DrugCategory> QueryPagedDrugCategorys(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugCategory>();
                var queryBuilder = QueryBuilder.Create<DrugCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DrugCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugCategory>>("调用药物分类业务逻辑:查询实体(药物分类)失败", ex);
            }
        } 
 
        public List<DrugCategory> SearchDrugCategorysByQueryModel(QueryDrugCategoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugCategory>();
                var queryBuilder = QueryBuilder.Create<DrugCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DrugCategoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药物分类业务逻辑:通查询Model查询实体(药物分类)失败";
                return this.HandleException<List<DrugCategory>>(message, ex);
            }  
		} 

		 
        public List<DrugCategory> SearchPagedDrugCategorysByQueryModel(QueryDrugCategoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugCategory>();
                var queryBuilder = QueryBuilder.Create<DrugCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DrugCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugCategory>>("调用药物分类业务逻辑:通过查询Model分页查询实体(药物分类)失败", ex);
            }  
		}

		#endregion 药物分类 
		   
		#region 药物临床分类

		/// <summary>
        /// 获取实体药物临床分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugClinicalCategory GetDrugClinicalCategory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugClinicalCategory>("调用药物临床分类业务逻辑:根据编号获取实体(药物临床分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药物临床分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugClinicalCategory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药物临床分类业务逻辑:统计所有(药物临床分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药物临床分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugClinicalCategory(DrugClinicalCategory value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物临床分类业务逻辑:添加实体(药物临床分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药物临床分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugClinicalCategory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物临床分类业务逻辑:删除实体(药物临床分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药物临床分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugClinicalCategory(DrugClinicalCategory value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物临床分类业务逻辑:保存实体(药物临床分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药物临床分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugClinicalCategory> AllDrugClinicalCategorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药物临床分类业务逻辑:获取所有实体(药物临床分类)失败";
                return this.HandleException<List<DrugClinicalCategory>>(message, ex);
            }
		}

		 
        public List<DrugClinicalCategory> QueryDrugClinicalCategorys(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugClinicalCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药物临床分类业务逻辑:查询实体(药物临床分类)失败";
                return this.HandleException<List<DrugClinicalCategory>>(msg, ex);
            }
        } 
		
		 
        public List<DrugClinicalCategory> QueryPagedDrugClinicalCategorys(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugClinicalCategory>();
                var queryBuilder = QueryBuilder.Create<DrugClinicalCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugClinicalCategory>>("调用药物临床分类业务逻辑:查询实体(药物临床分类)失败", ex);
            }
        } 
 
        public List<DrugClinicalCategory> SearchDrugClinicalCategorysByQueryModel(QueryDrugClinicalCategoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugClinicalCategory>();
                var queryBuilder = QueryBuilder.Create<DrugClinicalCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药物临床分类业务逻辑:通查询Model查询实体(药物临床分类)失败";
                return this.HandleException<List<DrugClinicalCategory>>(message, ex);
            }  
		} 

		 
        public List<DrugClinicalCategory> SearchPagedDrugClinicalCategorysByQueryModel(QueryDrugClinicalCategoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugClinicalCategory>();
                var queryBuilder = QueryBuilder.Create<DrugClinicalCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DrugClinicalCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugClinicalCategory>>("调用药物临床分类业务逻辑:通过查询Model分页查询实体(药物临床分类)失败", ex);
            }  
		}

		#endregion 药物临床分类 
		   
		#region 剂型

		/// <summary>
        /// 获取实体剂型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DictionaryDosage GetDictionaryDosage(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryDosageBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DictionaryDosage>("调用剂型业务逻辑:根据编号获取实体(剂型)失败", ex);
            }
		} 

        /// <summary>
        /// 统计剂型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDictionaryDosage(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryDosageBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用剂型业务逻辑:统计所有(剂型)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加剂型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDictionaryDosage(DictionaryDosage value,out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryDosageBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用剂型业务逻辑:添加实体(剂型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除剂型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDictionaryDosage(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryDosageBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用剂型业务逻辑:删除实体(剂型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存剂型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDictionaryDosage(DictionaryDosage value, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryDosageBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用剂型业务逻辑:保存实体(剂型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录剂型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DictionaryDosage> AllDictionaryDosages(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryDosageBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用剂型业务逻辑:获取所有实体(剂型)失败";
                return this.HandleException<List<DictionaryDosage>>(message, ex);
            }
		}

		 
        public List<DictionaryDosage> QueryDictionaryDosages(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DictionaryDosage>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryDosageBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用剂型业务逻辑:查询实体(剂型)失败";
                return this.HandleException<List<DictionaryDosage>>(msg, ex);
            }
        } 
		
		 
        public List<DictionaryDosage> QueryPagedDictionaryDosages(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryDosage>();
                var queryBuilder = QueryBuilder.Create<DictionaryDosage>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryDosageBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DictionaryDosage>>("调用剂型业务逻辑:查询实体(剂型)失败", ex);
            }
        } 
 
        public List<DictionaryDosage> SearchDictionaryDosagesByQueryModel(QueryDictionaryDosageModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DictionaryDosage>();
                var queryBuilder = QueryBuilder.Create<DictionaryDosage>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryDosageBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用剂型业务逻辑:通查询Model查询实体(剂型)失败";
                return this.HandleException<List<DictionaryDosage>>(message, ex);
            }  
		} 

		 
        public List<DictionaryDosage> SearchPagedDictionaryDosagesByQueryModel(QueryDictionaryDosageModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryDosage>();
                var queryBuilder = QueryBuilder.Create<DictionaryDosage>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryDosageBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DictionaryDosage>>("调用剂型业务逻辑:通过查询Model分页查询实体(剂型)失败", ex);
            }  
		}

		#endregion 剂型 
		   
		#region 药品信息

		/// <summary>
        /// 获取实体药品信息
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugInfo GetDrugInfo(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugInfoBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugInfo>("调用药品信息业务逻辑:根据编号获取实体(药品信息)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品信息
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugInfo(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugInfoBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品信息业务逻辑:统计所有(药品信息)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品信息
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugInfo(DrugInfo value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugInfoBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品信息业务逻辑:添加实体(药品信息)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品信息
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugInfo(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugInfoBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品信息业务逻辑:删除实体(药品信息)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品信息
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugInfo(DrugInfo value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugInfoBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品信息业务逻辑:保存实体(药品信息)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品信息
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugInfo> AllDrugInfos(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugInfoBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品信息业务逻辑:获取所有实体(药品信息)失败";
                return this.HandleException<List<DrugInfo>>(message, ex);
            }
		}

		 
        public List<DrugInfo> QueryDrugInfos(string permitlicensecode,DateTime permitdatefrom,DateTime permitdateto,DateTime permitoutdatefrom,DateTime permitoutdateto,string code,string description,string barcode,string standardcode,string productname,string productenglishname,string productgeneralname,string productothername,string factoryname,string factorynameabbreviation,string piecemealspecification,int piecemealnumberfrom,int piecemealnumberto,decimal pricefrom,decimal priceto,decimal nationalsalepricefrom,decimal nationalsalepriceto,decimal purchasepricefrom,decimal purchasepriceto,decimal salepricefrom,decimal salepriceto,decimal wholesalepricefrom,decimal wholesalepriceto,decimal retailpricefrom,decimal retailpriceto,decimal tagpricefrom,decimal tagpriceto,decimal lowsalepricefrom,decimal lowsalepriceto,decimal limitedlowpricefrom,decimal limitedlowpriceto,decimal limiteduppricefrom,decimal limiteduppriceto,bool ismedicalinsurance,bool queryismedicalinsurance,bool isprescription,bool queryisprescription,bool isimport,bool queryisimport,bool ismainmaintenance,bool queryismainmaintenance,bool isspecialdrugcategory,bool queryisspecialdrugcategory,string specialdrugcategorycode,int validperiodfrom,int validperiodto,string licensepermissionnumber,string performancestandards,string package,int packageamountfrom,int packageamountto,bool isapproval,bool queryisapproval,DateTime approvaldatefrom,DateTime approvaldateto,int maxinventorycountfrom,int maxinventorycountto,int mininventorycountfrom,int mininventorycountto,string origin,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool valid,bool queryvalid,string validremark,bool islock,bool queryislock,string lockremark,bool enabled,bool queryenabled,string businessscopecode,string purchasemanagecategorydetailcode,string drugcategorycode,string medicalcategorydetailcode,string drugclinicalcategorycode,string dictionaryuserdefinedtypecode,string drugstoragetypecode,string dictionarymeasurementunitcode,string dictionarydosagecode,string dictionaryspecificationcode,string dictionarypiecemealunitcode,int goodstypevaluefrom,int goodstypevalueto,int approvalstatusvaluefrom,int approvalstatusvalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugInfo>(); 
                if(!string.IsNullOrEmpty(permitlicensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PermitLicenseCode, permitlicensecode);
                }
                if(permitdateto!=default(DateTime)&&permitdatefrom!=default(DateTime)){//From==To执行==
                if(permitdateto==permitdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitDate, permitdatefrom);
                }
                else if(permitdateto>permitdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PermitDate, permitdatefrom,permitdateto);
                }}//From>To不参与条件
                if(permitoutdateto!=default(DateTime)&&permitoutdatefrom!=default(DateTime)){//From==To执行==
                if(permitoutdateto==permitoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitOutDate, permitoutdatefrom);
                }
                else if(permitoutdateto>permitoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PermitOutDate, permitoutdatefrom,permitoutdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(barcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BarCode, barcode);
                }
                if(!string.IsNullOrEmpty(standardcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.StandardCode, standardcode);
                }
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, productname);
                }
                if(!string.IsNullOrEmpty(productenglishname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductEnglishName, productenglishname);
                }
                if(!string.IsNullOrEmpty(productgeneralname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductGeneralName, productgeneralname);
                }
                if(!string.IsNullOrEmpty(productothername)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductOtherName, productothername);
                }
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(factorynameabbreviation)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameAbbreviation, factorynameabbreviation);
                }
                if(!string.IsNullOrEmpty(piecemealspecification)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PiecemealSpecification, piecemealspecification);
                }
                if(piecemealnumberto==piecemealnumberfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PiecemealNumber, piecemealnumberfrom);
                }
                else if(piecemealnumberto>piecemealnumberfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PiecemealNumber, piecemealnumberfrom,piecemealnumberto);
                }//From>To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From>To不参与条件
                if(nationalsalepriceto==nationalsalepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.NationalSalePrice, nationalsalepricefrom);
                }
                else if(nationalsalepriceto>nationalsalepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.NationalSalePrice, nationalsalepricefrom,nationalsalepriceto);
                }//From>To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From>To不参与条件
                if(salepriceto==salepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalePrice, salepricefrom);
                }
                else if(salepriceto>salepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalePrice, salepricefrom,salepriceto);
                }//From>To不参与条件
                if(wholesalepriceto==wholesalepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.WholeSalePrice, wholesalepricefrom);
                }
                else if(wholesalepriceto>wholesalepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.WholeSalePrice, wholesalepricefrom,wholesalepriceto);
                }//From>To不参与条件
                if(retailpriceto==retailpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPrice, retailpricefrom);
                }
                else if(retailpriceto>retailpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailPrice, retailpricefrom,retailpriceto);
                }//From>To不参与条件
                if(tagpriceto==tagpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.TagPrice, tagpricefrom);
                }
                else if(tagpriceto>tagpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.TagPrice, tagpricefrom,tagpriceto);
                }//From>To不参与条件
                if(lowsalepriceto==lowsalepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LowSalePrice, lowsalepricefrom);
                }
                else if(lowsalepriceto>lowsalepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LowSalePrice, lowsalepricefrom,lowsalepriceto);
                }//From>To不参与条件
                if(limitedlowpriceto==limitedlowpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedLowPrice, limitedlowpricefrom);
                }
                else if(limitedlowpriceto>limitedlowpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LimitedLowPrice, limitedlowpricefrom,limitedlowpriceto);
                }//From>To不参与条件
                if(limiteduppriceto==limiteduppricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedUpPrice, limiteduppricefrom);
                }
                else if(limiteduppriceto>limiteduppricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LimitedUpPrice, limiteduppricefrom,limiteduppriceto);
                }//From>To不参与条件
                if(queryismedicalinsurance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicalInsurance, ismedicalinsurance);
}
                if(queryisprescription){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsPrescription, isprescription);
}
                if(queryisimport){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsImport, isimport);
}
                if(queryismainmaintenance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMainMaintenance, ismainmaintenance);
}
                if(queryisspecialdrugcategory){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsSpecialDrugCategory, isspecialdrugcategory);
}
                if(!string.IsNullOrEmpty(specialdrugcategorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecialDrugCategoryCode, specialdrugcategorycode);
                }
                if(validperiodto==validperiodfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ValidPeriod, validperiodfrom);
                }
                else if(validperiodto>validperiodfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ValidPeriod, validperiodfrom,validperiodto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(licensepermissionnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, licensepermissionnumber);
                }
                if(!string.IsNullOrEmpty(performancestandards)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PerformanceStandards, performancestandards);
                }
                if(!string.IsNullOrEmpty(package)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Package, package);
                }
                if(packageamountto==packageamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PackageAmount, packageamountfrom);
                }
                else if(packageamountto>packageamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PackageAmount, packageamountfrom,packageamountto);
                }//From>To不参与条件
                if(queryisapproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, isapproval);
}
                if(approvaldateto!=default(DateTime)&&approvaldatefrom!=default(DateTime)){//From==To执行==
                if(approvaldateto==approvaldatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalDate, approvaldatefrom);
                }
                else if(approvaldateto>approvaldatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalDate, approvaldatefrom,approvaldateto);
                }}//From>To不参与条件
                if(maxinventorycountto==maxinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, maxinventorycountfrom);
                }
                else if(maxinventorycountto>maxinventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, maxinventorycountfrom,maxinventorycountto);
                }//From>To不参与条件
                if(mininventorycountto==mininventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, mininventorycountfrom);
                }
                else if(mininventorycountto>mininventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, mininventorycountfrom,mininventorycountto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(!string.IsNullOrEmpty(validremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, validremark);
                }
                if(queryislock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, islock);
}
                if(!string.IsNullOrEmpty(lockremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, lockremark);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(businessscopecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopeCode, businessscopecode);
                }
                if(!string.IsNullOrEmpty(purchasemanagecategorydetailcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseManageCategoryDetailCode, purchasemanagecategorydetailcode);
                }
                if(!string.IsNullOrEmpty(drugcategorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugCategoryCode, drugcategorycode);
                }
                if(!string.IsNullOrEmpty(medicalcategorydetailcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MedicalCategoryDetailCode, medicalcategorydetailcode);
                }
                if(!string.IsNullOrEmpty(drugclinicalcategorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugClinicalCategoryCode, drugclinicalcategorycode);
                }
                if(!string.IsNullOrEmpty(dictionaryuserdefinedtypecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryUserDefinedTypeCode, dictionaryuserdefinedtypecode);
                }
                if(!string.IsNullOrEmpty(drugstoragetypecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugStorageTypeCode, drugstoragetypecode);
                }
                if(!string.IsNullOrEmpty(dictionarymeasurementunitcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryMeasurementUnitCode, dictionarymeasurementunitcode);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(dictionaryspecificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, dictionaryspecificationcode);
                }
                if(!string.IsNullOrEmpty(dictionarypiecemealunitcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryPiecemealUnitCode, dictionarypiecemealunitcode);
                }
                if(goodstypevalueto==goodstypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GoodsTypeValue, goodstypevaluefrom);
                }
                else if(goodstypevalueto>goodstypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.GoodsTypeValue, goodstypevaluefrom,goodstypevalueto);
                }//From>To不参与条件
                if(approvalstatusvalueto==approvalstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, approvalstatusvaluefrom);
                }
                else if(approvalstatusvalueto>approvalstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, approvalstatusvaluefrom,approvalstatusvalueto);
                }//From>To不参与条件

                return HandlerFactory.DrugInfoBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品信息业务逻辑:查询实体(药品信息)失败";
                return this.HandleException<List<DrugInfo>>(msg, ex);
            }
        } 
		
		 
        public List<DrugInfo> QueryPagedDrugInfos(string permitlicensecode,DateTime permitdatefrom,DateTime permitdateto,DateTime permitoutdatefrom,DateTime permitoutdateto,string code,string description,string barcode,string standardcode,string productname,string productenglishname,string productgeneralname,string productothername,string factoryname,string factorynameabbreviation,string piecemealspecification,int piecemealnumberfrom,int piecemealnumberto,decimal pricefrom,decimal priceto,decimal nationalsalepricefrom,decimal nationalsalepriceto,decimal purchasepricefrom,decimal purchasepriceto,decimal salepricefrom,decimal salepriceto,decimal wholesalepricefrom,decimal wholesalepriceto,decimal retailpricefrom,decimal retailpriceto,decimal tagpricefrom,decimal tagpriceto,decimal lowsalepricefrom,decimal lowsalepriceto,decimal limitedlowpricefrom,decimal limitedlowpriceto,decimal limiteduppricefrom,decimal limiteduppriceto,bool ismedicalinsurance,bool queryismedicalinsurance,bool isprescription,bool queryisprescription,bool isimport,bool queryisimport,bool ismainmaintenance,bool queryismainmaintenance,bool isspecialdrugcategory,bool queryisspecialdrugcategory,string specialdrugcategorycode,int validperiodfrom,int validperiodto,string licensepermissionnumber,string performancestandards,string package,int packageamountfrom,int packageamountto,bool isapproval,bool queryisapproval,DateTime approvaldatefrom,DateTime approvaldateto,int maxinventorycountfrom,int maxinventorycountto,int mininventorycountfrom,int mininventorycountto,string origin,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool valid,bool queryvalid,string validremark,bool islock,bool queryislock,string lockremark,bool enabled,bool queryenabled,string businessscopecode,string purchasemanagecategorydetailcode,string drugcategorycode,string medicalcategorydetailcode,string drugclinicalcategorycode,string dictionaryuserdefinedtypecode,string drugstoragetypecode,string dictionarymeasurementunitcode,string dictionarydosagecode,string dictionaryspecificationcode,string dictionarypiecemealunitcode,int goodstypevaluefrom,int goodstypevalueto,int approvalstatusvaluefrom,int approvalstatusvalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugInfo>();
                var queryBuilder = QueryBuilder.Create<DrugInfo>(); 
                if(!string.IsNullOrEmpty(permitlicensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PermitLicenseCode, permitlicensecode);
                }
                if(permitdateto!=default(DateTime)&&permitdatefrom!=default(DateTime)){//From==To执行==
                if(permitdateto==permitdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitDate, permitdatefrom);
                }
                else if(permitdateto>permitdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PermitDate, permitdatefrom,permitdateto);
                }}//From<To不参与条件
                if(permitoutdateto!=default(DateTime)&&permitoutdatefrom!=default(DateTime)){//From==To执行==
                if(permitoutdateto==permitoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitOutDate, permitoutdatefrom);
                }
                else if(permitoutdateto>permitoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PermitOutDate, permitoutdatefrom,permitoutdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(barcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BarCode, barcode);
                }
                if(!string.IsNullOrEmpty(standardcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.StandardCode, standardcode);
                }
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, productname);
                }
                if(!string.IsNullOrEmpty(productenglishname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductEnglishName, productenglishname);
                }
                if(!string.IsNullOrEmpty(productgeneralname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductGeneralName, productgeneralname);
                }
                if(!string.IsNullOrEmpty(productothername)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductOtherName, productothername);
                }
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(factorynameabbreviation)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameAbbreviation, factorynameabbreviation);
                }
                if(!string.IsNullOrEmpty(piecemealspecification)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PiecemealSpecification, piecemealspecification);
                }
                if(piecemealnumberto==piecemealnumberfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PiecemealNumber, piecemealnumberfrom);
                }
                else if(piecemealnumberto>piecemealnumberfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PiecemealNumber, piecemealnumberfrom,piecemealnumberto);
                }//From<To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From<To不参与条件
                if(nationalsalepriceto==nationalsalepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.NationalSalePrice, nationalsalepricefrom);
                }
                else if(nationalsalepriceto>nationalsalepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.NationalSalePrice, nationalsalepricefrom,nationalsalepriceto);
                }//From<To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From<To不参与条件
                if(salepriceto==salepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalePrice, salepricefrom);
                }
                else if(salepriceto>salepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.SalePrice, salepricefrom,salepriceto);
                }//From<To不参与条件
                if(wholesalepriceto==wholesalepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.WholeSalePrice, wholesalepricefrom);
                }
                else if(wholesalepriceto>wholesalepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.WholeSalePrice, wholesalepricefrom,wholesalepriceto);
                }//From<To不参与条件
                if(retailpriceto==retailpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPrice, retailpricefrom);
                }
                else if(retailpriceto>retailpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailPrice, retailpricefrom,retailpriceto);
                }//From<To不参与条件
                if(tagpriceto==tagpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.TagPrice, tagpricefrom);
                }
                else if(tagpriceto>tagpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.TagPrice, tagpricefrom,tagpriceto);
                }//From<To不参与条件
                if(lowsalepriceto==lowsalepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LowSalePrice, lowsalepricefrom);
                }
                else if(lowsalepriceto>lowsalepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LowSalePrice, lowsalepricefrom,lowsalepriceto);
                }//From<To不参与条件
                if(limitedlowpriceto==limitedlowpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedLowPrice, limitedlowpricefrom);
                }
                else if(limitedlowpriceto>limitedlowpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LimitedLowPrice, limitedlowpricefrom,limitedlowpriceto);
                }//From<To不参与条件
                if(limiteduppriceto==limiteduppricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedUpPrice, limiteduppricefrom);
                }
                else if(limiteduppriceto>limiteduppricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LimitedUpPrice, limiteduppricefrom,limiteduppriceto);
                }//From<To不参与条件
                if(queryismedicalinsurance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicalInsurance, ismedicalinsurance);
}
                if(queryisprescription){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsPrescription, isprescription);
}
                if(queryisimport){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsImport, isimport);
}
                if(queryismainmaintenance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMainMaintenance, ismainmaintenance);
}
                if(queryisspecialdrugcategory){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsSpecialDrugCategory, isspecialdrugcategory);
}
                if(!string.IsNullOrEmpty(specialdrugcategorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecialDrugCategoryCode, specialdrugcategorycode);
                }
                if(validperiodto==validperiodfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ValidPeriod, validperiodfrom);
                }
                else if(validperiodto>validperiodfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ValidPeriod, validperiodfrom,validperiodto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(licensepermissionnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, licensepermissionnumber);
                }
                if(!string.IsNullOrEmpty(performancestandards)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PerformanceStandards, performancestandards);
                }
                if(!string.IsNullOrEmpty(package)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Package, package);
                }
                if(packageamountto==packageamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PackageAmount, packageamountfrom);
                }
                else if(packageamountto>packageamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PackageAmount, packageamountfrom,packageamountto);
                }//From<To不参与条件
                if(queryisapproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, isapproval);
}
                if(approvaldateto!=default(DateTime)&&approvaldatefrom!=default(DateTime)){//From==To执行==
                if(approvaldateto==approvaldatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalDate, approvaldatefrom);
                }
                else if(approvaldateto>approvaldatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ApprovalDate, approvaldatefrom,approvaldateto);
                }}//From<To不参与条件
                if(maxinventorycountto==maxinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, maxinventorycountfrom);
                }
                else if(maxinventorycountto>maxinventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, maxinventorycountfrom,maxinventorycountto);
                }//From<To不参与条件
                if(mininventorycountto==mininventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, mininventorycountfrom);
                }
                else if(mininventorycountto>mininventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, mininventorycountfrom,mininventorycountto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(!string.IsNullOrEmpty(validremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, validremark);
                }
                if(queryislock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, islock);
}
                if(!string.IsNullOrEmpty(lockremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, lockremark);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(businessscopecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopeCode, businessscopecode);
                }
                if(!string.IsNullOrEmpty(purchasemanagecategorydetailcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseManageCategoryDetailCode, purchasemanagecategorydetailcode);
                }
                if(!string.IsNullOrEmpty(drugcategorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugCategoryCode, drugcategorycode);
                }
                if(!string.IsNullOrEmpty(medicalcategorydetailcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MedicalCategoryDetailCode, medicalcategorydetailcode);
                }
                if(!string.IsNullOrEmpty(drugclinicalcategorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugClinicalCategoryCode, drugclinicalcategorycode);
                }
                if(!string.IsNullOrEmpty(dictionaryuserdefinedtypecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryUserDefinedTypeCode, dictionaryuserdefinedtypecode);
                }
                if(!string.IsNullOrEmpty(drugstoragetypecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugStorageTypeCode, drugstoragetypecode);
                }
                if(!string.IsNullOrEmpty(dictionarymeasurementunitcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryMeasurementUnitCode, dictionarymeasurementunitcode);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(dictionaryspecificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, dictionaryspecificationcode);
                }
                if(!string.IsNullOrEmpty(dictionarypiecemealunitcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryPiecemealUnitCode, dictionarypiecemealunitcode);
                }
                if(goodstypevalueto==goodstypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GoodsTypeValue, goodstypevaluefrom);
                }
                else if(goodstypevalueto>goodstypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.GoodsTypeValue, goodstypevaluefrom,goodstypevalueto);
                }//From<To不参与条件
                if(approvalstatusvalueto==approvalstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, approvalstatusvaluefrom);
                }
                else if(approvalstatusvalueto>approvalstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, approvalstatusvaluefrom,approvalstatusvalueto);
                }//From<To不参与条件

                return HandlerFactory.DrugInfoBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugInfo>>("调用药品信息业务逻辑:查询实体(药品信息)失败", ex);
            }
        } 
 
        public List<DrugInfo> SearchDrugInfosByQueryModel(QueryDrugInfoModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugInfo>();
                var queryBuilder = QueryBuilder.Create<DrugInfo>(); 
                if(!string.IsNullOrEmpty(qModel.PermitLicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PermitLicenseCode, qModel.PermitLicenseCode);
                }
                if(qModel.PermitDateTo!=default(DateTime)&&qModel.PermitDateFrom!=default(DateTime)){
                if(qModel.PermitDateTo==qModel.PermitDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitDate, qModel.PermitDateFrom);
                }
                else if(qModel.PermitDateTo>qModel.PermitDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PermitDate, qModel.PermitDateFrom,qModel.PermitDateTo);
                }//From>To不参与条件
                }
                if(qModel.PermitOutDateTo!=default(DateTime)&&qModel.PermitOutDateFrom!=default(DateTime)){
                if(qModel.PermitOutDateTo==qModel.PermitOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitOutDate, qModel.PermitOutDateFrom);
                }
                else if(qModel.PermitOutDateTo>qModel.PermitOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PermitOutDate, qModel.PermitOutDateFrom,qModel.PermitOutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.BarCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BarCode, qModel.BarCode);
                }
                if(!string.IsNullOrEmpty(qModel.StandardCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.StandardCode, qModel.StandardCode);
                }
                if(!string.IsNullOrEmpty(qModel.ProductName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, qModel.ProductName);
                }
                if(!string.IsNullOrEmpty(qModel.ProductEnglishName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductEnglishName, qModel.ProductEnglishName);
                }
                if(!string.IsNullOrEmpty(qModel.ProductGeneralName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductGeneralName, qModel.ProductGeneralName);
                }
                if(!string.IsNullOrEmpty(qModel.ProductOtherName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductOtherName, qModel.ProductOtherName);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryNameAbbreviation)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameAbbreviation, qModel.FactoryNameAbbreviation);
                }
                if(!string.IsNullOrEmpty(qModel.PiecemealSpecification)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PiecemealSpecification, qModel.PiecemealSpecification);
                }
                if(qModel.PiecemealNumberTo==qModel.PiecemealNumberFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PiecemealNumber, qModel.PiecemealNumberFrom);
                }
                else if(qModel.PiecemealNumberTo>qModel.PiecemealNumberFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PiecemealNumber, qModel.PiecemealNumberFrom,qModel.PiecemealNumberTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(qModel.NationalSalePriceTo==qModel.NationalSalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.NationalSalePrice, qModel.NationalSalePriceFrom);
                }
                else if(qModel.NationalSalePriceTo>qModel.NationalSalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.NationalSalePrice, qModel.NationalSalePriceFrom,qModel.NationalSalePriceTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.SalePriceTo==qModel.SalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalePrice, qModel.SalePriceFrom);
                }
                else if(qModel.SalePriceTo>qModel.SalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalePrice, qModel.SalePriceFrom,qModel.SalePriceTo);
                }//From>To不参与条件
                if(qModel.WholeSalePriceTo==qModel.WholeSalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.WholeSalePrice, qModel.WholeSalePriceFrom);
                }
                else if(qModel.WholeSalePriceTo>qModel.WholeSalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.WholeSalePrice, qModel.WholeSalePriceFrom,qModel.WholeSalePriceTo);
                }//From>To不参与条件
                if(qModel.RetailPriceTo==qModel.RetailPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPrice, qModel.RetailPriceFrom);
                }
                else if(qModel.RetailPriceTo>qModel.RetailPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailPrice, qModel.RetailPriceFrom,qModel.RetailPriceTo);
                }//From>To不参与条件
                if(qModel.TagPriceTo==qModel.TagPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TagPrice, qModel.TagPriceFrom);
                }
                else if(qModel.TagPriceTo>qModel.TagPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TagPrice, qModel.TagPriceFrom,qModel.TagPriceTo);
                }//From>To不参与条件
                if(qModel.LowSalePriceTo==qModel.LowSalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LowSalePrice, qModel.LowSalePriceFrom);
                }
                else if(qModel.LowSalePriceTo>qModel.LowSalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LowSalePrice, qModel.LowSalePriceFrom,qModel.LowSalePriceTo);
                }//From>To不参与条件
                if(qModel.LimitedLowPriceTo==qModel.LimitedLowPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedLowPrice, qModel.LimitedLowPriceFrom);
                }
                else if(qModel.LimitedLowPriceTo>qModel.LimitedLowPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LimitedLowPrice, qModel.LimitedLowPriceFrom,qModel.LimitedLowPriceTo);
                }//From>To不参与条件
                if(qModel.LimitedUpPriceTo==qModel.LimitedUpPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedUpPrice, qModel.LimitedUpPriceFrom);
                }
                else if(qModel.LimitedUpPriceTo>qModel.LimitedUpPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LimitedUpPrice, qModel.LimitedUpPriceFrom,qModel.LimitedUpPriceTo);
                }//From>To不参与条件
                if(qModel.QueryIsMedicalInsurance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicalInsurance, qModel.IsMedicalInsurance);
}
                if(qModel.QueryIsPrescription){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsPrescription, qModel.IsPrescription);
}
                if(qModel.QueryIsImport){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsImport, qModel.IsImport);
}
                if(qModel.QueryIsMainMaintenance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMainMaintenance, qModel.IsMainMaintenance);
}
                if(qModel.QueryIsSpecialDrugCategory){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsSpecialDrugCategory, qModel.IsSpecialDrugCategory);
}
                if(!string.IsNullOrEmpty(qModel.SpecialDrugCategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecialDrugCategoryCode, qModel.SpecialDrugCategoryCode);
                }
                if(qModel.ValidPeriodTo==qModel.ValidPeriodFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ValidPeriod, qModel.ValidPeriodFrom);
                }
                else if(qModel.ValidPeriodTo>qModel.ValidPeriodFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ValidPeriod, qModel.ValidPeriodFrom,qModel.ValidPeriodTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.LicensePermissionNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, qModel.LicensePermissionNumber);
                }
                if(!string.IsNullOrEmpty(qModel.PerformanceStandards)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PerformanceStandards, qModel.PerformanceStandards);
                }
                if(!string.IsNullOrEmpty(qModel.Package)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Package, qModel.Package);
                }
                if(qModel.PackageAmountTo==qModel.PackageAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PackageAmount, qModel.PackageAmountFrom);
                }
                else if(qModel.PackageAmountTo>qModel.PackageAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PackageAmount, qModel.PackageAmountFrom,qModel.PackageAmountTo);
                }//From>To不参与条件
                if(qModel.QueryIsApproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, qModel.IsApproval);
}
                if(qModel.ApprovalDateTo!=default(DateTime)&&qModel.ApprovalDateFrom!=default(DateTime)){
                if(qModel.ApprovalDateTo==qModel.ApprovalDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalDate, qModel.ApprovalDateFrom);
                }
                else if(qModel.ApprovalDateTo>qModel.ApprovalDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalDate, qModel.ApprovalDateFrom,qModel.ApprovalDateTo);
                }//From>To不参与条件
                }
                if(qModel.MaxInventoryCountTo==qModel.MaxInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom);
                }
                else if(qModel.MaxInventoryCountTo>qModel.MaxInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom,qModel.MaxInventoryCountTo);
                }//From>To不参与条件
                if(qModel.MinInventoryCountTo==qModel.MinInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, qModel.MinInventoryCountFrom);
                }
                else if(qModel.MinInventoryCountTo>qModel.MinInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, qModel.MinInventoryCountFrom,qModel.MinInventoryCountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(!string.IsNullOrEmpty(qModel.ValidRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, qModel.ValidRemark);
                }
                if(qModel.QueryIsLock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, qModel.IsLock);
}
                if(!string.IsNullOrEmpty(qModel.LockRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, qModel.LockRemark);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.BusinessScopeCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopeCode, qModel.BusinessScopeCode);
                }
                if(!string.IsNullOrEmpty(qModel.PurchaseManageCategoryDetailCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseManageCategoryDetailCode, qModel.PurchaseManageCategoryDetailCode);
                }
                if(!string.IsNullOrEmpty(qModel.DrugCategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugCategoryCode, qModel.DrugCategoryCode);
                }
                if(!string.IsNullOrEmpty(qModel.MedicalCategoryDetailCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MedicalCategoryDetailCode, qModel.MedicalCategoryDetailCode);
                }
                if(!string.IsNullOrEmpty(qModel.DrugClinicalCategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugClinicalCategoryCode, qModel.DrugClinicalCategoryCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryUserDefinedTypeCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryUserDefinedTypeCode, qModel.DictionaryUserDefinedTypeCode);
                }
                if(!string.IsNullOrEmpty(qModel.DrugStorageTypeCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugStorageTypeCode, qModel.DrugStorageTypeCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryMeasurementUnitCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryMeasurementUnitCode, qModel.DictionaryMeasurementUnitCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionarySpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, qModel.DictionarySpecificationCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryPiecemealUnitCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryPiecemealUnitCode, qModel.DictionaryPiecemealUnitCode);
                }
                if(qModel.FlowID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowID, qModel.FlowID);
                }
                if(qModel.GoodsTypeValueTo==qModel.GoodsTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GoodsTypeValue, qModel.GoodsTypeValueFrom);
                }
                else if(qModel.GoodsTypeValueTo>qModel.GoodsTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GoodsTypeValue, qModel.GoodsTypeValueFrom,qModel.GoodsTypeValueTo);
                }//From>To不参与条件
                if(qModel.ApprovalStatusValueTo==qModel.ApprovalStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom);
                }
                else if(qModel.ApprovalStatusValueTo>qModel.ApprovalStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom,qModel.ApprovalStatusValueTo);
                }//From>To不参与条件

                return HandlerFactory.DrugInfoBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品信息业务逻辑:通查询Model查询实体(药品信息)失败";
                return this.HandleException<List<DrugInfo>>(message, ex);
            }  
		} 

		 
        public List<DrugInfo> SearchPagedDrugInfosByQueryModel(QueryDrugInfoModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugInfo>();
                var queryBuilder = QueryBuilder.Create<DrugInfo>(); 
                if(!string.IsNullOrEmpty(qModel.PermitLicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PermitLicenseCode, qModel.PermitLicenseCode);
                }
                if(qModel.PermitDateTo!=default(DateTime)&&qModel.PermitDateFrom!=default(DateTime)){
                if(qModel.PermitDateTo==qModel.PermitDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitDate, qModel.PermitDateFrom);
                }
                else if(qModel.PermitDateTo>qModel.PermitDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PermitDate, qModel.PermitDateFrom,qModel.PermitDateTo);
                }//From>To不参与条件
                }
                if(qModel.PermitOutDateTo!=default(DateTime)&&qModel.PermitOutDateFrom!=default(DateTime)){
                if(qModel.PermitOutDateTo==qModel.PermitOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PermitOutDate, qModel.PermitOutDateFrom);
                }
                else if(qModel.PermitOutDateTo>qModel.PermitOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PermitOutDate, qModel.PermitOutDateFrom,qModel.PermitOutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.BarCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BarCode, qModel.BarCode);
                }
                if(!string.IsNullOrEmpty(qModel.StandardCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.StandardCode, qModel.StandardCode);
                }
                if(!string.IsNullOrEmpty(qModel.ProductName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, qModel.ProductName);
                }
                if(!string.IsNullOrEmpty(qModel.ProductEnglishName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductEnglishName, qModel.ProductEnglishName);
                }
                if(!string.IsNullOrEmpty(qModel.ProductGeneralName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductGeneralName, qModel.ProductGeneralName);
                }
                if(!string.IsNullOrEmpty(qModel.ProductOtherName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductOtherName, qModel.ProductOtherName);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.FactoryNameAbbreviation)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryNameAbbreviation, qModel.FactoryNameAbbreviation);
                }
                if(!string.IsNullOrEmpty(qModel.PiecemealSpecification)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PiecemealSpecification, qModel.PiecemealSpecification);
                }
                if(qModel.PiecemealNumberTo==qModel.PiecemealNumberFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PiecemealNumber, qModel.PiecemealNumberFrom);
                }
                else if(qModel.PiecemealNumberTo>qModel.PiecemealNumberFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PiecemealNumber, qModel.PiecemealNumberFrom,qModel.PiecemealNumberTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(qModel.NationalSalePriceTo==qModel.NationalSalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.NationalSalePrice, qModel.NationalSalePriceFrom);
                }
                else if(qModel.NationalSalePriceTo>qModel.NationalSalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.NationalSalePrice, qModel.NationalSalePriceFrom,qModel.NationalSalePriceTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.SalePriceTo==qModel.SalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalePrice, qModel.SalePriceFrom);
                }
                else if(qModel.SalePriceTo>qModel.SalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalePrice, qModel.SalePriceFrom,qModel.SalePriceTo);
                }//From>To不参与条件
                if(qModel.WholeSalePriceTo==qModel.WholeSalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.WholeSalePrice, qModel.WholeSalePriceFrom);
                }
                else if(qModel.WholeSalePriceTo>qModel.WholeSalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.WholeSalePrice, qModel.WholeSalePriceFrom,qModel.WholeSalePriceTo);
                }//From>To不参与条件
                if(qModel.RetailPriceTo==qModel.RetailPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPrice, qModel.RetailPriceFrom);
                }
                else if(qModel.RetailPriceTo>qModel.RetailPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailPrice, qModel.RetailPriceFrom,qModel.RetailPriceTo);
                }//From>To不参与条件
                if(qModel.TagPriceTo==qModel.TagPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TagPrice, qModel.TagPriceFrom);
                }
                else if(qModel.TagPriceTo>qModel.TagPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TagPrice, qModel.TagPriceFrom,qModel.TagPriceTo);
                }//From>To不参与条件
                if(qModel.LowSalePriceTo==qModel.LowSalePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LowSalePrice, qModel.LowSalePriceFrom);
                }
                else if(qModel.LowSalePriceTo>qModel.LowSalePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LowSalePrice, qModel.LowSalePriceFrom,qModel.LowSalePriceTo);
                }//From>To不参与条件
                if(qModel.LimitedLowPriceTo==qModel.LimitedLowPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedLowPrice, qModel.LimitedLowPriceFrom);
                }
                else if(qModel.LimitedLowPriceTo>qModel.LimitedLowPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LimitedLowPrice, qModel.LimitedLowPriceFrom,qModel.LimitedLowPriceTo);
                }//From>To不参与条件
                if(qModel.LimitedUpPriceTo==qModel.LimitedUpPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LimitedUpPrice, qModel.LimitedUpPriceFrom);
                }
                else if(qModel.LimitedUpPriceTo>qModel.LimitedUpPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LimitedUpPrice, qModel.LimitedUpPriceFrom,qModel.LimitedUpPriceTo);
                }//From>To不参与条件
                if(qModel.QueryIsMedicalInsurance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicalInsurance, qModel.IsMedicalInsurance);
}
                if(qModel.QueryIsPrescription){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsPrescription, qModel.IsPrescription);
}
                if(qModel.QueryIsImport){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsImport, qModel.IsImport);
}
                if(qModel.QueryIsMainMaintenance){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMainMaintenance, qModel.IsMainMaintenance);
}
                if(qModel.QueryIsSpecialDrugCategory){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsSpecialDrugCategory, qModel.IsSpecialDrugCategory);
}
                if(!string.IsNullOrEmpty(qModel.SpecialDrugCategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecialDrugCategoryCode, qModel.SpecialDrugCategoryCode);
                }
                if(qModel.ValidPeriodTo==qModel.ValidPeriodFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ValidPeriod, qModel.ValidPeriodFrom);
                }
                else if(qModel.ValidPeriodTo>qModel.ValidPeriodFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ValidPeriod, qModel.ValidPeriodFrom,qModel.ValidPeriodTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.LicensePermissionNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, qModel.LicensePermissionNumber);
                }
                if(!string.IsNullOrEmpty(qModel.PerformanceStandards)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PerformanceStandards, qModel.PerformanceStandards);
                }
                if(!string.IsNullOrEmpty(qModel.Package)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Package, qModel.Package);
                }
                if(qModel.PackageAmountTo==qModel.PackageAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PackageAmount, qModel.PackageAmountFrom);
                }
                else if(qModel.PackageAmountTo>qModel.PackageAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PackageAmount, qModel.PackageAmountFrom,qModel.PackageAmountTo);
                }//From>To不参与条件
                if(qModel.QueryIsApproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, qModel.IsApproval);
}
                if(qModel.ApprovalDateTo!=default(DateTime)&&qModel.ApprovalDateFrom!=default(DateTime)){
                if(qModel.ApprovalDateTo==qModel.ApprovalDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalDate, qModel.ApprovalDateFrom);
                }
                else if(qModel.ApprovalDateTo>qModel.ApprovalDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalDate, qModel.ApprovalDateFrom,qModel.ApprovalDateTo);
                }//From>To不参与条件
                }
                if(qModel.MaxInventoryCountTo==qModel.MaxInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom);
                }
                else if(qModel.MaxInventoryCountTo>qModel.MaxInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom,qModel.MaxInventoryCountTo);
                }//From>To不参与条件
                if(qModel.MinInventoryCountTo==qModel.MinInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, qModel.MinInventoryCountFrom);
                }
                else if(qModel.MinInventoryCountTo>qModel.MinInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, qModel.MinInventoryCountFrom,qModel.MinInventoryCountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(!string.IsNullOrEmpty(qModel.ValidRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, qModel.ValidRemark);
                }
                if(qModel.QueryIsLock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, qModel.IsLock);
}
                if(!string.IsNullOrEmpty(qModel.LockRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, qModel.LockRemark);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.BusinessScopeCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopeCode, qModel.BusinessScopeCode);
                }
                if(!string.IsNullOrEmpty(qModel.PurchaseManageCategoryDetailCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseManageCategoryDetailCode, qModel.PurchaseManageCategoryDetailCode);
                }
                if(!string.IsNullOrEmpty(qModel.DrugCategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugCategoryCode, qModel.DrugCategoryCode);
                }
                if(!string.IsNullOrEmpty(qModel.MedicalCategoryDetailCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MedicalCategoryDetailCode, qModel.MedicalCategoryDetailCode);
                }
                if(!string.IsNullOrEmpty(qModel.DrugClinicalCategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugClinicalCategoryCode, qModel.DrugClinicalCategoryCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryUserDefinedTypeCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryUserDefinedTypeCode, qModel.DictionaryUserDefinedTypeCode);
                }
                if(!string.IsNullOrEmpty(qModel.DrugStorageTypeCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugStorageTypeCode, qModel.DrugStorageTypeCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryMeasurementUnitCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryMeasurementUnitCode, qModel.DictionaryMeasurementUnitCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionarySpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, qModel.DictionarySpecificationCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryPiecemealUnitCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryPiecemealUnitCode, qModel.DictionaryPiecemealUnitCode);
                }
                if(qModel.FlowID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowID, qModel.FlowID);
                }
                if(qModel.GoodsTypeValueTo==qModel.GoodsTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GoodsTypeValue, qModel.GoodsTypeValueFrom);
                }
                else if(qModel.GoodsTypeValueTo>qModel.GoodsTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GoodsTypeValue, qModel.GoodsTypeValueFrom,qModel.GoodsTypeValueTo);
                }//From>To不参与条件
                if(qModel.ApprovalStatusValueTo==qModel.ApprovalStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom);
                }
                else if(qModel.ApprovalStatusValueTo>qModel.ApprovalStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom,qModel.ApprovalStatusValueTo);
                }//From>To不参与条件

                return HandlerFactory.DrugInfoBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugInfo>>("调用药品信息业务逻辑:通过查询Model分页查询实体(药品信息)失败", ex);
            }  
		}

		#endregion 药品信息 
		   
		#region 药物库存

		/// <summary>
        /// 获取实体药物库存
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugInventoryRecord GetDrugInventoryRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugInventoryRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugInventoryRecord>("调用药物库存业务逻辑:根据编号获取实体(药物库存)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药物库存
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugInventoryRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugInventoryRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药物库存业务逻辑:统计所有(药物库存)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药物库存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugInventoryRecord(DrugInventoryRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugInventoryRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物库存业务逻辑:添加实体(药物库存)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药物库存
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugInventoryRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugInventoryRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物库存业务逻辑:删除实体(药物库存)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药物库存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugInventoryRecord(DrugInventoryRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugInventoryRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物库存业务逻辑:保存实体(药物库存)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药物库存
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugInventoryRecord> AllDrugInventoryRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugInventoryRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药物库存业务逻辑:获取所有实体(药物库存)失败";
                return this.HandleException<List<DrugInventoryRecord>>(message, ex);
            }
		}

		 
        public List<DrugInventoryRecord> QueryDrugInventoryRecords(decimal purchasepriccefrom,decimal purchasepricceto,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,bool isoutvaliddate,bool queryisoutvaliddate,int ininventorycountfrom,int ininventorycountto,int salescountfrom,int salescountto,int onsalesordercountfrom,int onsalesordercountto,int currentinventorycountfrom,int currentinventorycountto,int retailcountfrom,int retailcountto,int dismantingamountfrom,int dismantingamountto,int retaildismantingamountfrom,int retaildismantingamountto,int onretailcountfrom,int onretailcountto,string decription,int cansalenumfrom,int cansalenumto,bool valid,bool queryvalid,int durginventorytypevaluefrom,int durginventorytypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugInventoryRecord>(); 
                if(purchasepricceto==purchasepriccefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePricce, purchasepriccefrom);
                }
                else if(purchasepricceto>purchasepriccefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePricce, purchasepriccefrom,purchasepricceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(queryisoutvaliddate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutValidDate, isoutvaliddate);
}
                if(ininventorycountto==ininventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.InInventoryCount, ininventorycountfrom);
                }
                else if(ininventorycountto>ininventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.InInventoryCount, ininventorycountfrom,ininventorycountto);
                }//From>To不参与条件
                if(salescountto==salescountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, salescountfrom);
                }
                else if(salescountto>salescountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesCount, salescountfrom,salescountto);
                }//From>To不参与条件
                if(onsalesordercountto==onsalesordercountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, onsalesordercountfrom);
                }
                else if(onsalesordercountto>onsalesordercountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, onsalesordercountfrom,onsalesordercountto);
                }//From>To不参与条件
                if(currentinventorycountto==currentinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, currentinventorycountfrom);
                }
                else if(currentinventorycountto>currentinventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, currentinventorycountfrom,currentinventorycountto);
                }//From>To不参与条件
                if(retailcountto==retailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, retailcountfrom);
                }
                else if(retailcountto>retailcountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCount, retailcountfrom,retailcountto);
                }//From>To不参与条件
                if(dismantingamountto==dismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, dismantingamountfrom);
                }
                else if(dismantingamountto>dismantingamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, dismantingamountfrom,dismantingamountto);
                }//From>To不参与条件
                if(retaildismantingamountto==retaildismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, retaildismantingamountfrom);
                }
                else if(retaildismantingamountto>retaildismantingamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, retaildismantingamountfrom,retaildismantingamountto);
                }//From>To不参与条件
                if(onretailcountto==onretailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, onretailcountfrom);
                }
                else if(onretailcountto>onretailcountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, onretailcountfrom,onretailcountto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(cansalenumto==cansalenumfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, cansalenumfrom);
                }
                else if(cansalenumto>cansalenumfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, cansalenumfrom,cansalenumto);
                }//From>To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(durginventorytypevalueto==durginventorytypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DurgInventoryTypeValue, durginventorytypevaluefrom);
                }
                else if(durginventorytypevalueto>durginventorytypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DurgInventoryTypeValue, durginventorytypevaluefrom,durginventorytypevalueto);
                }//From>To不参与条件

                return HandlerFactory.DrugInventoryRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药物库存业务逻辑:查询实体(药物库存)失败";
                return this.HandleException<List<DrugInventoryRecord>>(msg, ex);
            }
        } 
		
		 
        public List<DrugInventoryRecord> QueryPagedDrugInventoryRecords(decimal purchasepriccefrom,decimal purchasepricceto,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,bool isoutvaliddate,bool queryisoutvaliddate,int ininventorycountfrom,int ininventorycountto,int salescountfrom,int salescountto,int onsalesordercountfrom,int onsalesordercountto,int currentinventorycountfrom,int currentinventorycountto,int retailcountfrom,int retailcountto,int dismantingamountfrom,int dismantingamountto,int retaildismantingamountfrom,int retaildismantingamountto,int onretailcountfrom,int onretailcountto,string decription,int cansalenumfrom,int cansalenumto,bool valid,bool queryvalid,int durginventorytypevaluefrom,int durginventorytypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugInventoryRecord>();
                var queryBuilder = QueryBuilder.Create<DrugInventoryRecord>(); 
                if(purchasepricceto==purchasepriccefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePricce, purchasepriccefrom);
                }
                else if(purchasepricceto>purchasepriccefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePricce, purchasepriccefrom,purchasepricceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(queryisoutvaliddate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutValidDate, isoutvaliddate);
}
                if(ininventorycountto==ininventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.InInventoryCount, ininventorycountfrom);
                }
                else if(ininventorycountto>ininventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.InInventoryCount, ininventorycountfrom,ininventorycountto);
                }//From<To不参与条件
                if(salescountto==salescountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, salescountfrom);
                }
                else if(salescountto>salescountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.SalesCount, salescountfrom,salescountto);
                }//From<To不参与条件
                if(onsalesordercountto==onsalesordercountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, onsalesordercountfrom);
                }
                else if(onsalesordercountto>onsalesordercountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, onsalesordercountfrom,onsalesordercountto);
                }//From<To不参与条件
                if(currentinventorycountto==currentinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, currentinventorycountfrom);
                }
                else if(currentinventorycountto>currentinventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, currentinventorycountfrom,currentinventorycountto);
                }//From<To不参与条件
                if(retailcountto==retailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, retailcountfrom);
                }
                else if(retailcountto>retailcountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailCount, retailcountfrom,retailcountto);
                }//From<To不参与条件
                if(dismantingamountto==dismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, dismantingamountfrom);
                }
                else if(dismantingamountto>dismantingamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, dismantingamountfrom,dismantingamountto);
                }//From<To不参与条件
                if(retaildismantingamountto==retaildismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, retaildismantingamountfrom);
                }
                else if(retaildismantingamountto>retaildismantingamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, retaildismantingamountfrom,retaildismantingamountto);
                }//From<To不参与条件
                if(onretailcountto==onretailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, onretailcountfrom);
                }
                else if(onretailcountto>onretailcountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, onretailcountfrom,onretailcountto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(cansalenumto==cansalenumfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, cansalenumfrom);
                }
                else if(cansalenumto>cansalenumfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, cansalenumfrom,cansalenumto);
                }//From<To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(durginventorytypevalueto==durginventorytypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DurgInventoryTypeValue, durginventorytypevaluefrom);
                }
                else if(durginventorytypevalueto>durginventorytypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DurgInventoryTypeValue, durginventorytypevaluefrom,durginventorytypevalueto);
                }//From<To不参与条件

                return HandlerFactory.DrugInventoryRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugInventoryRecord>>("调用药物库存业务逻辑:查询实体(药物库存)失败", ex);
            }
        } 
 
        public List<DrugInventoryRecord> SearchDrugInventoryRecordsByQueryModel(QueryDrugInventoryRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugInventoryRecord>();
                var queryBuilder = QueryBuilder.Create<DrugInventoryRecord>(); 
                if(qModel.PurchasePricceTo==qModel.PurchasePricceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePricce, qModel.PurchasePricceFrom);
                }
                else if(qModel.PurchasePricceTo>qModel.PurchasePricceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePricce, qModel.PurchasePricceFrom,qModel.PurchasePricceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsOutValidDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutValidDate, qModel.IsOutValidDate);
}
                if(qModel.InInventoryCountTo==qModel.InInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InInventoryCount, qModel.InInventoryCountFrom);
                }
                else if(qModel.InInventoryCountTo>qModel.InInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InInventoryCount, qModel.InInventoryCountFrom,qModel.InInventoryCountTo);
                }//From>To不参与条件
                if(qModel.SalesCountTo==qModel.SalesCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, qModel.SalesCountFrom);
                }
                else if(qModel.SalesCountTo>qModel.SalesCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesCount, qModel.SalesCountFrom,qModel.SalesCountTo);
                }//From>To不参与条件
                if(qModel.OnSalesOrderCountTo==qModel.OnSalesOrderCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom);
                }
                else if(qModel.OnSalesOrderCountTo>qModel.OnSalesOrderCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom,qModel.OnSalesOrderCountTo);
                }//From>To不参与条件
                if(qModel.CurrentInventoryCountTo==qModel.CurrentInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom);
                }
                else if(qModel.CurrentInventoryCountTo>qModel.CurrentInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom,qModel.CurrentInventoryCountTo);
                }//From>To不参与条件
                if(qModel.RetailCountTo==qModel.RetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, qModel.RetailCountFrom);
                }
                else if(qModel.RetailCountTo>qModel.RetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCount, qModel.RetailCountFrom,qModel.RetailCountTo);
                }//From>To不参与条件
                if(qModel.DismantingAmountTo==qModel.DismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, qModel.DismantingAmountFrom);
                }
                else if(qModel.DismantingAmountTo>qModel.DismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, qModel.DismantingAmountFrom,qModel.DismantingAmountTo);
                }//From>To不参与条件
                if(qModel.RetailDismantingAmountTo==qModel.RetailDismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom);
                }
                else if(qModel.RetailDismantingAmountTo>qModel.RetailDismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom,qModel.RetailDismantingAmountTo);
                }//From>To不参与条件
                if(qModel.OnRetailCountTo==qModel.OnRetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, qModel.OnRetailCountFrom);
                }
                else if(qModel.OnRetailCountTo>qModel.OnRetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, qModel.OnRetailCountFrom,qModel.OnRetailCountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.CanSaleNumTo==qModel.CanSaleNumFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, qModel.CanSaleNumFrom);
                }
                else if(qModel.CanSaleNumTo>qModel.CanSaleNumFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, qModel.CanSaleNumFrom,qModel.CanSaleNumTo);
                }//From>To不参与条件
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.DurgInventoryTypeValueTo==qModel.DurgInventoryTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DurgInventoryTypeValue, qModel.DurgInventoryTypeValueFrom);
                }
                else if(qModel.DurgInventoryTypeValueTo>qModel.DurgInventoryTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DurgInventoryTypeValue, qModel.DurgInventoryTypeValueFrom,qModel.DurgInventoryTypeValueTo);
                }//From>To不参与条件
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchaseInInventeryOrderDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseInInventeryOrderDetailId, qModel.PurchaseInInventeryOrderDetailId);
                }
                if(qModel.WarehouseZoneId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.WarehouseZoneId, qModel.WarehouseZoneId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DrugInventoryRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药物库存业务逻辑:通查询Model查询实体(药物库存)失败";
                return this.HandleException<List<DrugInventoryRecord>>(message, ex);
            }  
		} 

		 
        public List<DrugInventoryRecord> SearchPagedDrugInventoryRecordsByQueryModel(QueryDrugInventoryRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugInventoryRecord>();
                var queryBuilder = QueryBuilder.Create<DrugInventoryRecord>(); 
                if(qModel.PurchasePricceTo==qModel.PurchasePricceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePricce, qModel.PurchasePricceFrom);
                }
                else if(qModel.PurchasePricceTo>qModel.PurchasePricceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePricce, qModel.PurchasePricceFrom,qModel.PurchasePricceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsOutValidDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutValidDate, qModel.IsOutValidDate);
}
                if(qModel.InInventoryCountTo==qModel.InInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InInventoryCount, qModel.InInventoryCountFrom);
                }
                else if(qModel.InInventoryCountTo>qModel.InInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InInventoryCount, qModel.InInventoryCountFrom,qModel.InInventoryCountTo);
                }//From>To不参与条件
                if(qModel.SalesCountTo==qModel.SalesCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, qModel.SalesCountFrom);
                }
                else if(qModel.SalesCountTo>qModel.SalesCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesCount, qModel.SalesCountFrom,qModel.SalesCountTo);
                }//From>To不参与条件
                if(qModel.OnSalesOrderCountTo==qModel.OnSalesOrderCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom);
                }
                else if(qModel.OnSalesOrderCountTo>qModel.OnSalesOrderCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom,qModel.OnSalesOrderCountTo);
                }//From>To不参与条件
                if(qModel.CurrentInventoryCountTo==qModel.CurrentInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom);
                }
                else if(qModel.CurrentInventoryCountTo>qModel.CurrentInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom,qModel.CurrentInventoryCountTo);
                }//From>To不参与条件
                if(qModel.RetailCountTo==qModel.RetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, qModel.RetailCountFrom);
                }
                else if(qModel.RetailCountTo>qModel.RetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCount, qModel.RetailCountFrom,qModel.RetailCountTo);
                }//From>To不参与条件
                if(qModel.DismantingAmountTo==qModel.DismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, qModel.DismantingAmountFrom);
                }
                else if(qModel.DismantingAmountTo>qModel.DismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, qModel.DismantingAmountFrom,qModel.DismantingAmountTo);
                }//From>To不参与条件
                if(qModel.RetailDismantingAmountTo==qModel.RetailDismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom);
                }
                else if(qModel.RetailDismantingAmountTo>qModel.RetailDismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom,qModel.RetailDismantingAmountTo);
                }//From>To不参与条件
                if(qModel.OnRetailCountTo==qModel.OnRetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, qModel.OnRetailCountFrom);
                }
                else if(qModel.OnRetailCountTo>qModel.OnRetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, qModel.OnRetailCountFrom,qModel.OnRetailCountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.CanSaleNumTo==qModel.CanSaleNumFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, qModel.CanSaleNumFrom);
                }
                else if(qModel.CanSaleNumTo>qModel.CanSaleNumFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, qModel.CanSaleNumFrom,qModel.CanSaleNumTo);
                }//From>To不参与条件
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.DurgInventoryTypeValueTo==qModel.DurgInventoryTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DurgInventoryTypeValue, qModel.DurgInventoryTypeValueFrom);
                }
                else if(qModel.DurgInventoryTypeValueTo>qModel.DurgInventoryTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DurgInventoryTypeValue, qModel.DurgInventoryTypeValueFrom,qModel.DurgInventoryTypeValueTo);
                }//From>To不参与条件
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchaseInInventeryOrderDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseInInventeryOrderDetailId, qModel.PurchaseInInventeryOrderDetailId);
                }
                if(qModel.WarehouseZoneId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.WarehouseZoneId, qModel.WarehouseZoneId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DrugInventoryRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugInventoryRecord>>("调用药物库存业务逻辑:通过查询Model分页查询实体(药物库存)失败", ex);
            }  
		}

		#endregion 药物库存 
		   
		#region 药品养护记录

		/// <summary>
        /// 获取实体药品养护记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugMaintainRecord GetDrugMaintainRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugMaintainRecord>("调用药品养护记录业务逻辑:根据编号获取实体(药品养护记录)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品养护记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugMaintainRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品养护记录业务逻辑:统计所有(药品养护记录)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品养护记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugMaintainRecord(DrugMaintainRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护记录业务逻辑:添加实体(药品养护记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品养护记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugMaintainRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护记录业务逻辑:删除实体(药品养护记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品养护记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugMaintainRecord(DrugMaintainRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护记录业务逻辑:保存实体(药品养护记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品养护记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugMaintainRecord> AllDrugMaintainRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品养护记录业务逻辑:获取所有实体(药品养护记录)失败";
                return this.HandleException<List<DrugMaintainRecord>>(message, ex);
            }
		}

		 
        public List<DrugMaintainRecord> QueryDrugMaintainRecords(string billdocumentno,DateTime expirationdatefrom,DateTime expirationdateto,int drugmaintaintypevaluefrom,int drugmaintaintypevalueto,int completestatefrom,int completestateto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecord>(); 
                if(!string.IsNullOrEmpty(billdocumentno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, billdocumentno);
                }
                if(expirationdateto!=default(DateTime)&&expirationdatefrom!=default(DateTime)){//From==To执行==
                if(expirationdateto==expirationdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ExpirationDate, expirationdatefrom);
                }
                else if(expirationdateto>expirationdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ExpirationDate, expirationdatefrom,expirationdateto);
                }}//From>To不参与条件
                if(drugmaintaintypevalueto==drugmaintaintypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom);
                }
                else if(drugmaintaintypevalueto>drugmaintaintypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom,drugmaintaintypevalueto);
                }//From>To不参与条件
                if(completestateto==completestatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CompleteState, completestatefrom);
                }
                else if(completestateto>completestatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CompleteState, completestatefrom,completestateto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.DrugMaintainRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品养护记录业务逻辑:查询实体(药品养护记录)失败";
                return this.HandleException<List<DrugMaintainRecord>>(msg, ex);
            }
        } 
		
		 
        public List<DrugMaintainRecord> QueryPagedDrugMaintainRecords(string billdocumentno,DateTime expirationdatefrom,DateTime expirationdateto,int drugmaintaintypevaluefrom,int drugmaintaintypevalueto,int completestatefrom,int completestateto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugMaintainRecord>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecord>(); 
                if(!string.IsNullOrEmpty(billdocumentno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, billdocumentno);
                }
                if(expirationdateto!=default(DateTime)&&expirationdatefrom!=default(DateTime)){//From==To执行==
                if(expirationdateto==expirationdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ExpirationDate, expirationdatefrom);
                }
                else if(expirationdateto>expirationdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ExpirationDate, expirationdatefrom,expirationdateto);
                }}//From<To不参与条件
                if(drugmaintaintypevalueto==drugmaintaintypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom);
                }
                else if(drugmaintaintypevalueto>drugmaintaintypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom,drugmaintaintypevalueto);
                }//From<To不参与条件
                if(completestateto==completestatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CompleteState, completestatefrom);
                }
                else if(completestateto>completestatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CompleteState, completestatefrom,completestateto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.DrugMaintainRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugMaintainRecord>>("调用药品养护记录业务逻辑:查询实体(药品养护记录)失败", ex);
            }
        } 
 
        public List<DrugMaintainRecord> SearchDrugMaintainRecordsByQueryModel(QueryDrugMaintainRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugMaintainRecord>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecord>(); 
                if(!string.IsNullOrEmpty(qModel.BillDocumentNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, qModel.BillDocumentNo);
                }
                if(qModel.ExpirationDateTo!=default(DateTime)&&qModel.ExpirationDateFrom!=default(DateTime)){
                if(qModel.ExpirationDateTo==qModel.ExpirationDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ExpirationDate, qModel.ExpirationDateFrom);
                }
                else if(qModel.ExpirationDateTo>qModel.ExpirationDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ExpirationDate, qModel.ExpirationDateFrom,qModel.ExpirationDateTo);
                }//From>To不参与条件
                }
                if(qModel.DrugMaintainTypeValueTo==qModel.DrugMaintainTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom);
                }
                else if(qModel.DrugMaintainTypeValueTo>qModel.DrugMaintainTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom,qModel.DrugMaintainTypeValueTo);
                }//From>To不参与条件
                if(qModel.CompleteStateTo==qModel.CompleteStateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CompleteState, qModel.CompleteStateFrom);
                }
                else if(qModel.CompleteStateTo>qModel.CompleteStateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CompleteState, qModel.CompleteStateFrom,qModel.CompleteStateTo);
                }//From>To不参与条件
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }

                return HandlerFactory.DrugMaintainRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品养护记录业务逻辑:通查询Model查询实体(药品养护记录)失败";
                return this.HandleException<List<DrugMaintainRecord>>(message, ex);
            }  
		} 

		 
        public List<DrugMaintainRecord> SearchPagedDrugMaintainRecordsByQueryModel(QueryDrugMaintainRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugMaintainRecord>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecord>(); 
                if(!string.IsNullOrEmpty(qModel.BillDocumentNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, qModel.BillDocumentNo);
                }
                if(qModel.ExpirationDateTo!=default(DateTime)&&qModel.ExpirationDateFrom!=default(DateTime)){
                if(qModel.ExpirationDateTo==qModel.ExpirationDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ExpirationDate, qModel.ExpirationDateFrom);
                }
                else if(qModel.ExpirationDateTo>qModel.ExpirationDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ExpirationDate, qModel.ExpirationDateFrom,qModel.ExpirationDateTo);
                }//From>To不参与条件
                }
                if(qModel.DrugMaintainTypeValueTo==qModel.DrugMaintainTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom);
                }
                else if(qModel.DrugMaintainTypeValueTo>qModel.DrugMaintainTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom,qModel.DrugMaintainTypeValueTo);
                }//From>To不参与条件
                if(qModel.CompleteStateTo==qModel.CompleteStateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CompleteState, qModel.CompleteStateFrom);
                }
                else if(qModel.CompleteStateTo>qModel.CompleteStateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CompleteState, qModel.CompleteStateFrom,qModel.CompleteStateTo);
                }//From>To不参与条件
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }

                return HandlerFactory.DrugMaintainRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugMaintainRecord>>("调用药品养护记录业务逻辑:通过查询Model分页查询实体(药品养护记录)失败", ex);
            }  
		}

		#endregion 药品养护记录 
		   
		#region 药品养护记录明细

		/// <summary>
        /// 获取实体药品养护记录明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugMaintainRecordDetail GetDrugMaintainRecordDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugMaintainRecordDetail>("调用药品养护记录明细业务逻辑:根据编号获取实体(药品养护记录明细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品养护记录明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugMaintainRecordDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品养护记录明细业务逻辑:统计所有(药品养护记录明细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品养护记录明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugMaintainRecordDetail(DrugMaintainRecordDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护记录明细业务逻辑:添加实体(药品养护记录明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品养护记录明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugMaintainRecordDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护记录明细业务逻辑:删除实体(药品养护记录明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品养护记录明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugMaintainRecordDetail(DrugMaintainRecordDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护记录明细业务逻辑:保存实体(药品养护记录明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品养护记录明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugMaintainRecordDetail> AllDrugMaintainRecordDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品养护记录明细业务逻辑:获取所有实体(药品养护记录明细)失败";
                return this.HandleException<List<DrugMaintainRecordDetail>>(message, ex);
            }
		}

		 
        public List<DrugMaintainRecordDetail> QueryDrugMaintainRecordDetails(string billdocumentno,string productname,string dictionarydosagecode,string dictionaryspecificationcode,int currentinventorycountfrom,int currentinventorycountto,int maintaincountfrom,int maintaincountto,decimal pricefrom,decimal priceto,string origin,string licensepermissionnumber,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string manufacturer,string checkqualifiednumber,string checkresult,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecordDetail>(); 
                if(!string.IsNullOrEmpty(billdocumentno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, billdocumentno);
                }
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, productname);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(dictionaryspecificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, dictionaryspecificationcode);
                }
                if(currentinventorycountto==currentinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, currentinventorycountfrom);
                }
                else if(currentinventorycountto>currentinventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, currentinventorycountfrom,currentinventorycountto);
                }//From>To不参与条件
                if(maintaincountto==maintaincountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainCount, maintaincountfrom);
                }
                else if(maintaincountto>maintaincountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaintainCount, maintaincountfrom,maintaincountto);
                }//From>To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(!string.IsNullOrEmpty(licensepermissionnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, licensepermissionnumber);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(manufacturer)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Manufacturer, manufacturer);
                }
                if(!string.IsNullOrEmpty(checkqualifiednumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckqualifiedNumber, checkqualifiednumber);
                }
                if(!string.IsNullOrEmpty(checkresult)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckResult, checkresult);
                }

                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品养护记录明细业务逻辑:查询实体(药品养护记录明细)失败";
                return this.HandleException<List<DrugMaintainRecordDetail>>(msg, ex);
            }
        } 
		
		 
        public List<DrugMaintainRecordDetail> QueryPagedDrugMaintainRecordDetails(string billdocumentno,string productname,string dictionarydosagecode,string dictionaryspecificationcode,int currentinventorycountfrom,int currentinventorycountto,int maintaincountfrom,int maintaincountto,decimal pricefrom,decimal priceto,string origin,string licensepermissionnumber,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string manufacturer,string checkqualifiednumber,string checkresult,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugMaintainRecordDetail>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecordDetail>(); 
                if(!string.IsNullOrEmpty(billdocumentno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, billdocumentno);
                }
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, productname);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(dictionaryspecificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, dictionaryspecificationcode);
                }
                if(currentinventorycountto==currentinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, currentinventorycountfrom);
                }
                else if(currentinventorycountto>currentinventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, currentinventorycountfrom,currentinventorycountto);
                }//From<To不参与条件
                if(maintaincountto==maintaincountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainCount, maintaincountfrom);
                }
                else if(maintaincountto>maintaincountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.MaintainCount, maintaincountfrom,maintaincountto);
                }//From<To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(!string.IsNullOrEmpty(licensepermissionnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, licensepermissionnumber);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(manufacturer)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Manufacturer, manufacturer);
                }
                if(!string.IsNullOrEmpty(checkqualifiednumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckqualifiedNumber, checkqualifiednumber);
                }
                if(!string.IsNullOrEmpty(checkresult)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckResult, checkresult);
                }

                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugMaintainRecordDetail>>("调用药品养护记录明细业务逻辑:查询实体(药品养护记录明细)失败", ex);
            }
        } 
 
        public List<DrugMaintainRecordDetail> SearchDrugMaintainRecordDetailsByQueryModel(QueryDrugMaintainRecordDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugMaintainRecordDetail>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecordDetail>(); 
                if(qModel.DrugInventoryRecordId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordId, qModel.DrugInventoryRecordId);
                }
                if(!string.IsNullOrEmpty(qModel.BillDocumentNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, qModel.BillDocumentNo);
                }
                if(!string.IsNullOrEmpty(qModel.ProductName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, qModel.ProductName);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionarySpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, qModel.DictionarySpecificationCode);
                }
                if(qModel.CurrentInventoryCountTo==qModel.CurrentInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom);
                }
                else if(qModel.CurrentInventoryCountTo>qModel.CurrentInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom,qModel.CurrentInventoryCountTo);
                }//From>To不参与条件
                if(qModel.MaintainCountTo==qModel.MaintainCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainCount, qModel.MaintainCountFrom);
                }
                else if(qModel.MaintainCountTo>qModel.MaintainCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaintainCount, qModel.MaintainCountFrom,qModel.MaintainCountTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(!string.IsNullOrEmpty(qModel.LicensePermissionNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, qModel.LicensePermissionNumber);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Manufacturer)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Manufacturer, qModel.Manufacturer);
                }
                if(!string.IsNullOrEmpty(qModel.CheckqualifiedNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckqualifiedNumber, qModel.CheckqualifiedNumber);
                }
                if(!string.IsNullOrEmpty(qModel.CheckResult)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckResult, qModel.CheckResult);
                }

                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品养护记录明细业务逻辑:通查询Model查询实体(药品养护记录明细)失败";
                return this.HandleException<List<DrugMaintainRecordDetail>>(message, ex);
            }  
		} 

		 
        public List<DrugMaintainRecordDetail> SearchPagedDrugMaintainRecordDetailsByQueryModel(QueryDrugMaintainRecordDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugMaintainRecordDetail>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainRecordDetail>(); 
                if(qModel.DrugInventoryRecordId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordId, qModel.DrugInventoryRecordId);
                }
                if(!string.IsNullOrEmpty(qModel.BillDocumentNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BillDocumentNo, qModel.BillDocumentNo);
                }
                if(!string.IsNullOrEmpty(qModel.ProductName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductName, qModel.ProductName);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionarySpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionarySpecificationCode, qModel.DictionarySpecificationCode);
                }
                if(qModel.CurrentInventoryCountTo==qModel.CurrentInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom);
                }
                else if(qModel.CurrentInventoryCountTo>qModel.CurrentInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom,qModel.CurrentInventoryCountTo);
                }//From>To不参与条件
                if(qModel.MaintainCountTo==qModel.MaintainCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainCount, qModel.MaintainCountFrom);
                }
                else if(qModel.MaintainCountTo>qModel.MaintainCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaintainCount, qModel.MaintainCountFrom,qModel.MaintainCountTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(!string.IsNullOrEmpty(qModel.LicensePermissionNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePermissionNumber, qModel.LicensePermissionNumber);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Manufacturer)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Manufacturer, qModel.Manufacturer);
                }
                if(!string.IsNullOrEmpty(qModel.CheckqualifiedNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckqualifiedNumber, qModel.CheckqualifiedNumber);
                }
                if(!string.IsNullOrEmpty(qModel.CheckResult)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckResult, qModel.CheckResult);
                }

                return HandlerFactory.DrugMaintainRecordDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugMaintainRecordDetail>>("调用药品养护记录明细业务逻辑:通过查询Model分页查询实体(药品养护记录明细)失败", ex);
            }  
		}

		#endregion 药品养护记录明细 
		   
		#region 计量单位

		/// <summary>
        /// 获取实体计量单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DictionaryMeasurementUnit GetDictionaryMeasurementUnit(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DictionaryMeasurementUnit>("调用计量单位业务逻辑:根据编号获取实体(计量单位)失败", ex);
            }
		} 

        /// <summary>
        /// 统计计量单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDictionaryMeasurementUnit(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用计量单位业务逻辑:统计所有(计量单位)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加计量单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDictionaryMeasurementUnit(DictionaryMeasurementUnit value,out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用计量单位业务逻辑:添加实体(计量单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除计量单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDictionaryMeasurementUnit(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用计量单位业务逻辑:删除实体(计量单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存计量单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDictionaryMeasurementUnit(DictionaryMeasurementUnit value, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用计量单位业务逻辑:保存实体(计量单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录计量单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DictionaryMeasurementUnit> AllDictionaryMeasurementUnits(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用计量单位业务逻辑:获取所有实体(计量单位)失败";
                return this.HandleException<List<DictionaryMeasurementUnit>>(message, ex);
            }
		}

		 
        public List<DictionaryMeasurementUnit> QueryDictionaryMeasurementUnits(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DictionaryMeasurementUnit>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用计量单位业务逻辑:查询实体(计量单位)失败";
                return this.HandleException<List<DictionaryMeasurementUnit>>(msg, ex);
            }
        } 
		
		 
        public List<DictionaryMeasurementUnit> QueryPagedDictionaryMeasurementUnits(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryMeasurementUnit>();
                var queryBuilder = QueryBuilder.Create<DictionaryMeasurementUnit>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DictionaryMeasurementUnit>>("调用计量单位业务逻辑:查询实体(计量单位)失败", ex);
            }
        } 
 
        public List<DictionaryMeasurementUnit> SearchDictionaryMeasurementUnitsByQueryModel(QueryDictionaryMeasurementUnitModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DictionaryMeasurementUnit>();
                var queryBuilder = QueryBuilder.Create<DictionaryMeasurementUnit>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用计量单位业务逻辑:通查询Model查询实体(计量单位)失败";
                return this.HandleException<List<DictionaryMeasurementUnit>>(message, ex);
            }  
		} 

		 
        public List<DictionaryMeasurementUnit> SearchPagedDictionaryMeasurementUnitsByQueryModel(QueryDictionaryMeasurementUnitModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryMeasurementUnit>();
                var queryBuilder = QueryBuilder.Create<DictionaryMeasurementUnit>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryMeasurementUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DictionaryMeasurementUnit>>("调用计量单位业务逻辑:通过查询Model分页查询实体(计量单位)失败", ex);
            }  
		}

		#endregion 计量单位 
		   
		#region 拆零单位

		/// <summary>
        /// 获取实体拆零单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DictionaryPiecemealUnit GetDictionaryPiecemealUnit(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DictionaryPiecemealUnit>("调用拆零单位业务逻辑:根据编号获取实体(拆零单位)失败", ex);
            }
		} 

        /// <summary>
        /// 统计拆零单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDictionaryPiecemealUnit(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用拆零单位业务逻辑:统计所有(拆零单位)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加拆零单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDictionaryPiecemealUnit(DictionaryPiecemealUnit value,out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用拆零单位业务逻辑:添加实体(拆零单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除拆零单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDictionaryPiecemealUnit(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用拆零单位业务逻辑:删除实体(拆零单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存拆零单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDictionaryPiecemealUnit(DictionaryPiecemealUnit value, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用拆零单位业务逻辑:保存实体(拆零单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录拆零单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DictionaryPiecemealUnit> AllDictionaryPiecemealUnits(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用拆零单位业务逻辑:获取所有实体(拆零单位)失败";
                return this.HandleException<List<DictionaryPiecemealUnit>>(message, ex);
            }
		}

		 
        public List<DictionaryPiecemealUnit> QueryDictionaryPiecemealUnits(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DictionaryPiecemealUnit>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用拆零单位业务逻辑:查询实体(拆零单位)失败";
                return this.HandleException<List<DictionaryPiecemealUnit>>(msg, ex);
            }
        } 
		
		 
        public List<DictionaryPiecemealUnit> QueryPagedDictionaryPiecemealUnits(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryPiecemealUnit>();
                var queryBuilder = QueryBuilder.Create<DictionaryPiecemealUnit>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DictionaryPiecemealUnit>>("调用拆零单位业务逻辑:查询实体(拆零单位)失败", ex);
            }
        } 
 
        public List<DictionaryPiecemealUnit> SearchDictionaryPiecemealUnitsByQueryModel(QueryDictionaryPiecemealUnitModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DictionaryPiecemealUnit>();
                var queryBuilder = QueryBuilder.Create<DictionaryPiecemealUnit>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用拆零单位业务逻辑:通查询Model查询实体(拆零单位)失败";
                return this.HandleException<List<DictionaryPiecemealUnit>>(message, ex);
            }  
		} 

		 
        public List<DictionaryPiecemealUnit> SearchPagedDictionaryPiecemealUnitsByQueryModel(QueryDictionaryPiecemealUnitModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryPiecemealUnit>();
                var queryBuilder = QueryBuilder.Create<DictionaryPiecemealUnit>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryPiecemealUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DictionaryPiecemealUnit>>("调用拆零单位业务逻辑:通过查询Model分页查询实体(拆零单位)失败", ex);
            }  
		}

		#endregion 拆零单位 
		   
		#region 药物规格

		/// <summary>
        /// 获取实体药物规格
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DictionarySpecification GetDictionarySpecification(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionarySpecificationBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DictionarySpecification>("调用药物规格业务逻辑:根据编号获取实体(药物规格)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药物规格
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDictionarySpecification(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionarySpecificationBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药物规格业务逻辑:统计所有(药物规格)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药物规格
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDictionarySpecification(DictionarySpecification value,out string msg)
		{
			try
            {
                return HandlerFactory.DictionarySpecificationBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物规格业务逻辑:添加实体(药物规格)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药物规格
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDictionarySpecification(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DictionarySpecificationBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物规格业务逻辑:删除实体(药物规格)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药物规格
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDictionarySpecification(DictionarySpecification value, out string msg)
		{
			try
            {
                return HandlerFactory.DictionarySpecificationBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药物规格业务逻辑:保存实体(药物规格)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药物规格
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DictionarySpecification> AllDictionarySpecifications(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionarySpecificationBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药物规格业务逻辑:获取所有实体(药物规格)失败";
                return this.HandleException<List<DictionarySpecification>>(message, ex);
            }
		}

		 
        public List<DictionarySpecification> QueryDictionarySpecifications(string name,string code,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DictionarySpecification>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }

                return HandlerFactory.DictionarySpecificationBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药物规格业务逻辑:查询实体(药物规格)失败";
                return this.HandleException<List<DictionarySpecification>>(msg, ex);
            }
        } 
		
		 
        public List<DictionarySpecification> QueryPagedDictionarySpecifications(string name,string code,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionarySpecification>();
                var queryBuilder = QueryBuilder.Create<DictionarySpecification>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }

                return HandlerFactory.DictionarySpecificationBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DictionarySpecification>>("调用药物规格业务逻辑:查询实体(药物规格)失败", ex);
            }
        } 
 
        public List<DictionarySpecification> SearchDictionarySpecificationsByQueryModel(QueryDictionarySpecificationModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DictionarySpecification>();
                var queryBuilder = QueryBuilder.Create<DictionarySpecification>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }

                return HandlerFactory.DictionarySpecificationBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药物规格业务逻辑:通查询Model查询实体(药物规格)失败";
                return this.HandleException<List<DictionarySpecification>>(message, ex);
            }  
		} 

		 
        public List<DictionarySpecification> SearchPagedDictionarySpecificationsByQueryModel(QueryDictionarySpecificationModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionarySpecification>();
                var queryBuilder = QueryBuilder.Create<DictionarySpecification>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }

                return HandlerFactory.DictionarySpecificationBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DictionarySpecification>>("调用药物规格业务逻辑:通过查询Model分页查询实体(药物规格)失败", ex);
            }  
		}

		#endregion 药物规格 
		   
		#region 储藏方式

		/// <summary>
        /// 获取实体储藏方式
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DictionaryStorageType GetDictionaryStorageType(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DictionaryStorageType>("调用储藏方式业务逻辑:根据编号获取实体(储藏方式)失败", ex);
            }
		} 

        /// <summary>
        /// 统计储藏方式
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDictionaryStorageType(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用储藏方式业务逻辑:统计所有(储藏方式)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加储藏方式
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDictionaryStorageType(DictionaryStorageType value,out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用储藏方式业务逻辑:添加实体(储藏方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除储藏方式
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDictionaryStorageType(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用储藏方式业务逻辑:删除实体(储藏方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存储藏方式
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDictionaryStorageType(DictionaryStorageType value, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用储藏方式业务逻辑:保存实体(储藏方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录储藏方式
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DictionaryStorageType> AllDictionaryStorageTypes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用储藏方式业务逻辑:获取所有实体(储藏方式)失败";
                return this.HandleException<List<DictionaryStorageType>>(message, ex);
            }
		}

		 
        public List<DictionaryStorageType> QueryDictionaryStorageTypes(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DictionaryStorageType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用储藏方式业务逻辑:查询实体(储藏方式)失败";
                return this.HandleException<List<DictionaryStorageType>>(msg, ex);
            }
        } 
		
		 
        public List<DictionaryStorageType> QueryPagedDictionaryStorageTypes(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryStorageType>();
                var queryBuilder = QueryBuilder.Create<DictionaryStorageType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DictionaryStorageType>>("调用储藏方式业务逻辑:查询实体(储藏方式)失败", ex);
            }
        } 
 
        public List<DictionaryStorageType> SearchDictionaryStorageTypesByQueryModel(QueryDictionaryStorageTypeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DictionaryStorageType>();
                var queryBuilder = QueryBuilder.Create<DictionaryStorageType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用储藏方式业务逻辑:通查询Model查询实体(储藏方式)失败";
                return this.HandleException<List<DictionaryStorageType>>(message, ex);
            }  
		} 

		 
        public List<DictionaryStorageType> SearchPagedDictionaryStorageTypesByQueryModel(QueryDictionaryStorageTypeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryStorageType>();
                var queryBuilder = QueryBuilder.Create<DictionaryStorageType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.DictionaryStorageTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DictionaryStorageType>>("调用储藏方式业务逻辑:通过查询Model分页查询实体(储藏方式)失败", ex);
            }  
		}

		#endregion 储藏方式 
		   
		#region 用户自定义药物类型

		/// <summary>
        /// 获取实体用户自定义药物类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DictionaryUserDefinedType GetDictionaryUserDefinedType(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DictionaryUserDefinedType>("调用用户自定义药物类型业务逻辑:根据编号获取实体(用户自定义药物类型)失败", ex);
            }
		} 

        /// <summary>
        /// 统计用户自定义药物类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDictionaryUserDefinedType(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用用户自定义药物类型业务逻辑:统计所有(用户自定义药物类型)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加用户自定义药物类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDictionaryUserDefinedType(DictionaryUserDefinedType value,out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用用户自定义药物类型业务逻辑:添加实体(用户自定义药物类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除用户自定义药物类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDictionaryUserDefinedType(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用用户自定义药物类型业务逻辑:删除实体(用户自定义药物类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存用户自定义药物类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDictionaryUserDefinedType(DictionaryUserDefinedType value, out string msg)
		{
			try
            {
                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用用户自定义药物类型业务逻辑:保存实体(用户自定义药物类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录用户自定义药物类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DictionaryUserDefinedType> AllDictionaryUserDefinedTypes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用用户自定义药物类型业务逻辑:获取所有实体(用户自定义药物类型)失败";
                return this.HandleException<List<DictionaryUserDefinedType>>(message, ex);
            }
		}

		 
        public List<DictionaryUserDefinedType> QueryDictionaryUserDefinedTypes(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DictionaryUserDefinedType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用用户自定义药物类型业务逻辑:查询实体(用户自定义药物类型)失败";
                return this.HandleException<List<DictionaryUserDefinedType>>(msg, ex);
            }
        } 
		
		 
        public List<DictionaryUserDefinedType> QueryPagedDictionaryUserDefinedTypes(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryUserDefinedType>();
                var queryBuilder = QueryBuilder.Create<DictionaryUserDefinedType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DictionaryUserDefinedType>>("调用用户自定义药物类型业务逻辑:查询实体(用户自定义药物类型)失败", ex);
            }
        } 
 
        public List<DictionaryUserDefinedType> SearchDictionaryUserDefinedTypesByQueryModel(QueryDictionaryUserDefinedTypeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DictionaryUserDefinedType>();
                var queryBuilder = QueryBuilder.Create<DictionaryUserDefinedType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用用户自定义药物类型业务逻辑:通查询Model查询实体(用户自定义药物类型)失败";
                return this.HandleException<List<DictionaryUserDefinedType>>(message, ex);
            }  
		} 

		 
        public List<DictionaryUserDefinedType> SearchPagedDictionaryUserDefinedTypesByQueryModel(QueryDictionaryUserDefinedTypeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DictionaryUserDefinedType>();
                var queryBuilder = QueryBuilder.Create<DictionaryUserDefinedType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.DictionaryUserDefinedTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DictionaryUserDefinedType>>("调用用户自定义药物类型业务逻辑:通过查询Model分页查询实体(用户自定义药物类型)失败", ex);
            }  
		}

		#endregion 用户自定义药物类型 
		   
		#region 授权书

		/// <summary>
        /// 获取实体授权书
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public AuthorizationDoc GetAuthorizationDoc(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.AuthorizationDocBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<AuthorizationDoc>("调用授权书业务逻辑:根据编号获取实体(授权书)失败", ex);
            }
		} 

        /// <summary>
        /// 统计授权书
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountAuthorizationDoc(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.AuthorizationDocBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用授权书业务逻辑:统计所有(授权书)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加授权书
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddAuthorizationDoc(AuthorizationDoc value,out string msg)
		{
			try
            {
                return HandlerFactory.AuthorizationDocBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用授权书业务逻辑:添加实体(授权书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除授权书
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteAuthorizationDoc(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.AuthorizationDocBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用授权书业务逻辑:删除实体(授权书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存授权书
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveAuthorizationDoc(AuthorizationDoc value, out string msg)
		{
			try
            {
                return HandlerFactory.AuthorizationDocBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用授权书业务逻辑:保存实体(授权书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录授权书
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<AuthorizationDoc> AllAuthorizationDocs(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.AuthorizationDocBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用授权书业务逻辑:获取所有实体(授权书)失败";
                return this.HandleException<List<AuthorizationDoc>>(message, ex);
            }
		}

		 
        public List<AuthorizationDoc> QueryAuthorizationDocs(string docfile,string description,DateTime outdatefrom,DateTime outdateto,bool valid,bool queryvalid,bool isoutdate,bool queryisoutdate,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<AuthorizationDoc>(); 
                if(!string.IsNullOrEmpty(docfile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocFile, docfile);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.AuthorizationDocBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用授权书业务逻辑:查询实体(授权书)失败";
                return this.HandleException<List<AuthorizationDoc>>(msg, ex);
            }
        } 
		
		 
        public List<AuthorizationDoc> QueryPagedAuthorizationDocs(string docfile,string description,DateTime outdatefrom,DateTime outdateto,bool valid,bool queryvalid,bool isoutdate,bool queryisoutdate,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<AuthorizationDoc>();
                var queryBuilder = QueryBuilder.Create<AuthorizationDoc>(); 
                if(!string.IsNullOrEmpty(docfile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocFile, docfile);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.AuthorizationDocBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<AuthorizationDoc>>("调用授权书业务逻辑:查询实体(授权书)失败", ex);
            }
        } 
 
        public List<AuthorizationDoc> SearchAuthorizationDocsByQueryModel(QueryAuthorizationDocModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<AuthorizationDoc>();
                var queryBuilder = QueryBuilder.Create<AuthorizationDoc>(); 
                if(!string.IsNullOrEmpty(qModel.DocFile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocFile, qModel.DocFile);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DistrictIdTo==qModel.DistrictIdFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DistrictId, qModel.DistrictIdFrom);
                }
                else if(qModel.DistrictIdTo>qModel.DistrictIdFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DistrictId, qModel.DistrictIdFrom,qModel.DistrictIdTo);
                }//From>To不参与条件

                return HandlerFactory.AuthorizationDocBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用授权书业务逻辑:通查询Model查询实体(授权书)失败";
                return this.HandleException<List<AuthorizationDoc>>(message, ex);
            }  
		} 

		 
        public List<AuthorizationDoc> SearchPagedAuthorizationDocsByQueryModel(QueryAuthorizationDocModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<AuthorizationDoc>();
                var queryBuilder = QueryBuilder.Create<AuthorizationDoc>(); 
                if(!string.IsNullOrEmpty(qModel.DocFile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocFile, qModel.DocFile);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DistrictIdTo==qModel.DistrictIdFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DistrictId, qModel.DistrictIdFrom);
                }
                else if(qModel.DistrictIdTo>qModel.DistrictIdFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DistrictId, qModel.DistrictIdFrom,qModel.DistrictIdTo);
                }//From>To不参与条件

                return HandlerFactory.AuthorizationDocBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<AuthorizationDoc>>("调用授权书业务逻辑:通过查询Model分页查询实体(授权书)失败", ex);
            }  
		}

		#endregion 授权书 
		   
		#region 药品养护设置

		/// <summary>
        /// 获取实体药品养护设置
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public DrugMaintainSet GetDrugMaintainSet(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainSetBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<DrugMaintainSet>("调用药品养护设置业务逻辑:根据编号获取实体(药品养护设置)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品养护设置
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountDrugMaintainSet(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainSetBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品养护设置业务逻辑:统计所有(药品养护设置)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品养护设置
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddDrugMaintainSet(DrugMaintainSet value,out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainSetBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护设置业务逻辑:添加实体(药品养护设置)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品养护设置
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteDrugMaintainSet(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainSetBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护设置业务逻辑:删除实体(药品养护设置)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品养护设置
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveDrugMaintainSet(DrugMaintainSet value, out string msg)
		{
			try
            {
                return HandlerFactory.DrugMaintainSetBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品养护设置业务逻辑:保存实体(药品养护设置)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品养护设置
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<DrugMaintainSet> AllDrugMaintainSets(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.DrugMaintainSetBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品养护设置业务逻辑:获取所有实体(药品养护设置)失败";
                return this.HandleException<List<DrugMaintainSet>>(message, ex);
            }
		}

		 
        public List<DrugMaintainSet> QueryDrugMaintainSets(int drugmaintaintypevaluefrom,int drugmaintaintypevalueto,string name,int dayfrom,int dayto,DateTime startdatefrom,DateTime startdateto,int remindbeforedayfrom,int remindbeforedayto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<DrugMaintainSet>(); 
                if(drugmaintaintypevalueto==drugmaintaintypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom);
                }
                else if(drugmaintaintypevalueto>drugmaintaintypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom,drugmaintaintypevalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(dayto==dayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Day, dayfrom);
                }
                else if(dayto>dayfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Day, dayfrom,dayto);
                }//From>To不参与条件
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(remindbeforedayto==remindbeforedayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RemindBeforeDay, remindbeforedayfrom);
                }
                else if(remindbeforedayto>remindbeforedayfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RemindBeforeDay, remindbeforedayfrom,remindbeforedayto);
                }//From>To不参与条件

                return HandlerFactory.DrugMaintainSetBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品养护设置业务逻辑:查询实体(药品养护设置)失败";
                return this.HandleException<List<DrugMaintainSet>>(msg, ex);
            }
        } 
		
		 
        public List<DrugMaintainSet> QueryPagedDrugMaintainSets(int drugmaintaintypevaluefrom,int drugmaintaintypevalueto,string name,int dayfrom,int dayto,DateTime startdatefrom,DateTime startdateto,int remindbeforedayfrom,int remindbeforedayto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugMaintainSet>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainSet>(); 
                if(drugmaintaintypevalueto==drugmaintaintypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom);
                }
                else if(drugmaintaintypevalueto>drugmaintaintypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, drugmaintaintypevaluefrom,drugmaintaintypevalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(dayto==dayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Day, dayfrom);
                }
                else if(dayto>dayfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Day, dayfrom,dayto);
                }//From<To不参与条件
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(remindbeforedayto==remindbeforedayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RemindBeforeDay, remindbeforedayfrom);
                }
                else if(remindbeforedayto>remindbeforedayfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RemindBeforeDay, remindbeforedayfrom,remindbeforedayto);
                }//From<To不参与条件

                return HandlerFactory.DrugMaintainSetBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<DrugMaintainSet>>("调用药品养护设置业务逻辑:查询实体(药品养护设置)失败", ex);
            }
        } 
 
        public List<DrugMaintainSet> SearchDrugMaintainSetsByQueryModel(QueryDrugMaintainSetModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<DrugMaintainSet>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainSet>(); 
                if(qModel.DrugMaintainTypeValueTo==qModel.DrugMaintainTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom);
                }
                else if(qModel.DrugMaintainTypeValueTo>qModel.DrugMaintainTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom,qModel.DrugMaintainTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.DayTo==qModel.DayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Day, qModel.DayFrom);
                }
                else if(qModel.DayTo>qModel.DayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Day, qModel.DayFrom,qModel.DayTo);
                }//From>To不参与条件
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.RemindBeforeDayTo==qModel.RemindBeforeDayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RemindBeforeDay, qModel.RemindBeforeDayFrom);
                }
                else if(qModel.RemindBeforeDayTo>qModel.RemindBeforeDayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RemindBeforeDay, qModel.RemindBeforeDayFrom,qModel.RemindBeforeDayTo);
                }//From>To不参与条件

                return HandlerFactory.DrugMaintainSetBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品养护设置业务逻辑:通查询Model查询实体(药品养护设置)失败";
                return this.HandleException<List<DrugMaintainSet>>(message, ex);
            }  
		} 

		 
        public List<DrugMaintainSet> SearchPagedDrugMaintainSetsByQueryModel(QueryDrugMaintainSetModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<DrugMaintainSet>();
                var queryBuilder = QueryBuilder.Create<DrugMaintainSet>(); 
                if(qModel.DrugMaintainTypeValueTo==qModel.DrugMaintainTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom);
                }
                else if(qModel.DrugMaintainTypeValueTo>qModel.DrugMaintainTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DrugMaintainTypeValue, qModel.DrugMaintainTypeValueFrom,qModel.DrugMaintainTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.DayTo==qModel.DayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Day, qModel.DayFrom);
                }
                else if(qModel.DayTo>qModel.DayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Day, qModel.DayFrom,qModel.DayTo);
                }//From>To不参与条件
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.RemindBeforeDayTo==qModel.RemindBeforeDayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RemindBeforeDay, qModel.RemindBeforeDayFrom);
                }
                else if(qModel.RemindBeforeDayTo>qModel.RemindBeforeDayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RemindBeforeDay, qModel.RemindBeforeDayFrom,qModel.RemindBeforeDayTo);
                }//From>To不参与条件

                return HandlerFactory.DrugMaintainSetBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<DrugMaintainSet>>("调用药品养护设置业务逻辑:通过查询Model分页查询实体(药品养护设置)失败", ex);
            }  
		}

		#endregion 药品养护设置 
		   
		#region 员工

		/// <summary>
        /// 获取实体员工
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Employee GetEmployee(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.EmployeeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Employee>("调用员工业务逻辑:根据编号获取实体(员工)失败", ex);
            }
		} 

        /// <summary>
        /// 统计员工
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountEmployee(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.EmployeeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用员工业务逻辑:统计所有(员工)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加员工
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddEmployee(Employee value,out string msg)
		{
			try
            {
                return HandlerFactory.EmployeeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用员工业务逻辑:添加实体(员工)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除员工
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteEmployee(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.EmployeeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用员工业务逻辑:删除实体(员工)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存员工
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveEmployee(Employee value, out string msg)
		{
			try
            {
                return HandlerFactory.EmployeeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用员工业务逻辑:保存实体(员工)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录员工
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Employee> AllEmployees(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.EmployeeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用员工业务逻辑:获取所有实体(员工)失败";
                return this.HandleException<List<Employee>>(message, ex);
            }
		}

		 
        public List<Employee> QueryEmployees(DateTime outdatefrom,DateTime outdateto,string number,string name,string pinyin,string gender,string identityno,string phone,string email,string address,string rank,string education,string duty,string specility,int employstatusvaluefrom,int employstatusvalueto,bool enabled,bool queryenabled,int pharmaciststitletypevaluefrom,int pharmaciststitletypevalueto,string cardno,int pharmacistsqualificationvaluefrom,int pharmacistsqualificationvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Employee>(); 
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(number)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Number, number);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(pinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pinyin, pinyin);
                }
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(!string.IsNullOrEmpty(identityno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IdentityNo, identityno);
                }
                if(!string.IsNullOrEmpty(phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, phone);
                }
                if(!string.IsNullOrEmpty(email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, email);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(rank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rank, rank);
                }
                if(!string.IsNullOrEmpty(education)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Education, education);
                }
                if(!string.IsNullOrEmpty(duty)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Duty, duty);
                }
                if(!string.IsNullOrEmpty(specility)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Specility, specility);
                }
                if(employstatusvalueto==employstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.EmployStatusValue, employstatusvaluefrom);
                }
                else if(employstatusvalueto>employstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.EmployStatusValue, employstatusvaluefrom,employstatusvalueto);
                }//From>To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(pharmaciststitletypevalueto==pharmaciststitletypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsTitleTypeValue, pharmaciststitletypevaluefrom);
                }
                else if(pharmaciststitletypevalueto>pharmaciststitletypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PharmacistsTitleTypeValue, pharmaciststitletypevaluefrom,pharmaciststitletypevalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(cardno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CardNo, cardno);
                }
                if(pharmacistsqualificationvalueto==pharmacistsqualificationvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsQualificationValue, pharmacistsqualificationvaluefrom);
                }
                else if(pharmacistsqualificationvalueto>pharmacistsqualificationvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PharmacistsQualificationValue, pharmacistsqualificationvaluefrom,pharmacistsqualificationvalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.EmployeeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用员工业务逻辑:查询实体(员工)失败";
                return this.HandleException<List<Employee>>(msg, ex);
            }
        } 
		
		 
        public List<Employee> QueryPagedEmployees(DateTime outdatefrom,DateTime outdateto,string number,string name,string pinyin,string gender,string identityno,string phone,string email,string address,string rank,string education,string duty,string specility,int employstatusvaluefrom,int employstatusvalueto,bool enabled,bool queryenabled,int pharmaciststitletypevaluefrom,int pharmaciststitletypevalueto,string cardno,int pharmacistsqualificationvaluefrom,int pharmacistsqualificationvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Employee>();
                var queryBuilder = QueryBuilder.Create<Employee>(); 
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(number)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Number, number);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(pinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pinyin, pinyin);
                }
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(!string.IsNullOrEmpty(identityno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IdentityNo, identityno);
                }
                if(!string.IsNullOrEmpty(phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, phone);
                }
                if(!string.IsNullOrEmpty(email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, email);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(rank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rank, rank);
                }
                if(!string.IsNullOrEmpty(education)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Education, education);
                }
                if(!string.IsNullOrEmpty(duty)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Duty, duty);
                }
                if(!string.IsNullOrEmpty(specility)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Specility, specility);
                }
                if(employstatusvalueto==employstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.EmployStatusValue, employstatusvaluefrom);
                }
                else if(employstatusvalueto>employstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.EmployStatusValue, employstatusvaluefrom,employstatusvalueto);
                }//From<To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(pharmaciststitletypevalueto==pharmaciststitletypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsTitleTypeValue, pharmaciststitletypevaluefrom);
                }
                else if(pharmaciststitletypevalueto>pharmaciststitletypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PharmacistsTitleTypeValue, pharmaciststitletypevaluefrom,pharmaciststitletypevalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(cardno)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CardNo, cardno);
                }
                if(pharmacistsqualificationvalueto==pharmacistsqualificationvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsQualificationValue, pharmacistsqualificationvaluefrom);
                }
                else if(pharmacistsqualificationvalueto>pharmacistsqualificationvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PharmacistsQualificationValue, pharmacistsqualificationvaluefrom,pharmacistsqualificationvalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.EmployeeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Employee>>("调用员工业务逻辑:查询实体(员工)失败", ex);
            }
        } 
 
        public List<Employee> SearchEmployeesByQueryModel(QueryEmployeeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Employee>();
                var queryBuilder = QueryBuilder.Create<Employee>(); 
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Number)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Number, qModel.Number);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Pinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pinyin, qModel.Pinyin);
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(!string.IsNullOrEmpty(qModel.Phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, qModel.Phone);
                }
                if(!string.IsNullOrEmpty(qModel.Email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, qModel.Email);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.Rank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rank, qModel.Rank);
                }
                if(!string.IsNullOrEmpty(qModel.Education)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Education, qModel.Education);
                }
                if(!string.IsNullOrEmpty(qModel.Duty)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Duty, qModel.Duty);
                }
                if(!string.IsNullOrEmpty(qModel.Specility)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Specility, qModel.Specility);
                }
                if(qModel.EmployStatusValueTo==qModel.EmployStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.EmployStatusValue, qModel.EmployStatusValueFrom);
                }
                else if(qModel.EmployStatusValueTo>qModel.EmployStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.EmployStatusValue, qModel.EmployStatusValueFrom,qModel.EmployStatusValueTo);
                }//From>To不参与条件
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.PharmacistsTitleTypeValueTo==qModel.PharmacistsTitleTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsTitleTypeValue, qModel.PharmacistsTitleTypeValueFrom);
                }
                else if(qModel.PharmacistsTitleTypeValueTo>qModel.PharmacistsTitleTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PharmacistsTitleTypeValue, qModel.PharmacistsTitleTypeValueFrom,qModel.PharmacistsTitleTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.CardNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CardNo, qModel.CardNo);
                }
                if(qModel.PharmacistsQualificationValueTo==qModel.PharmacistsQualificationValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsQualificationValue, qModel.PharmacistsQualificationValueFrom);
                }
                else if(qModel.PharmacistsQualificationValueTo>qModel.PharmacistsQualificationValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PharmacistsQualificationValue, qModel.PharmacistsQualificationValueFrom,qModel.PharmacistsQualificationValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DepartmentId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DepartmentId, qModel.DepartmentId);
                }

                return HandlerFactory.EmployeeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用员工业务逻辑:通查询Model查询实体(员工)失败";
                return this.HandleException<List<Employee>>(message, ex);
            }  
		} 

		 
        public List<Employee> SearchPagedEmployeesByQueryModel(QueryEmployeeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Employee>();
                var queryBuilder = QueryBuilder.Create<Employee>(); 
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Number)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Number, qModel.Number);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Pinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pinyin, qModel.Pinyin);
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(!string.IsNullOrEmpty(qModel.Phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, qModel.Phone);
                }
                if(!string.IsNullOrEmpty(qModel.Email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, qModel.Email);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.Rank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rank, qModel.Rank);
                }
                if(!string.IsNullOrEmpty(qModel.Education)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Education, qModel.Education);
                }
                if(!string.IsNullOrEmpty(qModel.Duty)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Duty, qModel.Duty);
                }
                if(!string.IsNullOrEmpty(qModel.Specility)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Specility, qModel.Specility);
                }
                if(qModel.EmployStatusValueTo==qModel.EmployStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.EmployStatusValue, qModel.EmployStatusValueFrom);
                }
                else if(qModel.EmployStatusValueTo>qModel.EmployStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.EmployStatusValue, qModel.EmployStatusValueFrom,qModel.EmployStatusValueTo);
                }//From>To不参与条件
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.PharmacistsTitleTypeValueTo==qModel.PharmacistsTitleTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsTitleTypeValue, qModel.PharmacistsTitleTypeValueFrom);
                }
                else if(qModel.PharmacistsTitleTypeValueTo>qModel.PharmacistsTitleTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PharmacistsTitleTypeValue, qModel.PharmacistsTitleTypeValueFrom,qModel.PharmacistsTitleTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.CardNo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CardNo, qModel.CardNo);
                }
                if(qModel.PharmacistsQualificationValueTo==qModel.PharmacistsQualificationValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PharmacistsQualificationValue, qModel.PharmacistsQualificationValueFrom);
                }
                else if(qModel.PharmacistsQualificationValueTo>qModel.PharmacistsQualificationValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PharmacistsQualificationValue, qModel.PharmacistsQualificationValueFrom,qModel.PharmacistsQualificationValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DepartmentId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DepartmentId, qModel.DepartmentId);
                }

                return HandlerFactory.EmployeeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Employee>>("调用员工业务逻辑:通过查询Model分页查询实体(员工)失败", ex);
            }  
		}

		#endregion 员工 
		   
		#region GMSP证书规定的经营范围

		/// <summary>
        /// 获取实体GMSP证书规定的经营范围
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public GMSPLicenseBusinessScope GetGMSPLicenseBusinessScope(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<GMSPLicenseBusinessScope>("调用GMSP证书规定的经营范围业务逻辑:根据编号获取实体(GMSP证书规定的经营范围)失败", ex);
            }
		} 

        /// <summary>
        /// 统计GMSP证书规定的经营范围
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountGMSPLicenseBusinessScope(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用GMSP证书规定的经营范围业务逻辑:统计所有(GMSP证书规定的经营范围)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加GMSP证书规定的经营范围
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddGMSPLicenseBusinessScope(GMSPLicenseBusinessScope value,out string msg)
		{
			try
            {
                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GMSP证书规定的经营范围业务逻辑:添加实体(GMSP证书规定的经营范围)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除GMSP证书规定的经营范围
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteGMSPLicenseBusinessScope(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GMSP证书规定的经营范围业务逻辑:删除实体(GMSP证书规定的经营范围)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存GMSP证书规定的经营范围
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveGMSPLicenseBusinessScope(GMSPLicenseBusinessScope value, out string msg)
		{
			try
            {
                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GMSP证书规定的经营范围业务逻辑:保存实体(GMSP证书规定的经营范围)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录GMSP证书规定的经营范围
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<GMSPLicenseBusinessScope> AllGMSPLicenseBusinessScopes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用GMSP证书规定的经营范围业务逻辑:获取所有实体(GMSP证书规定的经营范围)失败";
                return this.HandleException<List<GMSPLicenseBusinessScope>>(message, ex);
            }
		}

		 
        public List<GMSPLicenseBusinessScope> QueryGMSPLicenseBusinessScopes(out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<GMSPLicenseBusinessScope>(); 

                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用GMSP证书规定的经营范围业务逻辑:查询实体(GMSP证书规定的经营范围)失败";
                return this.HandleException<List<GMSPLicenseBusinessScope>>(msg, ex);
            }
        } 
		
		 
        public List<GMSPLicenseBusinessScope> QueryPagedGMSPLicenseBusinessScopes(int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GMSPLicenseBusinessScope>();
                var queryBuilder = QueryBuilder.Create<GMSPLicenseBusinessScope>(); 

                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<GMSPLicenseBusinessScope>>("调用GMSP证书规定的经营范围业务逻辑:查询实体(GMSP证书规定的经营范围)失败", ex);
            }
        } 
 
        public List<GMSPLicenseBusinessScope> SearchGMSPLicenseBusinessScopesByQueryModel(QueryGMSPLicenseBusinessScopeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<GMSPLicenseBusinessScope>();
                var queryBuilder = QueryBuilder.Create<GMSPLicenseBusinessScope>(); 
                if(qModel.LicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.LicenseId, qModel.LicenseId);
                }
                if(qModel.BusinessScopeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessScopeId, qModel.BusinessScopeId);
                }
                if(qModel.GSPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GSPLicenseId, qModel.GSPLicenseId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用GMSP证书规定的经营范围业务逻辑:通查询Model查询实体(GMSP证书规定的经营范围)失败";
                return this.HandleException<List<GMSPLicenseBusinessScope>>(message, ex);
            }  
		} 

		 
        public List<GMSPLicenseBusinessScope> SearchPagedGMSPLicenseBusinessScopesByQueryModel(QueryGMSPLicenseBusinessScopeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GMSPLicenseBusinessScope>();
                var queryBuilder = QueryBuilder.Create<GMSPLicenseBusinessScope>(); 
                if(qModel.LicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.LicenseId, qModel.LicenseId);
                }
                if(qModel.BusinessScopeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessScopeId, qModel.BusinessScopeId);
                }
                if(qModel.GSPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GSPLicenseId, qModel.GSPLicenseId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.GMSPLicenseBusinessScopeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<GMSPLicenseBusinessScope>>("调用GMSP证书规定的经营范围业务逻辑:通过查询Model分页查询实体(GMSP证书规定的经营范围)失败", ex);
            }  
		}

		#endregion GMSP证书规定的经营范围 
		   
		#region 库存

		/// <summary>
        /// 获取实体库存
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public InventoryRecord GetInventoryRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InventoryRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<InventoryRecord>("调用库存业务逻辑:根据编号获取实体(库存)失败", ex);
            }
		} 

        /// <summary>
        /// 统计库存
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountInventoryRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InventoryRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用库存业务逻辑:统计所有(库存)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加库存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddInventoryRecord(InventoryRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.InventoryRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存业务逻辑:添加实体(库存)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除库存
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteInventoryRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.InventoryRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存业务逻辑:删除实体(库存)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存库存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveInventoryRecord(InventoryRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.InventoryRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存业务逻辑:保存实体(库存)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录库存
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<InventoryRecord> AllInventoryRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InventoryRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用库存业务逻辑:获取所有实体(库存)失败";
                return this.HandleException<List<InventoryRecord>>(message, ex);
            }
		}

		 
        public List<InventoryRecord> QueryInventoryRecords(int maxinventorycountfrom,int maxinventorycountto,int mininventorycountfrom,int mininventorycountto,int currentinventorycountfrom,int currentinventorycountto,int salescountfrom,int salescountto,int onsalesordercountfrom,int onsalesordercountto,int retailcountfrom,int retailcountto,int onretailcountfrom,int onretailcountto,int dismantingamountfrom,int dismantingamountto,int retaildismantingamountfrom,int retaildismantingamountto,string druginfocode,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<InventoryRecord>(); 
                if(maxinventorycountto==maxinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, maxinventorycountfrom);
                }
                else if(maxinventorycountto>maxinventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, maxinventorycountfrom,maxinventorycountto);
                }//From>To不参与条件
                if(mininventorycountto==mininventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, mininventorycountfrom);
                }
                else if(mininventorycountto>mininventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, mininventorycountfrom,mininventorycountto);
                }//From>To不参与条件
                if(currentinventorycountto==currentinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, currentinventorycountfrom);
                }
                else if(currentinventorycountto>currentinventorycountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, currentinventorycountfrom,currentinventorycountto);
                }//From>To不参与条件
                if(salescountto==salescountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, salescountfrom);
                }
                else if(salescountto>salescountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesCount, salescountfrom,salescountto);
                }//From>To不参与条件
                if(onsalesordercountto==onsalesordercountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, onsalesordercountfrom);
                }
                else if(onsalesordercountto>onsalesordercountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, onsalesordercountfrom,onsalesordercountto);
                }//From>To不参与条件
                if(retailcountto==retailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, retailcountfrom);
                }
                else if(retailcountto>retailcountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCount, retailcountfrom,retailcountto);
                }//From>To不参与条件
                if(onretailcountto==onretailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, onretailcountfrom);
                }
                else if(onretailcountto>onretailcountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, onretailcountfrom,onretailcountto);
                }//From>To不参与条件
                if(dismantingamountto==dismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, dismantingamountfrom);
                }
                else if(dismantingamountto>dismantingamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, dismantingamountfrom,dismantingamountto);
                }//From>To不参与条件
                if(retaildismantingamountto==retaildismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, retaildismantingamountfrom);
                }
                else if(retaildismantingamountto>retaildismantingamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, retaildismantingamountfrom,retaildismantingamountto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(druginfocode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugInfoCode, druginfocode);
                }

                return HandlerFactory.InventoryRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用库存业务逻辑:查询实体(库存)失败";
                return this.HandleException<List<InventoryRecord>>(msg, ex);
            }
        } 
		
		 
        public List<InventoryRecord> QueryPagedInventoryRecords(int maxinventorycountfrom,int maxinventorycountto,int mininventorycountfrom,int mininventorycountto,int currentinventorycountfrom,int currentinventorycountto,int salescountfrom,int salescountto,int onsalesordercountfrom,int onsalesordercountto,int retailcountfrom,int retailcountto,int onretailcountfrom,int onretailcountto,int dismantingamountfrom,int dismantingamountto,int retaildismantingamountfrom,int retaildismantingamountto,string druginfocode,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<InventoryRecord>();
                var queryBuilder = QueryBuilder.Create<InventoryRecord>(); 
                if(maxinventorycountto==maxinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, maxinventorycountfrom);
                }
                else if(maxinventorycountto>maxinventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, maxinventorycountfrom,maxinventorycountto);
                }//From<To不参与条件
                if(mininventorycountto==mininventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, mininventorycountfrom);
                }
                else if(mininventorycountto>mininventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, mininventorycountfrom,mininventorycountto);
                }//From<To不参与条件
                if(currentinventorycountto==currentinventorycountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, currentinventorycountfrom);
                }
                else if(currentinventorycountto>currentinventorycountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, currentinventorycountfrom,currentinventorycountto);
                }//From<To不参与条件
                if(salescountto==salescountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, salescountfrom);
                }
                else if(salescountto>salescountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.SalesCount, salescountfrom,salescountto);
                }//From<To不参与条件
                if(onsalesordercountto==onsalesordercountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, onsalesordercountfrom);
                }
                else if(onsalesordercountto>onsalesordercountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, onsalesordercountfrom,onsalesordercountto);
                }//From<To不参与条件
                if(retailcountto==retailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, retailcountfrom);
                }
                else if(retailcountto>retailcountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailCount, retailcountfrom,retailcountto);
                }//From<To不参与条件
                if(onretailcountto==onretailcountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, onretailcountfrom);
                }
                else if(onretailcountto>onretailcountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, onretailcountfrom,onretailcountto);
                }//From<To不参与条件
                if(dismantingamountto==dismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, dismantingamountfrom);
                }
                else if(dismantingamountto>dismantingamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, dismantingamountfrom,dismantingamountto);
                }//From<To不参与条件
                if(retaildismantingamountto==retaildismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, retaildismantingamountfrom);
                }
                else if(retaildismantingamountto>retaildismantingamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, retaildismantingamountfrom,retaildismantingamountto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(druginfocode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugInfoCode, druginfocode);
                }

                return HandlerFactory.InventoryRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<InventoryRecord>>("调用库存业务逻辑:查询实体(库存)失败", ex);
            }
        } 
 
        public List<InventoryRecord> SearchInventoryRecordsByQueryModel(QueryInventoryRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<InventoryRecord>();
                var queryBuilder = QueryBuilder.Create<InventoryRecord>(); 
                if(qModel.MaxInventoryCountTo==qModel.MaxInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom);
                }
                else if(qModel.MaxInventoryCountTo>qModel.MaxInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom,qModel.MaxInventoryCountTo);
                }//From>To不参与条件
                if(qModel.MinInventoryCountTo==qModel.MinInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, qModel.MinInventoryCountFrom);
                }
                else if(qModel.MinInventoryCountTo>qModel.MinInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, qModel.MinInventoryCountFrom,qModel.MinInventoryCountTo);
                }//From>To不参与条件
                if(qModel.CurrentInventoryCountTo==qModel.CurrentInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom);
                }
                else if(qModel.CurrentInventoryCountTo>qModel.CurrentInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom,qModel.CurrentInventoryCountTo);
                }//From>To不参与条件
                if(qModel.SalesCountTo==qModel.SalesCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, qModel.SalesCountFrom);
                }
                else if(qModel.SalesCountTo>qModel.SalesCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesCount, qModel.SalesCountFrom,qModel.SalesCountTo);
                }//From>To不参与条件
                if(qModel.OnSalesOrderCountTo==qModel.OnSalesOrderCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom);
                }
                else if(qModel.OnSalesOrderCountTo>qModel.OnSalesOrderCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom,qModel.OnSalesOrderCountTo);
                }//From>To不参与条件
                if(qModel.RetailCountTo==qModel.RetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, qModel.RetailCountFrom);
                }
                else if(qModel.RetailCountTo>qModel.RetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCount, qModel.RetailCountFrom,qModel.RetailCountTo);
                }//From>To不参与条件
                if(qModel.OnRetailCountTo==qModel.OnRetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, qModel.OnRetailCountFrom);
                }
                else if(qModel.OnRetailCountTo>qModel.OnRetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, qModel.OnRetailCountFrom,qModel.OnRetailCountTo);
                }//From>To不参与条件
                if(qModel.DismantingAmountTo==qModel.DismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, qModel.DismantingAmountFrom);
                }
                else if(qModel.DismantingAmountTo>qModel.DismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, qModel.DismantingAmountFrom,qModel.DismantingAmountTo);
                }//From>To不参与条件
                if(qModel.RetailDismantingAmountTo==qModel.RetailDismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom);
                }
                else if(qModel.RetailDismantingAmountTo>qModel.RetailDismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom,qModel.RetailDismantingAmountTo);
                }//From>To不参与条件
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(!string.IsNullOrEmpty(qModel.DrugInfoCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugInfoCode, qModel.DrugInfoCode);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.InventoryRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用库存业务逻辑:通查询Model查询实体(库存)失败";
                return this.HandleException<List<InventoryRecord>>(message, ex);
            }  
		} 

		 
        public List<InventoryRecord> SearchPagedInventoryRecordsByQueryModel(QueryInventoryRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<InventoryRecord>();
                var queryBuilder = QueryBuilder.Create<InventoryRecord>(); 
                if(qModel.MaxInventoryCountTo==qModel.MaxInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom);
                }
                else if(qModel.MaxInventoryCountTo>qModel.MaxInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaxInventoryCount, qModel.MaxInventoryCountFrom,qModel.MaxInventoryCountTo);
                }//From>To不参与条件
                if(qModel.MinInventoryCountTo==qModel.MinInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MinInventoryCount, qModel.MinInventoryCountFrom);
                }
                else if(qModel.MinInventoryCountTo>qModel.MinInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MinInventoryCount, qModel.MinInventoryCountFrom,qModel.MinInventoryCountTo);
                }//From>To不参与条件
                if(qModel.CurrentInventoryCountTo==qModel.CurrentInventoryCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom);
                }
                else if(qModel.CurrentInventoryCountTo>qModel.CurrentInventoryCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CurrentInventoryCount, qModel.CurrentInventoryCountFrom,qModel.CurrentInventoryCountTo);
                }//From>To不参与条件
                if(qModel.SalesCountTo==qModel.SalesCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesCount, qModel.SalesCountFrom);
                }
                else if(qModel.SalesCountTo>qModel.SalesCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesCount, qModel.SalesCountFrom,qModel.SalesCountTo);
                }//From>To不参与条件
                if(qModel.OnSalesOrderCountTo==qModel.OnSalesOrderCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom);
                }
                else if(qModel.OnSalesOrderCountTo>qModel.OnSalesOrderCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnSalesOrderCount, qModel.OnSalesOrderCountFrom,qModel.OnSalesOrderCountTo);
                }//From>To不参与条件
                if(qModel.RetailCountTo==qModel.RetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCount, qModel.RetailCountFrom);
                }
                else if(qModel.RetailCountTo>qModel.RetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCount, qModel.RetailCountFrom,qModel.RetailCountTo);
                }//From>To不参与条件
                if(qModel.OnRetailCountTo==qModel.OnRetailCountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OnRetailCount, qModel.OnRetailCountFrom);
                }
                else if(qModel.OnRetailCountTo>qModel.OnRetailCountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OnRetailCount, qModel.OnRetailCountFrom,qModel.OnRetailCountTo);
                }//From>To不参与条件
                if(qModel.DismantingAmountTo==qModel.DismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, qModel.DismantingAmountFrom);
                }
                else if(qModel.DismantingAmountTo>qModel.DismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, qModel.DismantingAmountFrom,qModel.DismantingAmountTo);
                }//From>To不参与条件
                if(qModel.RetailDismantingAmountTo==qModel.RetailDismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom);
                }
                else if(qModel.RetailDismantingAmountTo>qModel.RetailDismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailDismantingAmount, qModel.RetailDismantingAmountFrom,qModel.RetailDismantingAmountTo);
                }//From>To不参与条件
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(!string.IsNullOrEmpty(qModel.DrugInfoCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DrugInfoCode, qModel.DrugInfoCode);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.InventoryRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<InventoryRecord>>("调用库存业务逻辑:通过查询Model分页查询实体(库存)失败", ex);
            }  
		}

		#endregion 库存 
		   
		#region 生产厂家 

		/// <summary>
        /// 获取实体生产厂家 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Manufacturer GetManufacturer(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ManufacturerBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Manufacturer>("调用生产厂家 业务逻辑:根据编号获取实体(生产厂家 )失败", ex);
            }
		} 

        /// <summary>
        /// 统计生产厂家 
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountManufacturer(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ManufacturerBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用生产厂家 业务逻辑:统计所有(生产厂家 )数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加生产厂家 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddManufacturer(Manufacturer value,out string msg)
		{
			try
            {
                return HandlerFactory.ManufacturerBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用生产厂家 业务逻辑:添加实体(生产厂家 )失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除生产厂家 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteManufacturer(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ManufacturerBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用生产厂家 业务逻辑:删除实体(生产厂家 )失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存生产厂家 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveManufacturer(Manufacturer value, out string msg)
		{
			try
            {
                return HandlerFactory.ManufacturerBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用生产厂家 业务逻辑:保存实体(生产厂家 )失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录生产厂家 
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Manufacturer> AllManufacturers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ManufacturerBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用生产厂家 业务逻辑:获取所有实体(生产厂家 )失败";
                return this.HandleException<List<Manufacturer>>(message, ex);
            }
		}

		 
        public List<Manufacturer> QueryManufacturers(string name,string shortpinyin,string decription,string code,bool enabled,bool queryenabled,string address,string tel,string contact,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Manufacturer>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(shortpinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShortPinYin, shortpinyin);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(contact)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Contact, contact);
                }

                return HandlerFactory.ManufacturerBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用生产厂家 业务逻辑:查询实体(生产厂家 )失败";
                return this.HandleException<List<Manufacturer>>(msg, ex);
            }
        } 
		
		 
        public List<Manufacturer> QueryPagedManufacturers(string name,string shortpinyin,string decription,string code,bool enabled,bool queryenabled,string address,string tel,string contact,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Manufacturer>();
                var queryBuilder = QueryBuilder.Create<Manufacturer>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(shortpinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShortPinYin, shortpinyin);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(contact)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Contact, contact);
                }

                return HandlerFactory.ManufacturerBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Manufacturer>>("调用生产厂家 业务逻辑:查询实体(生产厂家 )失败", ex);
            }
        } 
 
        public List<Manufacturer> SearchManufacturersByQueryModel(QueryManufacturerModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Manufacturer>();
                var queryBuilder = QueryBuilder.Create<Manufacturer>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.ShortPinYin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShortPinYin, qModel.ShortPinYin);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Contact)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Contact, qModel.Contact);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ManufacturerBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用生产厂家 业务逻辑:通查询Model查询实体(生产厂家 )失败";
                return this.HandleException<List<Manufacturer>>(message, ex);
            }  
		} 

		 
        public List<Manufacturer> SearchPagedManufacturersByQueryModel(QueryManufacturerModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Manufacturer>();
                var queryBuilder = QueryBuilder.Create<Manufacturer>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.ShortPinYin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShortPinYin, qModel.ShortPinYin);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Contact)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Contact, qModel.Contact);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ManufacturerBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Manufacturer>>("调用生产厂家 业务逻辑:通过查询Model分页查询实体(生产厂家 )失败", ex);
            }  
		}

		#endregion 生产厂家  
		   
		#region 包装材质

		/// <summary>
        /// 获取实体包装材质
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PackagingMaterial GetPackagingMaterial(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PackagingMaterialBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PackagingMaterial>("调用包装材质业务逻辑:根据编号获取实体(包装材质)失败", ex);
            }
		} 

        /// <summary>
        /// 统计包装材质
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPackagingMaterial(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PackagingMaterialBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用包装材质业务逻辑:统计所有(包装材质)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加包装材质
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPackagingMaterial(PackagingMaterial value,out string msg)
		{
			try
            {
                return HandlerFactory.PackagingMaterialBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用包装材质业务逻辑:添加实体(包装材质)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除包装材质
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePackagingMaterial(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PackagingMaterialBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用包装材质业务逻辑:删除实体(包装材质)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存包装材质
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePackagingMaterial(PackagingMaterial value, out string msg)
		{
			try
            {
                return HandlerFactory.PackagingMaterialBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用包装材质业务逻辑:保存实体(包装材质)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录包装材质
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PackagingMaterial> AllPackagingMaterials(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PackagingMaterialBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用包装材质业务逻辑:获取所有实体(包装材质)失败";
                return this.HandleException<List<PackagingMaterial>>(message, ex);
            }
		}

		 
        public List<PackagingMaterial> QueryPackagingMaterials(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PackagingMaterial>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PackagingMaterialBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用包装材质业务逻辑:查询实体(包装材质)失败";
                return this.HandleException<List<PackagingMaterial>>(msg, ex);
            }
        } 
		
		 
        public List<PackagingMaterial> QueryPagedPackagingMaterials(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PackagingMaterial>();
                var queryBuilder = QueryBuilder.Create<PackagingMaterial>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PackagingMaterialBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PackagingMaterial>>("调用包装材质业务逻辑:查询实体(包装材质)失败", ex);
            }
        } 
 
        public List<PackagingMaterial> SearchPackagingMaterialsByQueryModel(QueryPackagingMaterialModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PackagingMaterial>();
                var queryBuilder = QueryBuilder.Create<PackagingMaterial>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PackagingMaterialBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用包装材质业务逻辑:通查询Model查询实体(包装材质)失败";
                return this.HandleException<List<PackagingMaterial>>(message, ex);
            }  
		} 

		 
        public List<PackagingMaterial> SearchPagedPackagingMaterialsByQueryModel(QueryPackagingMaterialModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PackagingMaterial>();
                var queryBuilder = QueryBuilder.Create<PackagingMaterial>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PackagingMaterialBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PackagingMaterial>>("调用包装材质业务逻辑:通过查询Model分页查询实体(包装材质)失败", ex);
            }  
		}

		#endregion 包装材质 
		   
		#region 包装

		/// <summary>
        /// 获取实体包装
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PackagingUnit GetPackagingUnit(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PackagingUnitBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PackagingUnit>("调用包装业务逻辑:根据编号获取实体(包装)失败", ex);
            }
		} 

        /// <summary>
        /// 统计包装
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPackagingUnit(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PackagingUnitBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用包装业务逻辑:统计所有(包装)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加包装
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPackagingUnit(PackagingUnit value,out string msg)
		{
			try
            {
                return HandlerFactory.PackagingUnitBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用包装业务逻辑:添加实体(包装)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除包装
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePackagingUnit(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PackagingUnitBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用包装业务逻辑:删除实体(包装)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存包装
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePackagingUnit(PackagingUnit value, out string msg)
		{
			try
            {
                return HandlerFactory.PackagingUnitBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用包装业务逻辑:保存实体(包装)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录包装
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PackagingUnit> AllPackagingUnits(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PackagingUnitBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用包装业务逻辑:获取所有实体(包装)失败";
                return this.HandleException<List<PackagingUnit>>(message, ex);
            }
		}

		 
        public List<PackagingUnit> QueryPackagingUnits(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PackagingUnit>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PackagingUnitBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用包装业务逻辑:查询实体(包装)失败";
                return this.HandleException<List<PackagingUnit>>(msg, ex);
            }
        } 
		
		 
        public List<PackagingUnit> QueryPagedPackagingUnits(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PackagingUnit>();
                var queryBuilder = QueryBuilder.Create<PackagingUnit>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PackagingUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PackagingUnit>>("调用包装业务逻辑:查询实体(包装)失败", ex);
            }
        } 
 
        public List<PackagingUnit> SearchPackagingUnitsByQueryModel(QueryPackagingUnitModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PackagingUnit>();
                var queryBuilder = QueryBuilder.Create<PackagingUnit>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PackagingUnitBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用包装业务逻辑:通查询Model查询实体(包装)失败";
                return this.HandleException<List<PackagingUnit>>(message, ex);
            }  
		} 

		 
        public List<PackagingUnit> SearchPagedPackagingUnitsByQueryModel(QueryPackagingUnitModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PackagingUnit>();
                var queryBuilder = QueryBuilder.Create<PackagingUnit>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PackagingUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PackagingUnit>>("调用包装业务逻辑:通过查询Model分页查询实体(包装)失败", ex);
            }  
		}

		#endregion 包装 
		   
		#region 付款方式

		/// <summary>
        /// 获取实体付款方式
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PaymentMethod GetPaymentMethod(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PaymentMethodBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PaymentMethod>("调用付款方式业务逻辑:根据编号获取实体(付款方式)失败", ex);
            }
		} 

        /// <summary>
        /// 统计付款方式
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPaymentMethod(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PaymentMethodBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用付款方式业务逻辑:统计所有(付款方式)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加付款方式
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPaymentMethod(PaymentMethod value,out string msg)
		{
			try
            {
                return HandlerFactory.PaymentMethodBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用付款方式业务逻辑:添加实体(付款方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除付款方式
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePaymentMethod(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PaymentMethodBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用付款方式业务逻辑:删除实体(付款方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存付款方式
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePaymentMethod(PaymentMethod value, out string msg)
		{
			try
            {
                return HandlerFactory.PaymentMethodBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用付款方式业务逻辑:保存实体(付款方式)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录付款方式
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PaymentMethod> AllPaymentMethods(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PaymentMethodBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用付款方式业务逻辑:获取所有实体(付款方式)失败";
                return this.HandleException<List<PaymentMethod>>(message, ex);
            }
		}

		 
        public List<PaymentMethod> QueryPaymentMethods(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PaymentMethod>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PaymentMethodBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用付款方式业务逻辑:查询实体(付款方式)失败";
                return this.HandleException<List<PaymentMethod>>(msg, ex);
            }
        } 
		
		 
        public List<PaymentMethod> QueryPagedPaymentMethods(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PaymentMethod>();
                var queryBuilder = QueryBuilder.Create<PaymentMethod>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PaymentMethodBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PaymentMethod>>("调用付款方式业务逻辑:查询实体(付款方式)失败", ex);
            }
        } 
 
        public List<PaymentMethod> SearchPaymentMethodsByQueryModel(QueryPaymentMethodModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PaymentMethod>();
                var queryBuilder = QueryBuilder.Create<PaymentMethod>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PaymentMethodBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用付款方式业务逻辑:通查询Model查询实体(付款方式)失败";
                return this.HandleException<List<PaymentMethod>>(message, ex);
            }  
		} 

		 
        public List<PaymentMethod> SearchPagedPaymentMethodsByQueryModel(QueryPaymentMethodModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PaymentMethod>();
                var queryBuilder = QueryBuilder.Create<PaymentMethod>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PaymentMethodBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PaymentMethod>>("调用付款方式业务逻辑:通过查询Model分页查询实体(付款方式)失败", ex);
            }  
		}

		#endregion 付款方式 
		   
		#region GSP证书

		/// <summary>
        /// 获取实体GSP证书
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public GSPLicense GetGSPLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GSPLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<GSPLicense>("调用GSP证书业务逻辑:根据编号获取实体(GSP证书)失败", ex);
            }
		} 

        /// <summary>
        /// 统计GSP证书
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountGSPLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GSPLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用GSP证书业务逻辑:统计所有(GSP证书)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加GSP证书
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddGSPLicense(GSPLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.GSPLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GSP证书业务逻辑:添加实体(GSP证书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除GSP证书
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteGSPLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.GSPLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GSP证书业务逻辑:删除实体(GSP证书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存GSP证书
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveGSPLicense(GSPLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.GSPLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GSP证书业务逻辑:保存实体(GSP证书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录GSP证书
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<GSPLicense> AllGSPLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GSPLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用GSP证书业务逻辑:获取所有实体(GSP证书)失败";
                return this.HandleException<List<GSPLicense>>(message, ex);
            }
		}

		 
        public List<GSPLicense> QueryGSPLicenses(string legalperson,string header,string qualityheader,string warehouseaddress,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<GSPLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(qualityheader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qualityheader);
                }
                if(!string.IsNullOrEmpty(warehouseaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, warehouseaddress);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.GSPLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用GSP证书业务逻辑:查询实体(GSP证书)失败";
                return this.HandleException<List<GSPLicense>>(msg, ex);
            }
        } 
		
		 
        public List<GSPLicense> QueryPagedGSPLicenses(string legalperson,string header,string qualityheader,string warehouseaddress,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GSPLicense>();
                var queryBuilder = QueryBuilder.Create<GSPLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(qualityheader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qualityheader);
                }
                if(!string.IsNullOrEmpty(warehouseaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, warehouseaddress);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.GSPLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<GSPLicense>>("调用GSP证书业务逻辑:查询实体(GSP证书)失败", ex);
            }
        } 
 
        public List<GSPLicense> SearchGSPLicensesByQueryModel(QueryGSPLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<GSPLicense>();
                var queryBuilder = QueryBuilder.Create<GSPLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.QualityHeader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qModel.QualityHeader);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, qModel.WarehouseAddress);
                }
                if(qModel.BusinessTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessTypeId, qModel.BusinessTypeId);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.GSPLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用GSP证书业务逻辑:通查询Model查询实体(GSP证书)失败";
                return this.HandleException<List<GSPLicense>>(message, ex);
            }  
		} 

		 
        public List<GSPLicense> SearchPagedGSPLicensesByQueryModel(QueryGSPLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GSPLicense>();
                var queryBuilder = QueryBuilder.Create<GSPLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.QualityHeader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qModel.QualityHeader);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, qModel.WarehouseAddress);
                }
                if(qModel.BusinessTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessTypeId, qModel.BusinessTypeId);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.GSPLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<GSPLicense>>("调用GSP证书业务逻辑:通过查询Model分页查询实体(GSP证书)失败", ex);
            }  
		}

		#endregion GSP证书 
		   
		#region GMP证书

		/// <summary>
        /// 获取实体GMP证书
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public GMPLicense GetGMPLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GMPLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<GMPLicense>("调用GMP证书业务逻辑:根据编号获取实体(GMP证书)失败", ex);
            }
		} 

        /// <summary>
        /// 统计GMP证书
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountGMPLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GMPLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用GMP证书业务逻辑:统计所有(GMP证书)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加GMP证书
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddGMPLicense(GMPLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.GMPLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GMP证书业务逻辑:添加实体(GMP证书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除GMP证书
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteGMPLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.GMPLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GMP证书业务逻辑:删除实体(GMP证书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存GMP证书
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveGMPLicense(GMPLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.GMPLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用GMP证书业务逻辑:保存实体(GMP证书)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录GMP证书
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<GMPLicense> AllGMPLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.GMPLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用GMP证书业务逻辑:获取所有实体(GMP证书)失败";
                return this.HandleException<List<GMPLicense>>(message, ex);
            }
		}

		 
        public List<GMPLicense> QueryGMPLicenses(string certificationscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<GMPLicense>(); 
                if(!string.IsNullOrEmpty(certificationscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CertificationScope, certificationscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.GMPLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用GMP证书业务逻辑:查询实体(GMP证书)失败";
                return this.HandleException<List<GMPLicense>>(msg, ex);
            }
        } 
		
		 
        public List<GMPLicense> QueryPagedGMPLicenses(string certificationscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GMPLicense>();
                var queryBuilder = QueryBuilder.Create<GMPLicense>(); 
                if(!string.IsNullOrEmpty(certificationscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CertificationScope, certificationscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.GMPLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<GMPLicense>>("调用GMP证书业务逻辑:查询实体(GMP证书)失败", ex);
            }
        } 
 
        public List<GMPLicense> SearchGMPLicensesByQueryModel(QueryGMPLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<GMPLicense>();
                var queryBuilder = QueryBuilder.Create<GMPLicense>(); 
                if(!string.IsNullOrEmpty(qModel.CertificationScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CertificationScope, qModel.CertificationScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.GMPLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用GMP证书业务逻辑:通查询Model查询实体(GMP证书)失败";
                return this.HandleException<List<GMPLicense>>(message, ex);
            }  
		} 

		 
        public List<GMPLicense> SearchPagedGMPLicensesByQueryModel(QueryGMPLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<GMPLicense>();
                var queryBuilder = QueryBuilder.Create<GMPLicense>(); 
                if(!string.IsNullOrEmpty(qModel.CertificationScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CertificationScope, qModel.CertificationScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.GMPLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<GMPLicense>>("调用GMP证书业务逻辑:通过查询Model分页查询实体(GMP证书)失败", ex);
            }  
		}

		#endregion GMP证书 
		   
		#region 营业执照

		/// <summary>
        /// 获取实体营业执照
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public BusinessLicense GetBusinessLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<BusinessLicense>("调用营业执照业务逻辑:根据编号获取实体(营业执照)失败", ex);
            }
		} 

        /// <summary>
        /// 统计营业执照
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountBusinessLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用营业执照业务逻辑:统计所有(营业执照)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加营业执照
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddBusinessLicense(BusinessLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.BusinessLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用营业执照业务逻辑:添加实体(营业执照)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除营业执照
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteBusinessLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用营业执照业务逻辑:删除实体(营业执照)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存营业执照
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveBusinessLicense(BusinessLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.BusinessLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用营业执照业务逻辑:保存实体(营业执照)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录营业执照
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<BusinessLicense> AllBusinessLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.BusinessLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用营业执照业务逻辑:获取所有实体(营业执照)失败";
                return this.HandleException<List<BusinessLicense>>(message, ex);
            }
		}

		 
        public List<BusinessLicense> QueryBusinessLicenses(int registeredcapitalfrom,int registeredcapitalto,int paidincapitalfrom,int paidincapitalto,string corporatenature,string businessscope,DateTime establishmentdatefrom,DateTime establishmentdateto,string inspectiondate,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<BusinessLicense>(); 
                if(registeredcapitalto==registeredcapitalfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RegisteredCapital, registeredcapitalfrom);
                }
                else if(registeredcapitalto>registeredcapitalfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RegisteredCapital, registeredcapitalfrom,registeredcapitalto);
                }//From>To不参与条件
                if(paidincapitalto==paidincapitalfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaidinCapital, paidincapitalfrom);
                }
                else if(paidincapitalto>paidincapitalfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaidinCapital, paidincapitalfrom,paidincapitalto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(corporatenature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, corporatenature);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(establishmentdateto!=default(DateTime)&&establishmentdatefrom!=default(DateTime)){//From==To执行==
                if(establishmentdateto==establishmentdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.EstablishmentDate, establishmentdatefrom);
                }
                else if(establishmentdateto>establishmentdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.EstablishmentDate, establishmentdatefrom,establishmentdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(inspectiondate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.InspectionDate, inspectiondate);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.BusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用营业执照业务逻辑:查询实体(营业执照)失败";
                return this.HandleException<List<BusinessLicense>>(msg, ex);
            }
        } 
		
		 
        public List<BusinessLicense> QueryPagedBusinessLicenses(int registeredcapitalfrom,int registeredcapitalto,int paidincapitalfrom,int paidincapitalto,string corporatenature,string businessscope,DateTime establishmentdatefrom,DateTime establishmentdateto,string inspectiondate,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessLicense>();
                var queryBuilder = QueryBuilder.Create<BusinessLicense>(); 
                if(registeredcapitalto==registeredcapitalfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RegisteredCapital, registeredcapitalfrom);
                }
                else if(registeredcapitalto>registeredcapitalfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RegisteredCapital, registeredcapitalfrom,registeredcapitalto);
                }//From<To不参与条件
                if(paidincapitalto==paidincapitalfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaidinCapital, paidincapitalfrom);
                }
                else if(paidincapitalto>paidincapitalfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PaidinCapital, paidincapitalfrom,paidincapitalto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(corporatenature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, corporatenature);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(establishmentdateto!=default(DateTime)&&establishmentdatefrom!=default(DateTime)){//From==To执行==
                if(establishmentdateto==establishmentdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.EstablishmentDate, establishmentdatefrom);
                }
                else if(establishmentdateto>establishmentdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.EstablishmentDate, establishmentdatefrom,establishmentdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(inspectiondate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.InspectionDate, inspectiondate);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.BusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<BusinessLicense>>("调用营业执照业务逻辑:查询实体(营业执照)失败", ex);
            }
        } 
 
        public List<BusinessLicense> SearchBusinessLicensesByQueryModel(QueryBusinessLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<BusinessLicense>();
                var queryBuilder = QueryBuilder.Create<BusinessLicense>(); 
                if(qModel.RegisteredCapitalTo==qModel.RegisteredCapitalFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RegisteredCapital, qModel.RegisteredCapitalFrom);
                }
                else if(qModel.RegisteredCapitalTo>qModel.RegisteredCapitalFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RegisteredCapital, qModel.RegisteredCapitalFrom,qModel.RegisteredCapitalTo);
                }//From>To不参与条件
                if(qModel.PaidinCapitalTo==qModel.PaidinCapitalFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaidinCapital, qModel.PaidinCapitalFrom);
                }
                else if(qModel.PaidinCapitalTo>qModel.PaidinCapitalFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaidinCapital, qModel.PaidinCapitalFrom,qModel.PaidinCapitalTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.CorporateNature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, qModel.CorporateNature);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(qModel.EstablishmentDateTo!=default(DateTime)&&qModel.EstablishmentDateFrom!=default(DateTime)){
                if(qModel.EstablishmentDateTo==qModel.EstablishmentDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.EstablishmentDate, qModel.EstablishmentDateFrom);
                }
                else if(qModel.EstablishmentDateTo>qModel.EstablishmentDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.EstablishmentDate, qModel.EstablishmentDateFrom,qModel.EstablishmentDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.InspectionDate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.InspectionDate, qModel.InspectionDate);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.BusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用营业执照业务逻辑:通查询Model查询实体(营业执照)失败";
                return this.HandleException<List<BusinessLicense>>(message, ex);
            }  
		} 

		 
        public List<BusinessLicense> SearchPagedBusinessLicensesByQueryModel(QueryBusinessLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<BusinessLicense>();
                var queryBuilder = QueryBuilder.Create<BusinessLicense>(); 
                if(qModel.RegisteredCapitalTo==qModel.RegisteredCapitalFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RegisteredCapital, qModel.RegisteredCapitalFrom);
                }
                else if(qModel.RegisteredCapitalTo>qModel.RegisteredCapitalFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RegisteredCapital, qModel.RegisteredCapitalFrom,qModel.RegisteredCapitalTo);
                }//From>To不参与条件
                if(qModel.PaidinCapitalTo==qModel.PaidinCapitalFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaidinCapital, qModel.PaidinCapitalFrom);
                }
                else if(qModel.PaidinCapitalTo>qModel.PaidinCapitalFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaidinCapital, qModel.PaidinCapitalFrom,qModel.PaidinCapitalTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.CorporateNature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, qModel.CorporateNature);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(qModel.EstablishmentDateTo!=default(DateTime)&&qModel.EstablishmentDateFrom!=default(DateTime)){
                if(qModel.EstablishmentDateTo==qModel.EstablishmentDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.EstablishmentDate, qModel.EstablishmentDateFrom);
                }
                else if(qModel.EstablishmentDateTo>qModel.EstablishmentDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.EstablishmentDate, qModel.EstablishmentDateFrom,qModel.EstablishmentDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.InspectionDate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.InspectionDate, qModel.InspectionDate);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.BusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<BusinessLicense>>("调用营业执照业务逻辑:通过查询Model分页查询实体(营业执照)失败", ex);
            }  
		}

		#endregion 营业执照 
		   
		#region 药品生产许可证

		/// <summary>
        /// 获取实体药品生产许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public MedicineProductionLicense GetMedicineProductionLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<MedicineProductionLicense>("调用药品生产许可证业务逻辑:根据编号获取实体(药品生产许可证)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品生产许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountMedicineProductionLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品生产许可证业务逻辑:统计所有(药品生产许可证)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品生产许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddMedicineProductionLicense(MedicineProductionLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品生产许可证业务逻辑:添加实体(药品生产许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品生产许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteMedicineProductionLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品生产许可证业务逻辑:删除实体(药品生产许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品生产许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveMedicineProductionLicense(MedicineProductionLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品生产许可证业务逻辑:保存实体(药品生产许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品生产许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<MedicineProductionLicense> AllMedicineProductionLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品生产许可证业务逻辑:获取所有实体(药品生产许可证)失败";
                return this.HandleException<List<MedicineProductionLicense>>(message, ex);
            }
		}

		 
        public List<MedicineProductionLicense> QueryMedicineProductionLicenses(string legalperson,string header,string productaddress,string corporatenature,string categorycode,string productscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<MedicineProductionLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(productaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, productaddress);
                }
                if(!string.IsNullOrEmpty(corporatenature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, corporatenature);
                }
                if(!string.IsNullOrEmpty(categorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CategoryCode, categorycode);
                }
                if(!string.IsNullOrEmpty(productscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, productscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品生产许可证业务逻辑:查询实体(药品生产许可证)失败";
                return this.HandleException<List<MedicineProductionLicense>>(msg, ex);
            }
        } 
		
		 
        public List<MedicineProductionLicense> QueryPagedMedicineProductionLicenses(string legalperson,string header,string productaddress,string corporatenature,string categorycode,string productscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicineProductionLicense>();
                var queryBuilder = QueryBuilder.Create<MedicineProductionLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(productaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, productaddress);
                }
                if(!string.IsNullOrEmpty(corporatenature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, corporatenature);
                }
                if(!string.IsNullOrEmpty(categorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CategoryCode, categorycode);
                }
                if(!string.IsNullOrEmpty(productscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, productscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<MedicineProductionLicense>>("调用药品生产许可证业务逻辑:查询实体(药品生产许可证)失败", ex);
            }
        } 
 
        public List<MedicineProductionLicense> SearchMedicineProductionLicensesByQueryModel(QueryMedicineProductionLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<MedicineProductionLicense>();
                var queryBuilder = QueryBuilder.Create<MedicineProductionLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, qModel.ProductAddress);
                }
                if(!string.IsNullOrEmpty(qModel.CorporateNature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, qModel.CorporateNature);
                }
                if(!string.IsNullOrEmpty(qModel.CategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CategoryCode, qModel.CategoryCode);
                }
                if(!string.IsNullOrEmpty(qModel.ProductScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, qModel.ProductScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品生产许可证业务逻辑:通查询Model查询实体(药品生产许可证)失败";
                return this.HandleException<List<MedicineProductionLicense>>(message, ex);
            }  
		} 

		 
        public List<MedicineProductionLicense> SearchPagedMedicineProductionLicensesByQueryModel(QueryMedicineProductionLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicineProductionLicense>();
                var queryBuilder = QueryBuilder.Create<MedicineProductionLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, qModel.ProductAddress);
                }
                if(!string.IsNullOrEmpty(qModel.CorporateNature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CorporateNature, qModel.CorporateNature);
                }
                if(!string.IsNullOrEmpty(qModel.CategoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CategoryCode, qModel.CategoryCode);
                }
                if(!string.IsNullOrEmpty(qModel.ProductScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, qModel.ProductScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.MedicineProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<MedicineProductionLicense>>("调用药品生产许可证业务逻辑:通过查询Model分页查询实体(药品生产许可证)失败", ex);
            }  
		}

		#endregion 药品生产许可证 
		   
		#region 药品经营许可证

		/// <summary>
        /// 获取实体药品经营许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public MedicineBusinessLicense GetMedicineBusinessLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<MedicineBusinessLicense>("调用药品经营许可证业务逻辑:根据编号获取实体(药品经营许可证)失败", ex);
            }
		} 

        /// <summary>
        /// 统计药品经营许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountMedicineBusinessLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用药品经营许可证业务逻辑:统计所有(药品经营许可证)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加药品经营许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddMedicineBusinessLicense(MedicineBusinessLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品经营许可证业务逻辑:添加实体(药品经营许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除药品经营许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteMedicineBusinessLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品经营许可证业务逻辑:删除实体(药品经营许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存药品经营许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveMedicineBusinessLicense(MedicineBusinessLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用药品经营许可证业务逻辑:保存实体(药品经营许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录药品经营许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<MedicineBusinessLicense> AllMedicineBusinessLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用药品经营许可证业务逻辑:获取所有实体(药品经营许可证)失败";
                return this.HandleException<List<MedicineBusinessLicense>>(message, ex);
            }
		}

		 
        public List<MedicineBusinessLicense> QueryMedicineBusinessLicenses(string legalperson,string header,string qualityheader,string warehouseaddress,string businessscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<MedicineBusinessLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(qualityheader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qualityheader);
                }
                if(!string.IsNullOrEmpty(warehouseaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, warehouseaddress);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用药品经营许可证业务逻辑:查询实体(药品经营许可证)失败";
                return this.HandleException<List<MedicineBusinessLicense>>(msg, ex);
            }
        } 
		
		 
        public List<MedicineBusinessLicense> QueryPagedMedicineBusinessLicenses(string legalperson,string header,string qualityheader,string warehouseaddress,string businessscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicineBusinessLicense>();
                var queryBuilder = QueryBuilder.Create<MedicineBusinessLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(qualityheader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qualityheader);
                }
                if(!string.IsNullOrEmpty(warehouseaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, warehouseaddress);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<MedicineBusinessLicense>>("调用药品经营许可证业务逻辑:查询实体(药品经营许可证)失败", ex);
            }
        } 
 
        public List<MedicineBusinessLicense> SearchMedicineBusinessLicensesByQueryModel(QueryMedicineBusinessLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<MedicineBusinessLicense>();
                var queryBuilder = QueryBuilder.Create<MedicineBusinessLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.QualityHeader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qModel.QualityHeader);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, qModel.WarehouseAddress);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用药品经营许可证业务逻辑:通查询Model查询实体(药品经营许可证)失败";
                return this.HandleException<List<MedicineBusinessLicense>>(message, ex);
            }  
		} 

		 
        public List<MedicineBusinessLicense> SearchPagedMedicineBusinessLicensesByQueryModel(QueryMedicineBusinessLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicineBusinessLicense>();
                var queryBuilder = QueryBuilder.Create<MedicineBusinessLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.QualityHeader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qModel.QualityHeader);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, qModel.WarehouseAddress);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.MedicineBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<MedicineBusinessLicense>>("调用药品经营许可证业务逻辑:通过查询Model分页查询实体(药品经营许可证)失败", ex);
            }  
		}

		#endregion 药品经营许可证 
		   
		#region 器械经营许可证

		/// <summary>
        /// 获取实体器械经营许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public InstrumentsBusinessLicense GetInstrumentsBusinessLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<InstrumentsBusinessLicense>("调用器械经营许可证业务逻辑:根据编号获取实体(器械经营许可证)失败", ex);
            }
		} 

        /// <summary>
        /// 统计器械经营许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountInstrumentsBusinessLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用器械经营许可证业务逻辑:统计所有(器械经营许可证)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加器械经营许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddInstrumentsBusinessLicense(InstrumentsBusinessLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用器械经营许可证业务逻辑:添加实体(器械经营许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除器械经营许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteInstrumentsBusinessLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用器械经营许可证业务逻辑:删除实体(器械经营许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存器械经营许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveInstrumentsBusinessLicense(InstrumentsBusinessLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用器械经营许可证业务逻辑:保存实体(器械经营许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录器械经营许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<InstrumentsBusinessLicense> AllInstrumentsBusinessLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用器械经营许可证业务逻辑:获取所有实体(器械经营许可证)失败";
                return this.HandleException<List<InstrumentsBusinessLicense>>(message, ex);
            }
		}

		 
        public List<InstrumentsBusinessLicense> QueryInstrumentsBusinessLicenses(string legalperson,string header,string qualityheader,string warehouseaddress,string businessscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<InstrumentsBusinessLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(qualityheader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qualityheader);
                }
                if(!string.IsNullOrEmpty(warehouseaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, warehouseaddress);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用器械经营许可证业务逻辑:查询实体(器械经营许可证)失败";
                return this.HandleException<List<InstrumentsBusinessLicense>>(msg, ex);
            }
        } 
		
		 
        public List<InstrumentsBusinessLicense> QueryPagedInstrumentsBusinessLicenses(string legalperson,string header,string qualityheader,string warehouseaddress,string businessscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<InstrumentsBusinessLicense>();
                var queryBuilder = QueryBuilder.Create<InstrumentsBusinessLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(qualityheader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qualityheader);
                }
                if(!string.IsNullOrEmpty(warehouseaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, warehouseaddress);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<InstrumentsBusinessLicense>>("调用器械经营许可证业务逻辑:查询实体(器械经营许可证)失败", ex);
            }
        } 
 
        public List<InstrumentsBusinessLicense> SearchInstrumentsBusinessLicensesByQueryModel(QueryInstrumentsBusinessLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<InstrumentsBusinessLicense>();
                var queryBuilder = QueryBuilder.Create<InstrumentsBusinessLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.QualityHeader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qModel.QualityHeader);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, qModel.WarehouseAddress);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用器械经营许可证业务逻辑:通查询Model查询实体(器械经营许可证)失败";
                return this.HandleException<List<InstrumentsBusinessLicense>>(message, ex);
            }  
		} 

		 
        public List<InstrumentsBusinessLicense> SearchPagedInstrumentsBusinessLicensesByQueryModel(QueryInstrumentsBusinessLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<InstrumentsBusinessLicense>();
                var queryBuilder = QueryBuilder.Create<InstrumentsBusinessLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.QualityHeader)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityHeader, qModel.QualityHeader);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseAddress, qModel.WarehouseAddress);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.InstrumentsBusinessLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<InstrumentsBusinessLicense>>("调用器械经营许可证业务逻辑:通过查询Model分页查询实体(器械经营许可证)失败", ex);
            }  
		}

		#endregion 器械经营许可证 
		   
		#region 器械生产许可证

		/// <summary>
        /// 获取实体器械生产许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public InstrumentsProductionLicense GetInstrumentsProductionLicense(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<InstrumentsProductionLicense>("调用器械生产许可证业务逻辑:根据编号获取实体(器械生产许可证)失败", ex);
            }
		} 

        /// <summary>
        /// 统计器械生产许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountInstrumentsProductionLicense(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用器械生产许可证业务逻辑:统计所有(器械生产许可证)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加器械生产许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddInstrumentsProductionLicense(InstrumentsProductionLicense value,out string msg)
		{
			try
            {
                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用器械生产许可证业务逻辑:添加实体(器械生产许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除器械生产许可证
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteInstrumentsProductionLicense(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用器械生产许可证业务逻辑:删除实体(器械生产许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存器械生产许可证
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveInstrumentsProductionLicense(InstrumentsProductionLicense value, out string msg)
		{
			try
            {
                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用器械生产许可证业务逻辑:保存实体(器械生产许可证)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录器械生产许可证
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<InstrumentsProductionLicense> AllInstrumentsProductionLicenses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用器械生产许可证业务逻辑:获取所有实体(器械生产许可证)失败";
                return this.HandleException<List<InstrumentsProductionLicense>>(message, ex);
            }
		}

		 
        public List<InstrumentsProductionLicense> QueryInstrumentsProductionLicenses(string legalperson,string header,string productaddress,string productscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<InstrumentsProductionLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(productaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, productaddress);
                }
                if(!string.IsNullOrEmpty(productscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, productscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From>To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用器械生产许可证业务逻辑:查询实体(器械生产许可证)失败";
                return this.HandleException<List<InstrumentsProductionLicense>>(msg, ex);
            }
        } 
		
		 
        public List<InstrumentsProductionLicense> QueryPagedInstrumentsProductionLicenses(string legalperson,string header,string productaddress,string productscope,string name,string decription,string code,bool enabled,bool queryenabled,string unitname,string regaddress,string licensecode,DateTime startdatefrom,DateTime startdateto,DateTime outdatefrom,DateTime outdateto,DateTime issuancedatefrom,DateTime issuancedateto,string issuanceorg,bool valid,bool queryvalid,int licensetypevaluefrom,int licensetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<InstrumentsProductionLicense>();
                var queryBuilder = QueryBuilder.Create<InstrumentsProductionLicense>(); 
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(productaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, productaddress);
                }
                if(!string.IsNullOrEmpty(productscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, productscope);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(unitname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, unitname);
                }
                if(!string.IsNullOrEmpty(regaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, regaddress);
                }
                if(!string.IsNullOrEmpty(licensecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, licensecode);
                }
                if(startdateto!=default(DateTime)&&startdatefrom!=default(DateTime)){//From==To执行==
                if(startdateto==startdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, startdatefrom);
                }
                else if(startdateto>startdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StartDate, startdatefrom,startdateto);
                }}//From<To不参与条件
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(issuancedateto!=default(DateTime)&&issuancedatefrom!=default(DateTime)){//From==To执行==
                if(issuancedateto==issuancedatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, issuancedatefrom);
                }
                else if(issuancedateto>issuancedatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, issuancedatefrom,issuancedateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(issuanceorg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, issuanceorg);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(licensetypevalueto==licensetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, licensetypevaluefrom);
                }
                else if(licensetypevalueto>licensetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, licensetypevaluefrom,licensetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<InstrumentsProductionLicense>>("调用器械生产许可证业务逻辑:查询实体(器械生产许可证)失败", ex);
            }
        } 
 
        public List<InstrumentsProductionLicense> SearchInstrumentsProductionLicensesByQueryModel(QueryInstrumentsProductionLicenseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<InstrumentsProductionLicense>();
                var queryBuilder = QueryBuilder.Create<InstrumentsProductionLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, qModel.ProductAddress);
                }
                if(!string.IsNullOrEmpty(qModel.ProductScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, qModel.ProductScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用器械生产许可证业务逻辑:通查询Model查询实体(器械生产许可证)失败";
                return this.HandleException<List<InstrumentsProductionLicense>>(message, ex);
            }  
		} 

		 
        public List<InstrumentsProductionLicense> SearchPagedInstrumentsProductionLicensesByQueryModel(QueryInstrumentsProductionLicenseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<InstrumentsProductionLicense>();
                var queryBuilder = QueryBuilder.Create<InstrumentsProductionLicense>(); 
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.ProductAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductAddress, qModel.ProductAddress);
                }
                if(!string.IsNullOrEmpty(qModel.ProductScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ProductScope, qModel.ProductScope);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.UnitName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.UnitName, qModel.UnitName);
                }
                if(!string.IsNullOrEmpty(qModel.RegAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RegAddress, qModel.RegAddress);
                }
                if(!string.IsNullOrEmpty(qModel.LicenseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicenseCode, qModel.LicenseCode);
                }
                if(qModel.StartDateTo!=default(DateTime)&&qModel.StartDateFrom!=default(DateTime)){
                if(qModel.StartDateTo==qModel.StartDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StartDate, qModel.StartDateFrom);
                }
                else if(qModel.StartDateTo>qModel.StartDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StartDate, qModel.StartDateFrom,qModel.StartDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.IssuanceDateTo!=default(DateTime)&&qModel.IssuanceDateFrom!=default(DateTime)){
                if(qModel.IssuanceDateTo==qModel.IssuanceDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.IssuanceDate, qModel.IssuanceDateFrom);
                }
                else if(qModel.IssuanceDateTo>qModel.IssuanceDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.IssuanceDate, qModel.IssuanceDateFrom,qModel.IssuanceDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.IssuanceOrg)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IssuanceOrg, qModel.IssuanceOrg);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.LicenseTypeValueTo==qModel.LicenseTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom);
                }
                else if(qModel.LicenseTypeValueTo>qModel.LicenseTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LicenseTypeValue, qModel.LicenseTypeValueFrom,qModel.LicenseTypeValueTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PharmacyFileId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PharmacyFileId, qModel.PharmacyFileId);
                }

                return HandlerFactory.InstrumentsProductionLicenseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<InstrumentsProductionLicense>>("调用器械生产许可证业务逻辑:通过查询Model分页查询实体(器械生产许可证)失败", ex);
            }  
		}

		#endregion 器械生产许可证 
		   
		#region 医疗分类

		/// <summary>
        /// 获取实体医疗分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public MedicalCategory GetMedicalCategory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicalCategoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<MedicalCategory>("调用医疗分类业务逻辑:根据编号获取实体(医疗分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计医疗分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountMedicalCategory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicalCategoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用医疗分类业务逻辑:统计所有(医疗分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加医疗分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddMedicalCategory(MedicalCategory value,out string msg)
		{
			try
            {
                return HandlerFactory.MedicalCategoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用医疗分类业务逻辑:添加实体(医疗分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除医疗分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteMedicalCategory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.MedicalCategoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用医疗分类业务逻辑:删除实体(医疗分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存医疗分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveMedicalCategory(MedicalCategory value, out string msg)
		{
			try
            {
                return HandlerFactory.MedicalCategoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用医疗分类业务逻辑:保存实体(医疗分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录医疗分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<MedicalCategory> AllMedicalCategorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicalCategoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用医疗分类业务逻辑:获取所有实体(医疗分类)失败";
                return this.HandleException<List<MedicalCategory>>(message, ex);
            }
		}

		 
        public List<MedicalCategory> QueryMedicalCategorys(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<MedicalCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.MedicalCategoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用医疗分类业务逻辑:查询实体(医疗分类)失败";
                return this.HandleException<List<MedicalCategory>>(msg, ex);
            }
        } 
		
		 
        public List<MedicalCategory> QueryPagedMedicalCategorys(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicalCategory>();
                var queryBuilder = QueryBuilder.Create<MedicalCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.MedicalCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<MedicalCategory>>("调用医疗分类业务逻辑:查询实体(医疗分类)失败", ex);
            }
        } 
 
        public List<MedicalCategory> SearchMedicalCategorysByQueryModel(QueryMedicalCategoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<MedicalCategory>();
                var queryBuilder = QueryBuilder.Create<MedicalCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.MedicalCategoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用医疗分类业务逻辑:通查询Model查询实体(医疗分类)失败";
                return this.HandleException<List<MedicalCategory>>(message, ex);
            }  
		} 

		 
        public List<MedicalCategory> SearchPagedMedicalCategorysByQueryModel(QueryMedicalCategoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicalCategory>();
                var queryBuilder = QueryBuilder.Create<MedicalCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.MedicalCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<MedicalCategory>>("调用医疗分类业务逻辑:通过查询Model分页查询实体(医疗分类)失败", ex);
            }  
		}

		#endregion 医疗分类 
		   
		#region 医疗详细分类

		/// <summary>
        /// 获取实体医疗详细分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public MedicalCategoryDetail GetMedicalCategoryDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<MedicalCategoryDetail>("调用医疗详细分类业务逻辑:根据编号获取实体(医疗详细分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计医疗详细分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountMedicalCategoryDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用医疗详细分类业务逻辑:统计所有(医疗详细分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加医疗详细分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddMedicalCategoryDetail(MedicalCategoryDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用医疗详细分类业务逻辑:添加实体(医疗详细分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除医疗详细分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteMedicalCategoryDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用医疗详细分类业务逻辑:删除实体(医疗详细分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存医疗详细分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveMedicalCategoryDetail(MedicalCategoryDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用医疗详细分类业务逻辑:保存实体(医疗详细分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录医疗详细分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<MedicalCategoryDetail> AllMedicalCategoryDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用医疗详细分类业务逻辑:获取所有实体(医疗详细分类)失败";
                return this.HandleException<List<MedicalCategoryDetail>>(message, ex);
            }
		}

		 
        public List<MedicalCategoryDetail> QueryMedicalCategoryDetails(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<MedicalCategoryDetail>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用医疗详细分类业务逻辑:查询实体(医疗详细分类)失败";
                return this.HandleException<List<MedicalCategoryDetail>>(msg, ex);
            }
        } 
		
		 
        public List<MedicalCategoryDetail> QueryPagedMedicalCategoryDetails(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicalCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<MedicalCategoryDetail>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<MedicalCategoryDetail>>("调用医疗详细分类业务逻辑:查询实体(医疗详细分类)失败", ex);
            }
        } 
 
        public List<MedicalCategoryDetail> SearchMedicalCategoryDetailsByQueryModel(QueryMedicalCategoryDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<MedicalCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<MedicalCategoryDetail>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.MedicalCategoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicalCategoryId, qModel.MedicalCategoryId);
                }

                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用医疗详细分类业务逻辑:通查询Model查询实体(医疗详细分类)失败";
                return this.HandleException<List<MedicalCategoryDetail>>(message, ex);
            }  
		} 

		 
        public List<MedicalCategoryDetail> SearchPagedMedicalCategoryDetailsByQueryModel(QueryMedicalCategoryDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<MedicalCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<MedicalCategoryDetail>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.MedicalCategoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicalCategoryId, qModel.MedicalCategoryId);
                }

                return HandlerFactory.MedicalCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<MedicalCategoryDetail>>("调用医疗详细分类业务逻辑:通过查询Model分页查询实体(医疗详细分类)失败", ex);
            }  
		}

		#endregion 医疗详细分类 
		   
		#region 功能模块

		/// <summary>
        /// 获取实体功能模块
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Module GetModule(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Module>("调用功能模块业务逻辑:根据编号获取实体(功能模块)失败", ex);
            }
		} 

        /// <summary>
        /// 统计功能模块
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountModule(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用功能模块业务逻辑:统计所有(功能模块)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加功能模块
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddModule(Module value,out string msg)
		{
			try
            {
                return HandlerFactory.ModuleBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块业务逻辑:添加实体(功能模块)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除功能模块
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteModule(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ModuleBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块业务逻辑:删除实体(功能模块)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存功能模块
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveModule(Module value, out string msg)
		{
			try
            {
                return HandlerFactory.ModuleBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块业务逻辑:保存实体(功能模块)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录功能模块
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Module> AllModules(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用功能模块业务逻辑:获取所有实体(功能模块)失败";
                return this.HandleException<List<Module>>(message, ex);
            }
		}

		 
        public List<Module> QueryModules(string name,string description,string authkey,int indexfrom,int indexto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Module>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(authkey)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AuthKey, authkey);
                }
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件

                return HandlerFactory.ModuleBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用功能模块业务逻辑:查询实体(功能模块)失败";
                return this.HandleException<List<Module>>(msg, ex);
            }
        } 
		
		 
        public List<Module> QueryPagedModules(string name,string description,string authkey,int indexfrom,int indexto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Module>();
                var queryBuilder = QueryBuilder.Create<Module>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(authkey)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AuthKey, authkey);
                }
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件

                return HandlerFactory.ModuleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Module>>("调用功能模块业务逻辑:查询实体(功能模块)失败", ex);
            }
        } 
 
        public List<Module> SearchModulesByQueryModel(QueryModuleModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Module>();
                var queryBuilder = QueryBuilder.Create<Module>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.AuthKey)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AuthKey, qModel.AuthKey);
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.ModuleCatetoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ModuleCatetoryId, qModel.ModuleCatetoryId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ModuleBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用功能模块业务逻辑:通查询Model查询实体(功能模块)失败";
                return this.HandleException<List<Module>>(message, ex);
            }  
		} 

		 
        public List<Module> SearchPagedModulesByQueryModel(QueryModuleModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Module>();
                var queryBuilder = QueryBuilder.Create<Module>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.AuthKey)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AuthKey, qModel.AuthKey);
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.ModuleCatetoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ModuleCatetoryId, qModel.ModuleCatetoryId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ModuleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Module>>("调用功能模块业务逻辑:通过查询Model分页查询实体(功能模块)失败", ex);
            }  
		}

		#endregion 功能模块 
		   
		#region 功能模块分类

		/// <summary>
        /// 获取实体功能模块分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public ModuleCatetory GetModuleCatetory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleCatetoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<ModuleCatetory>("调用功能模块分类业务逻辑:根据编号获取实体(功能模块分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计功能模块分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountModuleCatetory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleCatetoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用功能模块分类业务逻辑:统计所有(功能模块分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加功能模块分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddModuleCatetory(ModuleCatetory value,out string msg)
		{
			try
            {
                return HandlerFactory.ModuleCatetoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块分类业务逻辑:添加实体(功能模块分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除功能模块分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteModuleCatetory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ModuleCatetoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块分类业务逻辑:删除实体(功能模块分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存功能模块分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveModuleCatetory(ModuleCatetory value, out string msg)
		{
			try
            {
                return HandlerFactory.ModuleCatetoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块分类业务逻辑:保存实体(功能模块分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录功能模块分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<ModuleCatetory> AllModuleCatetorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleCatetoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用功能模块分类业务逻辑:获取所有实体(功能模块分类)失败";
                return this.HandleException<List<ModuleCatetory>>(message, ex);
            }
		}

		 
        public List<ModuleCatetory> QueryModuleCatetorys(string name,string description,int indexfrom,int indexto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<ModuleCatetory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件

                return HandlerFactory.ModuleCatetoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用功能模块分类业务逻辑:查询实体(功能模块分类)失败";
                return this.HandleException<List<ModuleCatetory>>(msg, ex);
            }
        } 
		
		 
        public List<ModuleCatetory> QueryPagedModuleCatetorys(string name,string description,int indexfrom,int indexto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ModuleCatetory>();
                var queryBuilder = QueryBuilder.Create<ModuleCatetory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件

                return HandlerFactory.ModuleCatetoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<ModuleCatetory>>("调用功能模块分类业务逻辑:查询实体(功能模块分类)失败", ex);
            }
        } 
 
        public List<ModuleCatetory> SearchModuleCatetorysByQueryModel(QueryModuleCatetoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<ModuleCatetory>();
                var queryBuilder = QueryBuilder.Create<ModuleCatetory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件

                return HandlerFactory.ModuleCatetoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用功能模块分类业务逻辑:通查询Model查询实体(功能模块分类)失败";
                return this.HandleException<List<ModuleCatetory>>(message, ex);
            }  
		} 

		 
        public List<ModuleCatetory> SearchPagedModuleCatetorysByQueryModel(QueryModuleCatetoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ModuleCatetory>();
                var queryBuilder = QueryBuilder.Create<ModuleCatetory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件

                return HandlerFactory.ModuleCatetoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<ModuleCatetory>>("调用功能模块分类业务逻辑:通过查询Model分页查询实体(功能模块分类)失败", ex);
            }  
		}

		#endregion 功能模块分类 
		   
		#region 功能模块与角色的关联

		/// <summary>
        /// 获取实体功能模块与角色的关联
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public ModuleWithRole GetModuleWithRole(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleWithRoleBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<ModuleWithRole>("调用功能模块与角色的关联业务逻辑:根据编号获取实体(功能模块与角色的关联)失败", ex);
            }
		} 

        /// <summary>
        /// 统计功能模块与角色的关联
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountModuleWithRole(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleWithRoleBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用功能模块与角色的关联业务逻辑:统计所有(功能模块与角色的关联)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加功能模块与角色的关联
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddModuleWithRole(ModuleWithRole value,out string msg)
		{
			try
            {
                return HandlerFactory.ModuleWithRoleBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块与角色的关联业务逻辑:添加实体(功能模块与角色的关联)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除功能模块与角色的关联
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteModuleWithRole(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.ModuleWithRoleBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块与角色的关联业务逻辑:删除实体(功能模块与角色的关联)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存功能模块与角色的关联
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveModuleWithRole(ModuleWithRole value, out string msg)
		{
			try
            {
                return HandlerFactory.ModuleWithRoleBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用功能模块与角色的关联业务逻辑:保存实体(功能模块与角色的关联)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录功能模块与角色的关联
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<ModuleWithRole> AllModuleWithRoles(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.ModuleWithRoleBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用功能模块与角色的关联业务逻辑:获取所有实体(功能模块与角色的关联)失败";
                return this.HandleException<List<ModuleWithRole>>(message, ex);
            }
		}

		 
        public List<ModuleWithRole> QueryModuleWithRoles(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<ModuleWithRole>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.ModuleWithRoleBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用功能模块与角色的关联业务逻辑:查询实体(功能模块与角色的关联)失败";
                return this.HandleException<List<ModuleWithRole>>(msg, ex);
            }
        } 
		
		 
        public List<ModuleWithRole> QueryPagedModuleWithRoles(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ModuleWithRole>();
                var queryBuilder = QueryBuilder.Create<ModuleWithRole>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.ModuleWithRoleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<ModuleWithRole>>("调用功能模块与角色的关联业务逻辑:查询实体(功能模块与角色的关联)失败", ex);
            }
        } 
 
        public List<ModuleWithRole> SearchModuleWithRolesByQueryModel(QueryModuleWithRoleModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<ModuleWithRole>();
                var queryBuilder = QueryBuilder.Create<ModuleWithRole>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ModuleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ModuleId, qModel.ModuleId);
                }
                if(qModel.RoleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RoleId, qModel.RoleId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ModuleWithRoleBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用功能模块与角色的关联业务逻辑:通查询Model查询实体(功能模块与角色的关联)失败";
                return this.HandleException<List<ModuleWithRole>>(message, ex);
            }  
		} 

		 
        public List<ModuleWithRole> SearchPagedModuleWithRolesByQueryModel(QueryModuleWithRoleModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<ModuleWithRole>();
                var queryBuilder = QueryBuilder.Create<ModuleWithRole>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ModuleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ModuleId, qModel.ModuleId);
                }
                if(qModel.RoleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RoleId, qModel.RoleId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.ModuleWithRoleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<ModuleWithRole>>("调用功能模块与角色的关联业务逻辑:通过查询Model分页查询实体(功能模块与角色的关联)失败", ex);
            }  
		}

		#endregion 功能模块与角色的关联 
		   
		#region 文件

		/// <summary>
        /// 获取实体文件
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PharmacyFile GetPharmacyFile(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PharmacyFileBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PharmacyFile>("调用文件业务逻辑:根据编号获取实体(文件)失败", ex);
            }
		} 

        /// <summary>
        /// 统计文件
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPharmacyFile(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PharmacyFileBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用文件业务逻辑:统计所有(文件)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加文件
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPharmacyFile(PharmacyFile value,out string msg)
		{
			try
            {
                return HandlerFactory.PharmacyFileBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用文件业务逻辑:添加实体(文件)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除文件
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePharmacyFile(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PharmacyFileBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用文件业务逻辑:删除实体(文件)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存文件
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePharmacyFile(PharmacyFile value, out string msg)
		{
			try
            {
                return HandlerFactory.PharmacyFileBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用文件业务逻辑:保存实体(文件)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录文件
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PharmacyFile> AllPharmacyFiles(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PharmacyFileBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用文件业务逻辑:获取所有实体(文件)失败";
                return this.HandleException<List<PharmacyFile>>(message, ex);
            }
		}

		 
        public List<PharmacyFile> QueryPharmacyFiles(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string filename,string extension,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PharmacyFile>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(filename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FileName, filename);
                }
                if(!string.IsNullOrEmpty(extension)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Extension, extension);
                }

                return HandlerFactory.PharmacyFileBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用文件业务逻辑:查询实体(文件)失败";
                return this.HandleException<List<PharmacyFile>>(msg, ex);
            }
        } 
		
		 
        public List<PharmacyFile> QueryPagedPharmacyFiles(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string filename,string extension,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PharmacyFile>();
                var queryBuilder = QueryBuilder.Create<PharmacyFile>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(filename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FileName, filename);
                }
                if(!string.IsNullOrEmpty(extension)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Extension, extension);
                }

                return HandlerFactory.PharmacyFileBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PharmacyFile>>("调用文件业务逻辑:查询实体(文件)失败", ex);
            }
        } 
 
        public List<PharmacyFile> SearchPharmacyFilesByQueryModel(QueryPharmacyFileModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PharmacyFile>();
                var queryBuilder = QueryBuilder.Create<PharmacyFile>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FileName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FileName, qModel.FileName);
                }
                if(!string.IsNullOrEmpty(qModel.Extension)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Extension, qModel.Extension);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PharmacyFileBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用文件业务逻辑:通查询Model查询实体(文件)失败";
                return this.HandleException<List<PharmacyFile>>(message, ex);
            }  
		} 

		 
        public List<PharmacyFile> SearchPagedPharmacyFilesByQueryModel(QueryPharmacyFileModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PharmacyFile>();
                var queryBuilder = QueryBuilder.Create<PharmacyFile>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FileName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FileName, qModel.FileName);
                }
                if(!string.IsNullOrEmpty(qModel.Extension)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Extension, qModel.Extension);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PharmacyFileBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PharmacyFile>>("调用文件业务逻辑:通过查询Model分页查询实体(文件)失败", ex);
            }  
		}

		#endregion 文件 
		   
		#region 采购合同

		/// <summary>
        /// 获取实体采购合同
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseAgreement GetPurchaseAgreement(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseAgreementBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseAgreement>("调用采购合同业务逻辑:根据编号获取实体(采购合同)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购合同
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseAgreement(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseAgreementBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购合同业务逻辑:统计所有(采购合同)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购合同
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseAgreement(PurchaseAgreement value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseAgreementBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购合同业务逻辑:添加实体(采购合同)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购合同
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseAgreement(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseAgreementBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购合同业务逻辑:删除实体(采购合同)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购合同
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseAgreement(PurchaseAgreement value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseAgreementBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购合同业务逻辑:保存实体(采购合同)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购合同
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseAgreement> AllPurchaseAgreements(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseAgreementBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购合同业务逻辑:获取所有实体(采购合同)失败";
                return this.HandleException<List<PurchaseAgreement>>(message, ex);
            }
		}

		 
        public List<PurchaseAgreement> QueryPurchaseAgreements(out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseAgreement>(); 

                return HandlerFactory.PurchaseAgreementBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购合同业务逻辑:查询实体(采购合同)失败";
                return this.HandleException<List<PurchaseAgreement>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseAgreement> QueryPagedPurchaseAgreements(int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseAgreement>();
                var queryBuilder = QueryBuilder.Create<PurchaseAgreement>(); 

                return HandlerFactory.PurchaseAgreementBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseAgreement>>("调用采购合同业务逻辑:查询实体(采购合同)失败", ex);
            }
        } 
 
        public List<PurchaseAgreement> SearchPurchaseAgreementsByQueryModel(QueryPurchaseAgreementModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseAgreement>();
                var queryBuilder = QueryBuilder.Create<PurchaseAgreement>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PurchaseAgreementBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购合同业务逻辑:通查询Model查询实体(采购合同)失败";
                return this.HandleException<List<PurchaseAgreement>>(message, ex);
            }  
		} 

		 
        public List<PurchaseAgreement> SearchPagedPurchaseAgreementsByQueryModel(QueryPurchaseAgreementModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseAgreement>();
                var queryBuilder = QueryBuilder.Create<PurchaseAgreement>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PurchaseAgreementBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseAgreement>>("调用采购合同业务逻辑:通过查询Model分页查询实体(采购合同)失败", ex);
            }  
		}

		#endregion 采购合同 
		   
		#region 验收记录

		/// <summary>
        /// 获取实体验收记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseCheckingOrder GetPurchaseCheckingOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseCheckingOrder>("调用验收记录业务逻辑:根据编号获取实体(验收记录)失败", ex);
            }
		} 

        /// <summary>
        /// 统计验收记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseCheckingOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用验收记录业务逻辑:统计所有(验收记录)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加验收记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseCheckingOrder(PurchaseCheckingOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用验收记录业务逻辑:添加实体(验收记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除验收记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseCheckingOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用验收记录业务逻辑:删除实体(验收记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存验收记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseCheckingOrder(PurchaseCheckingOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用验收记录业务逻辑:保存实体(验收记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录验收记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseCheckingOrder> AllPurchaseCheckingOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用验收记录业务逻辑:获取所有实体(验收记录)失败";
                return this.HandleException<List<PurchaseCheckingOrder>>(message, ex);
            }
		}

		 
        public List<PurchaseCheckingOrder> QueryPurchaseCheckingOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,int orderstatusvaluefrom,int orderstatusvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From>To不参与条件
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From>To不参与条件

                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用验收记录业务逻辑:查询实体(验收记录)失败";
                return this.HandleException<List<PurchaseCheckingOrder>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseCheckingOrder> QueryPagedPurchaseCheckingOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,int orderstatusvaluefrom,int orderstatusvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseCheckingOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From<To不参与条件
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From<To不参与条件

                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseCheckingOrder>>("调用验收记录业务逻辑:查询实体(验收记录)失败", ex);
            }
        } 
 
        public List<PurchaseCheckingOrder> SearchPurchaseCheckingOrdersByQueryModel(QueryPurchaseCheckingOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseCheckingOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用验收记录业务逻辑:通查询Model查询实体(验收记录)失败";
                return this.HandleException<List<PurchaseCheckingOrder>>(message, ex);
            }  
		} 

		 
        public List<PurchaseCheckingOrder> SearchPagedPurchaseCheckingOrdersByQueryModel(QueryPurchaseCheckingOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseCheckingOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseCheckingOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseCheckingOrder>>("调用验收记录业务逻辑:通过查询Model分页查询实体(验收记录)失败", ex);
            }  
		}

		#endregion 验收记录 
		   
		#region 采购到货验收

		/// <summary>
        /// 获取实体采购到货验收
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseCheckingOrderDetail GetPurchaseCheckingOrderDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseCheckingOrderDetail>("调用采购到货验收业务逻辑:根据编号获取实体(采购到货验收)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购到货验收
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseCheckingOrderDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购到货验收业务逻辑:统计所有(采购到货验收)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购到货验收
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseCheckingOrderDetail(PurchaseCheckingOrderDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购到货验收业务逻辑:添加实体(采购到货验收)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购到货验收
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseCheckingOrderDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购到货验收业务逻辑:删除实体(采购到货验收)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购到货验收
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseCheckingOrderDetail(PurchaseCheckingOrderDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购到货验收业务逻辑:保存实体(采购到货验收)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购到货验收
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseCheckingOrderDetail> AllPurchaseCheckingOrderDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购到货验收业务逻辑:获取所有实体(采购到货验收)失败";
                return this.HandleException<List<PurchaseCheckingOrderDetail>>(message, ex);
            }
		}

		 
        public List<PurchaseCheckingOrderDetail> QueryPurchaseCheckingOrderDetails(decimal purchasepricefrom,decimal purchasepriceto,int arrivalamountfrom,int arrivalamountto,DateTime arrivaldatetimefrom,DateTime arrivaldatetimeto,int qualifiedamountfrom,int qualifiedamountto,int checkresultfrom,int checkresultto,string decription,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrderDetail>(); 
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From>To不参与条件
                if(arrivalamountto==arrivalamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, arrivalamountfrom);
                }
                else if(arrivalamountto>arrivalamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, arrivalamountfrom,arrivalamountto);
                }//From>To不参与条件
                if(arrivaldatetimeto!=default(DateTime)&&arrivaldatetimefrom!=default(DateTime)){//From==To执行==
                if(arrivaldatetimeto==arrivaldatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, arrivaldatetimefrom);
                }
                else if(arrivaldatetimeto>arrivaldatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, arrivaldatetimefrom,arrivaldatetimeto);
                }}//From>To不参与条件
                if(qualifiedamountto==qualifiedamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualifiedAmount, qualifiedamountfrom);
                }
                else if(qualifiedamountto>qualifiedamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualifiedAmount, qualifiedamountfrom,qualifiedamountto);
                }//From>To不参与条件
                if(checkresultto==checkresultfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, checkresultfrom);
                }
                else if(checkresultto>checkresultfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CheckResult, checkresultfrom,checkresultto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件

                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购到货验收业务逻辑:查询实体(采购到货验收)失败";
                return this.HandleException<List<PurchaseCheckingOrderDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseCheckingOrderDetail> QueryPagedPurchaseCheckingOrderDetails(decimal purchasepricefrom,decimal purchasepriceto,int arrivalamountfrom,int arrivalamountto,DateTime arrivaldatetimefrom,DateTime arrivaldatetimeto,int qualifiedamountfrom,int qualifiedamountto,int checkresultfrom,int checkresultto,string decription,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseCheckingOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrderDetail>(); 
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From<To不参与条件
                if(arrivalamountto==arrivalamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, arrivalamountfrom);
                }
                else if(arrivalamountto>arrivalamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, arrivalamountfrom,arrivalamountto);
                }//From<To不参与条件
                if(arrivaldatetimeto!=default(DateTime)&&arrivaldatetimefrom!=default(DateTime)){//From==To执行==
                if(arrivaldatetimeto==arrivaldatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, arrivaldatetimefrom);
                }
                else if(arrivaldatetimeto>arrivaldatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, arrivaldatetimefrom,arrivaldatetimeto);
                }}//From<To不参与条件
                if(qualifiedamountto==qualifiedamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualifiedAmount, qualifiedamountfrom);
                }
                else if(qualifiedamountto>qualifiedamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.QualifiedAmount, qualifiedamountfrom,qualifiedamountto);
                }//From<To不参与条件
                if(checkresultto==checkresultfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, checkresultfrom);
                }
                else if(checkresultto>checkresultfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CheckResult, checkresultfrom,checkresultto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件

                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseCheckingOrderDetail>>("调用采购到货验收业务逻辑:查询实体(采购到货验收)失败", ex);
            }
        } 
 
        public List<PurchaseCheckingOrderDetail> SearchPurchaseCheckingOrderDetailsByQueryModel(QueryPurchaseCheckingOrderDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseCheckingOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrderDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.ArrivalAmountTo==qModel.ArrivalAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, qModel.ArrivalAmountFrom);
                }
                else if(qModel.ArrivalAmountTo>qModel.ArrivalAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, qModel.ArrivalAmountFrom,qModel.ArrivalAmountTo);
                }//From>To不参与条件
                if(qModel.ArrivalDateTimeTo!=default(DateTime)&&qModel.ArrivalDateTimeFrom!=default(DateTime)){
                if(qModel.ArrivalDateTimeTo==qModel.ArrivalDateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom);
                }
                else if(qModel.ArrivalDateTimeTo>qModel.ArrivalDateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom,qModel.ArrivalDateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QualifiedAmountTo==qModel.QualifiedAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualifiedAmount, qModel.QualifiedAmountFrom);
                }
                else if(qModel.QualifiedAmountTo>qModel.QualifiedAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualifiedAmount, qModel.QualifiedAmountFrom,qModel.QualifiedAmountTo);
                }//From>To不参与条件
                if(qModel.CheckResultTo==qModel.CheckResultFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, qModel.CheckResultFrom);
                }
                else if(qModel.CheckResultTo>qModel.CheckResultFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CheckResult, qModel.CheckResultFrom,qModel.CheckResultTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.PurchaseCheckingOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseCheckingOrderId, qModel.PurchaseCheckingOrderId);
                }

                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购到货验收业务逻辑:通查询Model查询实体(采购到货验收)失败";
                return this.HandleException<List<PurchaseCheckingOrderDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchaseCheckingOrderDetail> SearchPagedPurchaseCheckingOrderDetailsByQueryModel(QueryPurchaseCheckingOrderDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseCheckingOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseCheckingOrderDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.ArrivalAmountTo==qModel.ArrivalAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, qModel.ArrivalAmountFrom);
                }
                else if(qModel.ArrivalAmountTo>qModel.ArrivalAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, qModel.ArrivalAmountFrom,qModel.ArrivalAmountTo);
                }//From>To不参与条件
                if(qModel.ArrivalDateTimeTo!=default(DateTime)&&qModel.ArrivalDateTimeFrom!=default(DateTime)){
                if(qModel.ArrivalDateTimeTo==qModel.ArrivalDateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom);
                }
                else if(qModel.ArrivalDateTimeTo>qModel.ArrivalDateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom,qModel.ArrivalDateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QualifiedAmountTo==qModel.QualifiedAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualifiedAmount, qModel.QualifiedAmountFrom);
                }
                else if(qModel.QualifiedAmountTo>qModel.QualifiedAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualifiedAmount, qModel.QualifiedAmountFrom,qModel.QualifiedAmountTo);
                }//From>To不参与条件
                if(qModel.CheckResultTo==qModel.CheckResultFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, qModel.CheckResultFrom);
                }
                else if(qModel.CheckResultTo>qModel.CheckResultFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CheckResult, qModel.CheckResultFrom,qModel.CheckResultTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.PurchaseCheckingOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseCheckingOrderId, qModel.PurchaseCheckingOrderId);
                }

                return HandlerFactory.PurchaseCheckingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseCheckingOrderDetail>>("调用采购到货验收业务逻辑:通过查询Model分页查询实体(采购到货验收)失败", ex);
            }  
		}

		#endregion 采购到货验收 
		   
		#region 库存记录

		/// <summary>
        /// 获取实体库存记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseInInventeryOrder GetPurchaseInInventeryOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseInInventeryOrder>("调用库存记录业务逻辑:根据编号获取实体(库存记录)失败", ex);
            }
		} 

        /// <summary>
        /// 统计库存记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseInInventeryOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用库存记录业务逻辑:统计所有(库存记录)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加库存记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseInInventeryOrder(PurchaseInInventeryOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存记录业务逻辑:添加实体(库存记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除库存记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseInInventeryOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存记录业务逻辑:删除实体(库存记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存库存记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseInInventeryOrder(PurchaseInInventeryOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存记录业务逻辑:保存实体(库存记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录库存记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseInInventeryOrder> AllPurchaseInInventeryOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用库存记录业务逻辑:获取所有实体(库存记录)失败";
                return this.HandleException<List<PurchaseInInventeryOrder>>(message, ex);
            }
		}

		 
        public List<PurchaseInInventeryOrder> QueryPurchaseInInventeryOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,int orderstatusvaluefrom,int orderstatusvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From>To不参与条件
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From>To不参与条件

                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用库存记录业务逻辑:查询实体(库存记录)失败";
                return this.HandleException<List<PurchaseInInventeryOrder>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseInInventeryOrder> QueryPagedPurchaseInInventeryOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,int orderstatusvaluefrom,int orderstatusvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseInInventeryOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From<To不参与条件
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From<To不参与条件

                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseInInventeryOrder>>("调用库存记录业务逻辑:查询实体(库存记录)失败", ex);
            }
        } 
 
        public List<PurchaseInInventeryOrder> SearchPurchaseInInventeryOrdersByQueryModel(QueryPurchaseInInventeryOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseInInventeryOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用库存记录业务逻辑:通查询Model查询实体(库存记录)失败";
                return this.HandleException<List<PurchaseInInventeryOrder>>(message, ex);
            }  
		} 

		 
        public List<PurchaseInInventeryOrder> SearchPagedPurchaseInInventeryOrdersByQueryModel(QueryPurchaseInInventeryOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseInInventeryOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseInInventeryOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseInInventeryOrder>>("调用库存记录业务逻辑:通过查询Model分页查询实体(库存记录)失败", ex);
            }  
		}

		#endregion 库存记录 
		   
		#region 库存记录详细

		/// <summary>
        /// 获取实体库存记录详细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseInInventeryOrderDetail GetPurchaseInInventeryOrderDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseInInventeryOrderDetail>("调用库存记录详细业务逻辑:根据编号获取实体(库存记录详细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计库存记录详细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseInInventeryOrderDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用库存记录详细业务逻辑:统计所有(库存记录详细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加库存记录详细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseInInventeryOrderDetail(PurchaseInInventeryOrderDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存记录详细业务逻辑:添加实体(库存记录详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除库存记录详细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseInInventeryOrderDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存记录详细业务逻辑:删除实体(库存记录详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存库存记录详细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseInInventeryOrderDetail(PurchaseInInventeryOrderDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库存记录详细业务逻辑:保存实体(库存记录详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录库存记录详细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseInInventeryOrderDetail> AllPurchaseInInventeryOrderDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用库存记录详细业务逻辑:获取所有实体(库存记录详细)失败";
                return this.HandleException<List<PurchaseInInventeryOrderDetail>>(message, ex);
            }
		}

		 
        public List<PurchaseInInventeryOrderDetail> QueryPurchaseInInventeryOrderDetails(decimal purchasepricefrom,decimal purchasepriceto,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,int arrivalamountfrom,int arrivalamountto,DateTime arrivaldatetimefrom,DateTime arrivaldatetimeto,string decription,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrderDetail>(); 
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(arrivalamountto==arrivalamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, arrivalamountfrom);
                }
                else if(arrivalamountto>arrivalamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, arrivalamountfrom,arrivalamountto);
                }//From>To不参与条件
                if(arrivaldatetimeto!=default(DateTime)&&arrivaldatetimefrom!=default(DateTime)){//From==To执行==
                if(arrivaldatetimeto==arrivaldatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, arrivaldatetimefrom);
                }
                else if(arrivaldatetimeto>arrivaldatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, arrivaldatetimefrom,arrivaldatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }

                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用库存记录详细业务逻辑:查询实体(库存记录详细)失败";
                return this.HandleException<List<PurchaseInInventeryOrderDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseInInventeryOrderDetail> QueryPagedPurchaseInInventeryOrderDetails(decimal purchasepricefrom,decimal purchasepriceto,string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,int arrivalamountfrom,int arrivalamountto,DateTime arrivaldatetimefrom,DateTime arrivaldatetimeto,string decription,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseInInventeryOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrderDetail>(); 
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(arrivalamountto==arrivalamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, arrivalamountfrom);
                }
                else if(arrivalamountto>arrivalamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, arrivalamountfrom,arrivalamountto);
                }//From<To不参与条件
                if(arrivaldatetimeto!=default(DateTime)&&arrivaldatetimefrom!=default(DateTime)){//From==To执行==
                if(arrivaldatetimeto==arrivaldatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, arrivaldatetimefrom);
                }
                else if(arrivaldatetimeto>arrivaldatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, arrivaldatetimefrom,arrivaldatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }

                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseInInventeryOrderDetail>>("调用库存记录详细业务逻辑:查询实体(库存记录详细)失败", ex);
            }
        } 
 
        public List<PurchaseInInventeryOrderDetail> SearchPurchaseInInventeryOrderDetailsByQueryModel(QueryPurchaseInInventeryOrderDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseInInventeryOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrderDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.ArrivalAmountTo==qModel.ArrivalAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, qModel.ArrivalAmountFrom);
                }
                else if(qModel.ArrivalAmountTo>qModel.ArrivalAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, qModel.ArrivalAmountFrom,qModel.ArrivalAmountTo);
                }//From>To不参与条件
                if(qModel.ArrivalDateTimeTo!=default(DateTime)&&qModel.ArrivalDateTimeFrom!=default(DateTime)){
                if(qModel.ArrivalDateTimeTo==qModel.ArrivalDateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom);
                }
                else if(qModel.ArrivalDateTimeTo>qModel.ArrivalDateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom,qModel.ArrivalDateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.WarehouseZoneId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.WarehouseZoneId, qModel.WarehouseZoneId);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.PurchaseInInventeryOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseInInventeryOrderId, qModel.PurchaseInInventeryOrderId);
                }

                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用库存记录详细业务逻辑:通查询Model查询实体(库存记录详细)失败";
                return this.HandleException<List<PurchaseInInventeryOrderDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchaseInInventeryOrderDetail> SearchPagedPurchaseInInventeryOrderDetailsByQueryModel(QueryPurchaseInInventeryOrderDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseInInventeryOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseInInventeryOrderDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.ArrivalAmountTo==qModel.ArrivalAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalAmount, qModel.ArrivalAmountFrom);
                }
                else if(qModel.ArrivalAmountTo>qModel.ArrivalAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalAmount, qModel.ArrivalAmountFrom,qModel.ArrivalAmountTo);
                }//From>To不参与条件
                if(qModel.ArrivalDateTimeTo!=default(DateTime)&&qModel.ArrivalDateTimeFrom!=default(DateTime)){
                if(qModel.ArrivalDateTimeTo==qModel.ArrivalDateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom);
                }
                else if(qModel.ArrivalDateTimeTo>qModel.ArrivalDateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ArrivalDateTime, qModel.ArrivalDateTimeFrom,qModel.ArrivalDateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.WarehouseZoneId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.WarehouseZoneId, qModel.WarehouseZoneId);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.PurchaseInInventeryOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseInInventeryOrderId, qModel.PurchaseInInventeryOrderId);
                }

                return HandlerFactory.PurchaseInInventeryOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseInInventeryOrderDetail>>("调用库存记录详细业务逻辑:通过查询Model分页查询实体(库存记录详细)失败", ex);
            }  
		}

		#endregion 库存记录详细 
		   
		#region 管理要求分类

		/// <summary>
        /// 获取实体管理要求分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseManageCategory GetPurchaseManageCategory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseManageCategory>("调用管理要求分类业务逻辑:根据编号获取实体(管理要求分类)失败", ex);
            }
		} 

        /// <summary>
        /// 统计管理要求分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseManageCategory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用管理要求分类业务逻辑:统计所有(管理要求分类)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加管理要求分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseManageCategory(PurchaseManageCategory value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用管理要求分类业务逻辑:添加实体(管理要求分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除管理要求分类
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseManageCategory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用管理要求分类业务逻辑:删除实体(管理要求分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存管理要求分类
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseManageCategory(PurchaseManageCategory value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用管理要求分类业务逻辑:保存实体(管理要求分类)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录管理要求分类
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseManageCategory> AllPurchaseManageCategorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用管理要求分类业务逻辑:获取所有实体(管理要求分类)失败";
                return this.HandleException<List<PurchaseManageCategory>>(message, ex);
            }
		}

		 
        public List<PurchaseManageCategory> QueryPurchaseManageCategorys(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用管理要求分类业务逻辑:查询实体(管理要求分类)失败";
                return this.HandleException<List<PurchaseManageCategory>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseManageCategory> QueryPagedPurchaseManageCategorys(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseManageCategory>();
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseManageCategory>>("调用管理要求分类业务逻辑:查询实体(管理要求分类)失败", ex);
            }
        } 
 
        public List<PurchaseManageCategory> SearchPurchaseManageCategorysByQueryModel(QueryPurchaseManageCategoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseManageCategory>();
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用管理要求分类业务逻辑:通查询Model查询实体(管理要求分类)失败";
                return this.HandleException<List<PurchaseManageCategory>>(message, ex);
            }  
		} 

		 
        public List<PurchaseManageCategory> SearchPagedPurchaseManageCategorysByQueryModel(QueryPurchaseManageCategoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseManageCategory>();
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PurchaseManageCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseManageCategory>>("调用管理要求分类业务逻辑:通过查询Model分页查询实体(管理要求分类)失败", ex);
            }  
		}

		#endregion 管理要求分类 
		   
		#region 管理要求分类详细

		/// <summary>
        /// 获取实体管理要求分类详细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseManageCategoryDetail GetPurchaseManageCategoryDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseManageCategoryDetail>("调用管理要求分类详细业务逻辑:根据编号获取实体(管理要求分类详细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计管理要求分类详细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseManageCategoryDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用管理要求分类详细业务逻辑:统计所有(管理要求分类详细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加管理要求分类详细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseManageCategoryDetail(PurchaseManageCategoryDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用管理要求分类详细业务逻辑:添加实体(管理要求分类详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除管理要求分类详细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseManageCategoryDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用管理要求分类详细业务逻辑:删除实体(管理要求分类详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存管理要求分类详细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseManageCategoryDetail(PurchaseManageCategoryDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用管理要求分类详细业务逻辑:保存实体(管理要求分类详细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录管理要求分类详细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseManageCategoryDetail> AllPurchaseManageCategoryDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用管理要求分类详细业务逻辑:获取所有实体(管理要求分类详细)失败";
                return this.HandleException<List<PurchaseManageCategoryDetail>>(message, ex);
            }
		}

		 
        public List<PurchaseManageCategoryDetail> QueryPurchaseManageCategoryDetails(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategoryDetail>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用管理要求分类详细业务逻辑:查询实体(管理要求分类详细)失败";
                return this.HandleException<List<PurchaseManageCategoryDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseManageCategoryDetail> QueryPagedPurchaseManageCategoryDetails(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseManageCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategoryDetail>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseManageCategoryDetail>>("调用管理要求分类详细业务逻辑:查询实体(管理要求分类详细)失败", ex);
            }
        } 
 
        public List<PurchaseManageCategoryDetail> SearchPurchaseManageCategoryDetailsByQueryModel(QueryPurchaseManageCategoryDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseManageCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategoryDetail>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.PurchaseManageCategoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseManageCategoryId, qModel.PurchaseManageCategoryId);
                }

                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用管理要求分类详细业务逻辑:通查询Model查询实体(管理要求分类详细)失败";
                return this.HandleException<List<PurchaseManageCategoryDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchaseManageCategoryDetail> SearchPagedPurchaseManageCategoryDetailsByQueryModel(QueryPurchaseManageCategoryDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseManageCategoryDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseManageCategoryDetail>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.PurchaseManageCategoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseManageCategoryId, qModel.PurchaseManageCategoryId);
                }

                return HandlerFactory.PurchaseManageCategoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseManageCategoryDetail>>("调用管理要求分类详细业务逻辑:通过查询Model分页查询实体(管理要求分类详细)失败", ex);
            }  
		}

		#endregion 管理要求分类详细 
		   
		#region 采购单

		/// <summary>
        /// 获取实体采购单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseOrder GetPurchaseOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseOrder>("调用采购单业务逻辑:根据编号获取实体(采购单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购单业务逻辑:统计所有(采购单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseOrder(PurchaseOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购单业务逻辑:添加实体(采购单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购单业务逻辑:删除实体(采购单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseOrder(PurchaseOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购单业务逻辑:保存实体(采购单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseOrder> AllPurchaseOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购单业务逻辑:获取所有实体(采购单)失败";
                return this.HandleException<List<PurchaseOrder>>(message, ex);
            }
		}

		 
        public List<PurchaseOrder> QueryPurchaseOrders(string documentnumber,decimal totalmoneyfrom,decimal totalmoneyto,decimal paymentforgoodsmoneyfrom,decimal paymentforgoodsmoneyto,decimal amountoftaxmoneyfrom,decimal amountoftaxmoneyto,int invaliddaysfrom,int invaliddaysto,DateTime purchaseddatefrom,DateTime purchaseddateto,DateTime createtimefrom,DateTime createtimeto,string decription,string approvaldecription,string amountapprovaldecription,int orderstatusvaluefrom,int orderstatusvalueto,DateTime updatetimefrom,DateTime updatetimeto,bool directmarketing,bool querydirectmarketing,string shippingmethod,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From>To不参与条件
                if(paymentforgoodsmoneyto==paymentforgoodsmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentForGoodsMoney, paymentforgoodsmoneyfrom);
                }
                else if(paymentforgoodsmoneyto>paymentforgoodsmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentForGoodsMoney, paymentforgoodsmoneyfrom,paymentforgoodsmoneyto);
                }//From>To不参与条件
                if(amountoftaxmoneyto==amountoftaxmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTaxMoney, amountoftaxmoneyfrom);
                }
                else if(amountoftaxmoneyto>amountoftaxmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.AmountOfTaxMoney, amountoftaxmoneyfrom,amountoftaxmoneyto);
                }//From>To不参与条件
                if(invaliddaysto==invaliddaysfrom){//From==To执行==
                    queryBuilder.Equals(a => a.InValidDays, invaliddaysfrom);
                }
                else if(invaliddaysto>invaliddaysfrom){//From<To执行Between
                    queryBuilder.Between(a => a.InValidDays, invaliddaysfrom,invaliddaysto);
                }//From>To不参与条件
                if(purchaseddateto!=default(DateTime)&&purchaseddatefrom!=default(DateTime)){//From==To执行==
                if(purchaseddateto==purchaseddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasedDate, purchaseddatefrom);
                }
                else if(purchaseddateto>purchaseddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasedDate, purchaseddatefrom,purchaseddateto);
                }}//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(approvaldecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, approvaldecription);
                }
                if(!string.IsNullOrEmpty(amountapprovaldecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AmountApprovalDecription, amountapprovaldecription);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(querydirectmarketing){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.DirectMarketing, directmarketing);
}
                if(!string.IsNullOrEmpty(shippingmethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingMethod, shippingmethod);
                }

                return HandlerFactory.PurchaseOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购单业务逻辑:查询实体(采购单)失败";
                return this.HandleException<List<PurchaseOrder>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseOrder> QueryPagedPurchaseOrders(string documentnumber,decimal totalmoneyfrom,decimal totalmoneyto,decimal paymentforgoodsmoneyfrom,decimal paymentforgoodsmoneyto,decimal amountoftaxmoneyfrom,decimal amountoftaxmoneyto,int invaliddaysfrom,int invaliddaysto,DateTime purchaseddatefrom,DateTime purchaseddateto,DateTime createtimefrom,DateTime createtimeto,string decription,string approvaldecription,string amountapprovaldecription,int orderstatusvaluefrom,int orderstatusvalueto,DateTime updatetimefrom,DateTime updatetimeto,bool directmarketing,bool querydirectmarketing,string shippingmethod,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From<To不参与条件
                if(paymentforgoodsmoneyto==paymentforgoodsmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentForGoodsMoney, paymentforgoodsmoneyfrom);
                }
                else if(paymentforgoodsmoneyto>paymentforgoodsmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.PaymentForGoodsMoney, paymentforgoodsmoneyfrom,paymentforgoodsmoneyto);
                }//From<To不参与条件
                if(amountoftaxmoneyto==amountoftaxmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTaxMoney, amountoftaxmoneyfrom);
                }
                else if(amountoftaxmoneyto>amountoftaxmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.AmountOfTaxMoney, amountoftaxmoneyfrom,amountoftaxmoneyto);
                }//From<To不参与条件
                if(invaliddaysto==invaliddaysfrom){//From==To执行==
                    queryBuilder.Equals(a => a.InValidDays, invaliddaysfrom);
                }
                else if(invaliddaysto>invaliddaysfrom){//From>To执行Between
                    queryBuilder.Between(a => a.InValidDays, invaliddaysfrom,invaliddaysto);
                }//From<To不参与条件
                if(purchaseddateto!=default(DateTime)&&purchaseddatefrom!=default(DateTime)){//From==To执行==
                if(purchaseddateto==purchaseddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasedDate, purchaseddatefrom);
                }
                else if(purchaseddateto>purchaseddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasedDate, purchaseddatefrom,purchaseddateto);
                }}//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(approvaldecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, approvaldecription);
                }
                if(!string.IsNullOrEmpty(amountapprovaldecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AmountApprovalDecription, amountapprovaldecription);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(querydirectmarketing){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.DirectMarketing, directmarketing);
}
                if(!string.IsNullOrEmpty(shippingmethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingMethod, shippingmethod);
                }

                return HandlerFactory.PurchaseOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseOrder>>("调用采购单业务逻辑:查询实体(采购单)失败", ex);
            }
        } 
 
        public List<PurchaseOrder> SearchPurchaseOrdersByQueryModel(QueryPurchaseOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.PaymentForGoodsMoneyTo==qModel.PaymentForGoodsMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentForGoodsMoney, qModel.PaymentForGoodsMoneyFrom);
                }
                else if(qModel.PaymentForGoodsMoneyTo>qModel.PaymentForGoodsMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentForGoodsMoney, qModel.PaymentForGoodsMoneyFrom,qModel.PaymentForGoodsMoneyTo);
                }//From>To不参与条件
                if(qModel.AmountOfTaxMoneyTo==qModel.AmountOfTaxMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTaxMoney, qModel.AmountOfTaxMoneyFrom);
                }
                else if(qModel.AmountOfTaxMoneyTo>qModel.AmountOfTaxMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AmountOfTaxMoney, qModel.AmountOfTaxMoneyFrom,qModel.AmountOfTaxMoneyTo);
                }//From>To不参与条件
                if(qModel.InValidDaysTo==qModel.InValidDaysFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InValidDays, qModel.InValidDaysFrom);
                }
                else if(qModel.InValidDaysTo>qModel.InValidDaysFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InValidDays, qModel.InValidDaysFrom,qModel.InValidDaysTo);
                }//From>To不参与条件
                if(qModel.PurchasedDateTo!=default(DateTime)&&qModel.PurchasedDateFrom!=default(DateTime)){
                if(qModel.PurchasedDateTo==qModel.PurchasedDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasedDate, qModel.PurchasedDateFrom);
                }
                else if(qModel.PurchasedDateTo>qModel.PurchasedDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasedDate, qModel.PurchasedDateFrom,qModel.PurchasedDateTo);
                }//From>To不参与条件
                }
                if(qModel.SupplyUnitAccountExecutiveId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SupplyUnitAccountExecutiveId, qModel.SupplyUnitAccountExecutiveId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(!string.IsNullOrEmpty(qModel.ApprovalDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, qModel.ApprovalDecription);
                }
                if(qModel.AmountApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AmountApprovalUserId, qModel.AmountApprovalUserId);
                }
                if(!string.IsNullOrEmpty(qModel.AmountApprovalDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AmountApprovalDecription, qModel.AmountApprovalDecription);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryDirectMarketing){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.DirectMarketing, qModel.DirectMarketing);
}
                if(!string.IsNullOrEmpty(qModel.ShippingMethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingMethod, qModel.ShippingMethod);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.SupplyUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SupplyUnitId, qModel.SupplyUnitId);
                }
                if(qModel.ReleatedPurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReleatedPurchaseOrderId, qModel.ReleatedPurchaseOrderId);
                }

                return HandlerFactory.PurchaseOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购单业务逻辑:通查询Model查询实体(采购单)失败";
                return this.HandleException<List<PurchaseOrder>>(message, ex);
            }  
		} 

		 
        public List<PurchaseOrder> SearchPagedPurchaseOrdersByQueryModel(QueryPurchaseOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.PaymentForGoodsMoneyTo==qModel.PaymentForGoodsMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PaymentForGoodsMoney, qModel.PaymentForGoodsMoneyFrom);
                }
                else if(qModel.PaymentForGoodsMoneyTo>qModel.PaymentForGoodsMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PaymentForGoodsMoney, qModel.PaymentForGoodsMoneyFrom,qModel.PaymentForGoodsMoneyTo);
                }//From>To不参与条件
                if(qModel.AmountOfTaxMoneyTo==qModel.AmountOfTaxMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTaxMoney, qModel.AmountOfTaxMoneyFrom);
                }
                else if(qModel.AmountOfTaxMoneyTo>qModel.AmountOfTaxMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AmountOfTaxMoney, qModel.AmountOfTaxMoneyFrom,qModel.AmountOfTaxMoneyTo);
                }//From>To不参与条件
                if(qModel.InValidDaysTo==qModel.InValidDaysFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InValidDays, qModel.InValidDaysFrom);
                }
                else if(qModel.InValidDaysTo>qModel.InValidDaysFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InValidDays, qModel.InValidDaysFrom,qModel.InValidDaysTo);
                }//From>To不参与条件
                if(qModel.PurchasedDateTo!=default(DateTime)&&qModel.PurchasedDateFrom!=default(DateTime)){
                if(qModel.PurchasedDateTo==qModel.PurchasedDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasedDate, qModel.PurchasedDateFrom);
                }
                else if(qModel.PurchasedDateTo>qModel.PurchasedDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasedDate, qModel.PurchasedDateFrom,qModel.PurchasedDateTo);
                }//From>To不参与条件
                }
                if(qModel.SupplyUnitAccountExecutiveId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SupplyUnitAccountExecutiveId, qModel.SupplyUnitAccountExecutiveId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(!string.IsNullOrEmpty(qModel.ApprovalDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ApprovalDecription, qModel.ApprovalDecription);
                }
                if(qModel.AmountApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AmountApprovalUserId, qModel.AmountApprovalUserId);
                }
                if(!string.IsNullOrEmpty(qModel.AmountApprovalDecription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.AmountApprovalDecription, qModel.AmountApprovalDecription);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryDirectMarketing){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.DirectMarketing, qModel.DirectMarketing);
}
                if(!string.IsNullOrEmpty(qModel.ShippingMethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingMethod, qModel.ShippingMethod);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.SupplyUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SupplyUnitId, qModel.SupplyUnitId);
                }
                if(qModel.ReleatedPurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReleatedPurchaseOrderId, qModel.ReleatedPurchaseOrderId);
                }

                return HandlerFactory.PurchaseOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseOrder>>("调用采购单业务逻辑:通过查询Model分页查询实体(采购单)失败", ex);
            }  
		}

		#endregion 采购单 
		   
		#region 采购明细

		/// <summary>
        /// 获取实体采购明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseOrderDetail GetPurchaseOrderDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseOrderDetail>("调用采购明细业务逻辑:根据编号获取实体(采购明细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseOrderDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购明细业务逻辑:统计所有(采购明细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseOrderDetail(PurchaseOrderDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购明细业务逻辑:添加实体(采购明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseOrderDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购明细业务逻辑:删除实体(采购明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseOrderDetail(PurchaseOrderDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购明细业务逻辑:保存实体(采购明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseOrderDetail> AllPurchaseOrderDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购明细业务逻辑:获取所有实体(采购明细)失败";
                return this.HandleException<List<PurchaseOrderDetail>>(message, ex);
            }
		}

		 
        public List<PurchaseOrderDetail> QueryPurchaseOrderDetails(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int amountfrom,int amountto,decimal purchasepricefrom,decimal purchasepriceto,decimal amountoftaxfrom,decimal amountoftaxto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseOrderDetail>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From>To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From>To不参与条件
                if(amountoftaxto==amountoftaxfrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTax, amountoftaxfrom);
                }
                else if(amountoftaxto>amountoftaxfrom){//From<To执行Between
                    queryBuilder.Between(a => a.AmountOfTax, amountoftaxfrom,amountoftaxto);
                }//From>To不参与条件

                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购明细业务逻辑:查询实体(采购明细)失败";
                return this.HandleException<List<PurchaseOrderDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseOrderDetail> QueryPagedPurchaseOrderDetails(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int amountfrom,int amountto,decimal purchasepricefrom,decimal purchasepriceto,decimal amountoftaxfrom,decimal amountoftaxto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderDetail>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From<To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From<To不参与条件
                if(amountoftaxto==amountoftaxfrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTax, amountoftaxfrom);
                }
                else if(amountoftaxto>amountoftaxfrom){//From>To执行Between
                    queryBuilder.Between(a => a.AmountOfTax, amountoftaxfrom,amountoftaxto);
                }//From<To不参与条件

                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseOrderDetail>>("调用采购明细业务逻辑:查询实体(采购明细)失败", ex);
            }
        } 
 
        public List<PurchaseOrderDetail> SearchPurchaseOrderDetailsByQueryModel(QueryPurchaseOrderDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderDetail>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.AmountOfTaxTo==qModel.AmountOfTaxFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTax, qModel.AmountOfTaxFrom);
                }
                else if(qModel.AmountOfTaxTo>qModel.AmountOfTaxFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AmountOfTax, qModel.AmountOfTaxFrom,qModel.AmountOfTaxTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }

                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购明细业务逻辑:通查询Model查询实体(采购明细)失败";
                return this.HandleException<List<PurchaseOrderDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchaseOrderDetail> SearchPagedPurchaseOrderDetailsByQueryModel(QueryPurchaseOrderDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderDetail>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.AmountOfTaxTo==qModel.AmountOfTaxFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AmountOfTax, qModel.AmountOfTaxFrom);
                }
                else if(qModel.AmountOfTaxTo>qModel.AmountOfTaxFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AmountOfTax, qModel.AmountOfTaxFrom,qModel.AmountOfTaxTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }

                return HandlerFactory.PurchaseOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseOrderDetail>>("调用采购明细业务逻辑:通过查询Model分页查询实体(采购明细)失败", ex);
            }  
		}

		#endregion 采购明细 
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseOrderReturn GetPurchaseOrderReturn(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseOrderReturn>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseOrderReturn(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseOrderReturn(PurchaseOrderReturn value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseOrderReturn(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseOrderReturn(PurchaseOrderReturn value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseOrderReturn> AllPurchaseOrderReturns(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<PurchaseOrderReturn>>(message, ex);
            }
		}

		 
        public List<PurchaseOrderReturn> QueryPurchaseOrderReturns(string documentnumber,string checkersuggest,string qualitysuggest,string generalmanagersuggest,string financedepartmentsuggest,int orderstatusvaluefrom,int orderstatusvalueto,string decription,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturn>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(!string.IsNullOrEmpty(checkersuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckerSuggest, checkersuggest);
                }
                if(!string.IsNullOrEmpty(qualitysuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualitySuggest, qualitysuggest);
                }
                if(!string.IsNullOrEmpty(generalmanagersuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.GeneralManagerSuggest, generalmanagersuggest);
                }
                if(!string.IsNullOrEmpty(financedepartmentsuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FinanceDepartmentSuggest, financedepartmentsuggest);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From>To不参与条件

                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<PurchaseOrderReturn>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseOrderReturn> QueryPagedPurchaseOrderReturns(string documentnumber,string checkersuggest,string qualitysuggest,string generalmanagersuggest,string financedepartmentsuggest,int orderstatusvaluefrom,int orderstatusvalueto,string decription,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderReturn>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturn>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(!string.IsNullOrEmpty(checkersuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckerSuggest, checkersuggest);
                }
                if(!string.IsNullOrEmpty(qualitysuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualitySuggest, qualitysuggest);
                }
                if(!string.IsNullOrEmpty(generalmanagersuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.GeneralManagerSuggest, generalmanagersuggest);
                }
                if(!string.IsNullOrEmpty(financedepartmentsuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FinanceDepartmentSuggest, financedepartmentsuggest);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From<To不参与条件

                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseOrderReturn>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<PurchaseOrderReturn> SearchPurchaseOrderReturnsByQueryModel(QueryPurchaseOrderReturnModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderReturn>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturn>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.CheckerUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CheckerUserId, qModel.CheckerUserId);
                }
                if(!string.IsNullOrEmpty(qModel.CheckerSuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckerSuggest, qModel.CheckerSuggest);
                }
                if(qModel.QualityUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.QualityUserId, qModel.QualityUserId);
                }
                if(!string.IsNullOrEmpty(qModel.QualitySuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualitySuggest, qModel.QualitySuggest);
                }
                if(qModel.GeneralManagerUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GeneralManagerUserId, qModel.GeneralManagerUserId);
                }
                if(!string.IsNullOrEmpty(qModel.GeneralManagerSuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.GeneralManagerSuggest, qModel.GeneralManagerSuggest);
                }
                if(qModel.FinanceDepartmentUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FinanceDepartmentUserId, qModel.FinanceDepartmentUserId);
                }
                if(!string.IsNullOrEmpty(qModel.FinanceDepartmentSuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FinanceDepartmentSuggest, qModel.FinanceDepartmentSuggest);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<PurchaseOrderReturn>>(message, ex);
            }  
		} 

		 
        public List<PurchaseOrderReturn> SearchPagedPurchaseOrderReturnsByQueryModel(QueryPurchaseOrderReturnModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderReturn>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturn>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.CheckerUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CheckerUserId, qModel.CheckerUserId);
                }
                if(!string.IsNullOrEmpty(qModel.CheckerSuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CheckerSuggest, qModel.CheckerSuggest);
                }
                if(qModel.QualityUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.QualityUserId, qModel.QualityUserId);
                }
                if(!string.IsNullOrEmpty(qModel.QualitySuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualitySuggest, qModel.QualitySuggest);
                }
                if(qModel.GeneralManagerUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GeneralManagerUserId, qModel.GeneralManagerUserId);
                }
                if(!string.IsNullOrEmpty(qModel.GeneralManagerSuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.GeneralManagerSuggest, qModel.GeneralManagerSuggest);
                }
                if(qModel.FinanceDepartmentUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FinanceDepartmentUserId, qModel.FinanceDepartmentUserId);
                }
                if(!string.IsNullOrEmpty(qModel.FinanceDepartmentSuggest)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FinanceDepartmentSuggest, qModel.FinanceDepartmentSuggest);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseOrderReturnBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseOrderReturn>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseOrderReturnDetail GetPurchaseOrderReturnDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseOrderReturnDetail>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseOrderReturnDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseOrderReturnDetail(PurchaseOrderReturnDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseOrderReturnDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseOrderReturnDetail(PurchaseOrderReturnDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseOrderReturnDetail> AllPurchaseOrderReturnDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<PurchaseOrderReturnDetail>>(message, ex);
            }
		}

		 
        public List<PurchaseOrderReturnDetail> QueryPurchaseOrderReturnDetails(string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,int returnamountfrom,int returnamountto,decimal purchasepricefrom,decimal purchasepriceto,string returnreason,bool isreissue,bool queryisreissue,int reissueamountfrom,int reissueamountto,int purchasereturnsourcevaluefrom,int purchasereturnsourcevalueto,int returnhandledmethodvaluefrom,int returnhandledmethodvalueto,string decription,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturnDetail>(); 
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From>To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(returnreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReason, returnreason);
                }
                if(queryisreissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, isreissue);
}
                if(reissueamountto==reissueamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, reissueamountfrom);
                }
                else if(reissueamountto>reissueamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, reissueamountfrom,reissueamountto);
                }//From>To不参与条件
                if(purchasereturnsourcevalueto==purchasereturnsourcevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseReturnSourceValue, purchasereturnsourcevaluefrom);
                }
                else if(purchasereturnsourcevalueto>purchasereturnsourcevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchaseReturnSourceValue, purchasereturnsourcevaluefrom,purchasereturnsourcevalueto);
                }//From>To不参与条件
                if(returnhandledmethodvalueto==returnhandledmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom);
                }
                else if(returnhandledmethodvalueto>returnhandledmethodvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom,returnhandledmethodvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }

                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<PurchaseOrderReturnDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseOrderReturnDetail> QueryPagedPurchaseOrderReturnDetails(string batchnumber,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,int returnamountfrom,int returnamountto,decimal purchasepricefrom,decimal purchasepriceto,string returnreason,bool isreissue,bool queryisreissue,int reissueamountfrom,int reissueamountto,int purchasereturnsourcevaluefrom,int purchasereturnsourcevalueto,int returnhandledmethodvaluefrom,int returnhandledmethodvalueto,string decription,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderReturnDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturnDetail>(); 
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From<To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(returnreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReason, returnreason);
                }
                if(queryisreissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, isreissue);
}
                if(reissueamountto==reissueamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, reissueamountfrom);
                }
                else if(reissueamountto>reissueamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, reissueamountfrom,reissueamountto);
                }//From<To不参与条件
                if(purchasereturnsourcevalueto==purchasereturnsourcevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseReturnSourceValue, purchasereturnsourcevaluefrom);
                }
                else if(purchasereturnsourcevalueto>purchasereturnsourcevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchaseReturnSourceValue, purchasereturnsourcevaluefrom,purchasereturnsourcevalueto);
                }//From<To不参与条件
                if(returnhandledmethodvalueto==returnhandledmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom);
                }
                else if(returnhandledmethodvalueto>returnhandledmethodvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom,returnhandledmethodvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }

                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseOrderReturnDetail>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<PurchaseOrderReturnDetail> SearchPurchaseOrderReturnDetailsByQueryModel(QueryPurchaseOrderReturnDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderReturnDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturnDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ReturnReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReason, qModel.ReturnReason);
                }
                if(qModel.QueryIsReissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, qModel.IsReissue);
}
                if(qModel.ReissueAmountTo==qModel.ReissueAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, qModel.ReissueAmountFrom);
                }
                else if(qModel.ReissueAmountTo>qModel.ReissueAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, qModel.ReissueAmountFrom,qModel.ReissueAmountTo);
                }//From>To不参与条件
                if(qModel.PurchaseOrderReturnId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderReturnId, qModel.PurchaseOrderReturnId);
                }
                if(qModel.PurchaseReturnSourceValueTo==qModel.PurchaseReturnSourceValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseReturnSourceValue, qModel.PurchaseReturnSourceValueFrom);
                }
                else if(qModel.PurchaseReturnSourceValueTo>qModel.PurchaseReturnSourceValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchaseReturnSourceValue, qModel.PurchaseReturnSourceValueFrom,qModel.PurchaseReturnSourceValueTo);
                }//From>To不参与条件
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(qModel.ReturnHandledMethodValueTo==qModel.ReturnHandledMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom);
                }
                else if(qModel.ReturnHandledMethodValueTo>qModel.ReturnHandledMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom,qModel.ReturnHandledMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }

                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<PurchaseOrderReturnDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchaseOrderReturnDetail> SearchPagedPurchaseOrderReturnDetailsByQueryModel(QueryPurchaseOrderReturnDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseOrderReturnDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseOrderReturnDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ReturnReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReason, qModel.ReturnReason);
                }
                if(qModel.QueryIsReissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, qModel.IsReissue);
}
                if(qModel.ReissueAmountTo==qModel.ReissueAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, qModel.ReissueAmountFrom);
                }
                else if(qModel.ReissueAmountTo>qModel.ReissueAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, qModel.ReissueAmountFrom,qModel.ReissueAmountTo);
                }//From>To不参与条件
                if(qModel.PurchaseOrderReturnId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderReturnId, qModel.PurchaseOrderReturnId);
                }
                if(qModel.PurchaseReturnSourceValueTo==qModel.PurchaseReturnSourceValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseReturnSourceValue, qModel.PurchaseReturnSourceValueFrom);
                }
                else if(qModel.PurchaseReturnSourceValueTo>qModel.PurchaseReturnSourceValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchaseReturnSourceValue, qModel.PurchaseReturnSourceValueFrom,qModel.PurchaseReturnSourceValueTo);
                }//From>To不参与条件
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(qModel.ReturnHandledMethodValueTo==qModel.ReturnHandledMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom);
                }
                else if(qModel.ReturnHandledMethodValueTo>qModel.ReturnHandledMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom,qModel.ReturnHandledMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }

                return HandlerFactory.PurchaseOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseOrderReturnDetail>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 采购收货单

		/// <summary>
        /// 获取实体采购收货单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseReceivingOrder GetPurchaseReceivingOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseReceivingOrder>("调用采购收货单业务逻辑:根据编号获取实体(采购收货单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购收货单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseReceivingOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购收货单业务逻辑:统计所有(采购收货单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购收货单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseReceivingOrder(PurchaseReceivingOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购收货单业务逻辑:添加实体(采购收货单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购收货单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseReceivingOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购收货单业务逻辑:删除实体(采购收货单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购收货单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseReceivingOrder(PurchaseReceivingOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购收货单业务逻辑:保存实体(采购收货单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购收货单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseReceivingOrder> AllPurchaseReceivingOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购收货单业务逻辑:获取所有实体(采购收货单)失败";
                return this.HandleException<List<PurchaseReceivingOrder>>(message, ex);
            }
		}

		 
        public List<PurchaseReceivingOrder> QueryPurchaseReceivingOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,DateTime shippingtimefrom,DateTime shippingtimeto,string shippingadress,string shippingunit,string transportunit,int orderstatusvaluefrom,int orderstatusvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From>To不参与条件
                if(shippingtimeto!=default(DateTime)&&shippingtimefrom!=default(DateTime)){//From==To执行==
                if(shippingtimeto==shippingtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ShippingTime, shippingtimefrom);
                }
                else if(shippingtimeto>shippingtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ShippingTime, shippingtimefrom,shippingtimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(shippingadress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAdress, shippingadress);
                }
                if(!string.IsNullOrEmpty(shippingunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingUnit, shippingunit);
                }
                if(!string.IsNullOrEmpty(transportunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportUnit, transportunit);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From>To不参与条件

                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购收货单业务逻辑:查询实体(采购收货单)失败";
                return this.HandleException<List<PurchaseReceivingOrder>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseReceivingOrder> QueryPagedPurchaseReceivingOrders(string documentnumber,DateTime operatetimefrom,DateTime operatetimeto,DateTime shippingtimefrom,DateTime shippingtimeto,string shippingadress,string shippingunit,string transportunit,int orderstatusvaluefrom,int orderstatusvalueto,string decription,string relatedorderdocumentnumber,int relatedordertypevaluefrom,int relatedordertypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseReceivingOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrder>(); 
                if(!string.IsNullOrEmpty(documentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, documentnumber);
                }
                if(operatetimeto!=default(DateTime)&&operatetimefrom!=default(DateTime)){//From==To执行==
                if(operatetimeto==operatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, operatetimefrom);
                }
                else if(operatetimeto>operatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OperateTime, operatetimefrom,operatetimeto);
                }}//From<To不参与条件
                if(shippingtimeto!=default(DateTime)&&shippingtimefrom!=default(DateTime)){//From==To执行==
                if(shippingtimeto==shippingtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ShippingTime, shippingtimefrom);
                }
                else if(shippingtimeto>shippingtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ShippingTime, shippingtimefrom,shippingtimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(shippingadress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAdress, shippingadress);
                }
                if(!string.IsNullOrEmpty(shippingunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingUnit, shippingunit);
                }
                if(!string.IsNullOrEmpty(transportunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportUnit, transportunit);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(relatedorderdocumentnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, relatedorderdocumentnumber);
                }
                if(relatedordertypevalueto==relatedordertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom);
                }
                else if(relatedordertypevalueto>relatedordertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, relatedordertypevaluefrom,relatedordertypevalueto);
                }//From<To不参与条件

                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseReceivingOrder>>("调用采购收货单业务逻辑:查询实体(采购收货单)失败", ex);
            }
        } 
 
        public List<PurchaseReceivingOrder> SearchPurchaseReceivingOrdersByQueryModel(QueryPurchaseReceivingOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseReceivingOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ShippingTimeTo!=default(DateTime)&&qModel.ShippingTimeFrom!=default(DateTime)){
                if(qModel.ShippingTimeTo==qModel.ShippingTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ShippingTime, qModel.ShippingTimeFrom);
                }
                else if(qModel.ShippingTimeTo>qModel.ShippingTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ShippingTime, qModel.ShippingTimeFrom,qModel.ShippingTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.ShippingAdress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAdress, qModel.ShippingAdress);
                }
                if(!string.IsNullOrEmpty(qModel.ShippingUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingUnit, qModel.ShippingUnit);
                }
                if(!string.IsNullOrEmpty(qModel.TransportUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportUnit, qModel.TransportUnit);
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购收货单业务逻辑:通查询Model查询实体(采购收货单)失败";
                return this.HandleException<List<PurchaseReceivingOrder>>(message, ex);
            }  
		} 

		 
        public List<PurchaseReceivingOrder> SearchPagedPurchaseReceivingOrdersByQueryModel(QueryPurchaseReceivingOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseReceivingOrder>();
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrder>(); 
                if(!string.IsNullOrEmpty(qModel.DocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DocumentNumber, qModel.DocumentNumber);
                }
                if(qModel.OperateTimeTo!=default(DateTime)&&qModel.OperateTimeFrom!=default(DateTime)){
                if(qModel.OperateTimeTo==qModel.OperateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OperateTime, qModel.OperateTimeFrom);
                }
                else if(qModel.OperateTimeTo>qModel.OperateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OperateTime, qModel.OperateTimeFrom,qModel.OperateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.ShippingTimeTo!=default(DateTime)&&qModel.ShippingTimeFrom!=default(DateTime)){
                if(qModel.ShippingTimeTo==qModel.ShippingTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ShippingTime, qModel.ShippingTimeFrom);
                }
                else if(qModel.ShippingTimeTo>qModel.ShippingTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ShippingTime, qModel.ShippingTimeFrom,qModel.ShippingTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.ShippingAdress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingAdress, qModel.ShippingAdress);
                }
                if(!string.IsNullOrEmpty(qModel.ShippingUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShippingUnit, qModel.ShippingUnit);
                }
                if(!string.IsNullOrEmpty(qModel.TransportUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportUnit, qModel.TransportUnit);
                }
                if(qModel.OperateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OperateUserId, qModel.OperateUserId);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.PurchaseOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseOrderId, qModel.PurchaseOrderId);
                }
                if(qModel.RelatedOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RelatedOrderId, qModel.RelatedOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.RelatedOrderDocumentNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RelatedOrderDocumentNumber, qModel.RelatedOrderDocumentNumber);
                }
                if(qModel.RelatedOrderTypeValueTo==qModel.RelatedOrderTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom);
                }
                else if(qModel.RelatedOrderTypeValueTo>qModel.RelatedOrderTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RelatedOrderTypeValue, qModel.RelatedOrderTypeValueFrom,qModel.RelatedOrderTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.PurchaseReceivingOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseReceivingOrder>>("调用采购收货单业务逻辑:通过查询Model分页查询实体(采购收货单)失败", ex);
            }  
		}

		#endregion 采购收货单 
		   
		#region 采购收货详细单

		/// <summary>
        /// 获取实体采购收货详细单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseReceivingOrderDetail GetPurchaseReceivingOrderDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseReceivingOrderDetail>("调用采购收货详细单业务逻辑:根据编号获取实体(采购收货详细单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计采购收货详细单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseReceivingOrderDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用采购收货详细单业务逻辑:统计所有(采购收货详细单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加采购收货详细单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseReceivingOrderDetail(PurchaseReceivingOrderDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购收货详细单业务逻辑:添加实体(采购收货详细单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除采购收货详细单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseReceivingOrderDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购收货详细单业务逻辑:删除实体(采购收货详细单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存采购收货详细单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseReceivingOrderDetail(PurchaseReceivingOrderDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用采购收货详细单业务逻辑:保存实体(采购收货详细单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录采购收货详细单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseReceivingOrderDetail> AllPurchaseReceivingOrderDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用采购收货详细单业务逻辑:获取所有实体(采购收货详细单)失败";
                return this.HandleException<List<PurchaseReceivingOrderDetail>>(message, ex);
            }
		}

		 
        public List<PurchaseReceivingOrderDetail> QueryPurchaseReceivingOrderDetails(int amountfrom,int amountto,decimal purchasepricefrom,decimal purchasepriceto,int actualamountfrom,int actualamountto,int receiveamountfrom,int receiveamountto,int rejectamountfrom,int rejectamountto,string rejectreason,string rejecttrace,bool iscompanypurchase,bool queryiscompanypurchase,string transportmethod,bool istransportmethod,bool queryistransportmethod,string transporttemperature,string temperaturestatus,bool istransporttemperature,bool queryistransporttemperature,int checkresultfrom,int checkresultto,string decription,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrderDetail>(); 
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From>To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From>To不参与条件
                if(actualamountto==actualamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualAmount, actualamountfrom);
                }
                else if(actualamountto>actualamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualAmount, actualamountfrom,actualamountto);
                }//From>To不参与条件
                if(receiveamountto==receiveamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceiveAmount, receiveamountfrom);
                }
                else if(receiveamountto>receiveamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReceiveAmount, receiveamountfrom,receiveamountto);
                }//From>To不参与条件
                if(rejectamountto==rejectamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RejectAmount, rejectamountfrom);
                }
                else if(rejectamountto>rejectamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RejectAmount, rejectamountfrom,rejectamountto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(rejectreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectReason, rejectreason);
                }
                if(!string.IsNullOrEmpty(rejecttrace)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectTrace, rejecttrace);
                }
                if(queryiscompanypurchase){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsCompanyPurchase, iscompanypurchase);
}
                if(!string.IsNullOrEmpty(transportmethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportMethod, transportmethod);
                }
                if(queryistransportmethod){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportMethod, istransportmethod);
}
                if(!string.IsNullOrEmpty(transporttemperature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportTemperature, transporttemperature);
                }
                if(!string.IsNullOrEmpty(temperaturestatus)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TemperatureStatus, temperaturestatus);
                }
                if(queryistransporttemperature){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportTemperature, istransporttemperature);
}
                if(checkresultto==checkresultfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, checkresultfrom);
                }
                else if(checkresultto>checkresultfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CheckResult, checkresultfrom,checkresultto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }

                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用采购收货详细单业务逻辑:查询实体(采购收货详细单)失败";
                return this.HandleException<List<PurchaseReceivingOrderDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseReceivingOrderDetail> QueryPagedPurchaseReceivingOrderDetails(int amountfrom,int amountto,decimal purchasepricefrom,decimal purchasepriceto,int actualamountfrom,int actualamountto,int receiveamountfrom,int receiveamountto,int rejectamountfrom,int rejectamountto,string rejectreason,string rejecttrace,bool iscompanypurchase,bool queryiscompanypurchase,string transportmethod,bool istransportmethod,bool queryistransportmethod,string transporttemperature,string temperaturestatus,bool istransporttemperature,bool queryistransporttemperature,int checkresultfrom,int checkresultto,string decription,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseReceivingOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrderDetail>(); 
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From<To不参与条件
                if(purchasepriceto==purchasepricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, purchasepricefrom);
                }
                else if(purchasepriceto>purchasepricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, purchasepricefrom,purchasepriceto);
                }//From<To不参与条件
                if(actualamountto==actualamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualAmount, actualamountfrom);
                }
                else if(actualamountto>actualamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ActualAmount, actualamountfrom,actualamountto);
                }//From<To不参与条件
                if(receiveamountto==receiveamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceiveAmount, receiveamountfrom);
                }
                else if(receiveamountto>receiveamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReceiveAmount, receiveamountfrom,receiveamountto);
                }//From<To不参与条件
                if(rejectamountto==rejectamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RejectAmount, rejectamountfrom);
                }
                else if(rejectamountto>rejectamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RejectAmount, rejectamountfrom,rejectamountto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(rejectreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectReason, rejectreason);
                }
                if(!string.IsNullOrEmpty(rejecttrace)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectTrace, rejecttrace);
                }
                if(queryiscompanypurchase){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsCompanyPurchase, iscompanypurchase);
}
                if(!string.IsNullOrEmpty(transportmethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportMethod, transportmethod);
                }
                if(queryistransportmethod){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportMethod, istransportmethod);
}
                if(!string.IsNullOrEmpty(transporttemperature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportTemperature, transporttemperature);
                }
                if(!string.IsNullOrEmpty(temperaturestatus)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TemperatureStatus, temperaturestatus);
                }
                if(queryistransporttemperature){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportTemperature, istransporttemperature);
}
                if(checkresultto==checkresultfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, checkresultfrom);
                }
                else if(checkresultto>checkresultfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CheckResult, checkresultfrom,checkresultto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }

                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseReceivingOrderDetail>>("调用采购收货详细单业务逻辑:查询实体(采购收货详细单)失败", ex);
            }
        } 
 
        public List<PurchaseReceivingOrderDetail> SearchPurchaseReceivingOrderDetailsByQueryModel(QueryPurchaseReceivingOrderDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseReceivingOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrderDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.ActualAmountTo==qModel.ActualAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualAmount, qModel.ActualAmountFrom);
                }
                else if(qModel.ActualAmountTo>qModel.ActualAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualAmount, qModel.ActualAmountFrom,qModel.ActualAmountTo);
                }//From>To不参与条件
                if(qModel.ReceiveAmountTo==qModel.ReceiveAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceiveAmount, qModel.ReceiveAmountFrom);
                }
                else if(qModel.ReceiveAmountTo>qModel.ReceiveAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReceiveAmount, qModel.ReceiveAmountFrom,qModel.ReceiveAmountTo);
                }//From>To不参与条件
                if(qModel.RejectAmountTo==qModel.RejectAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RejectAmount, qModel.RejectAmountFrom);
                }
                else if(qModel.RejectAmountTo>qModel.RejectAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RejectAmount, qModel.RejectAmountFrom,qModel.RejectAmountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.RejectReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectReason, qModel.RejectReason);
                }
                if(!string.IsNullOrEmpty(qModel.RejectTrace)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectTrace, qModel.RejectTrace);
                }
                if(qModel.QueryIsCompanyPurchase){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsCompanyPurchase, qModel.IsCompanyPurchase);
}
                if(!string.IsNullOrEmpty(qModel.TransportMethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportMethod, qModel.TransportMethod);
                }
                if(qModel.QueryIsTransportMethod){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportMethod, qModel.IsTransportMethod);
}
                if(!string.IsNullOrEmpty(qModel.TransportTemperature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportTemperature, qModel.TransportTemperature);
                }
                if(!string.IsNullOrEmpty(qModel.TemperatureStatus)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TemperatureStatus, qModel.TemperatureStatus);
                }
                if(qModel.QueryIsTransportTemperature){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportTemperature, qModel.IsTransportTemperature);
}
                if(qModel.CheckResultTo==qModel.CheckResultFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, qModel.CheckResultFrom);
                }
                else if(qModel.CheckResultTo>qModel.CheckResultFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CheckResult, qModel.CheckResultFrom,qModel.CheckResultTo);
                }//From>To不参与条件
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchaseReceivingOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseReceivingOrderId, qModel.PurchaseReceivingOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }

                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用采购收货详细单业务逻辑:通查询Model查询实体(采购收货详细单)失败";
                return this.HandleException<List<PurchaseReceivingOrderDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchaseReceivingOrderDetail> SearchPagedPurchaseReceivingOrderDetailsByQueryModel(QueryPurchaseReceivingOrderDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseReceivingOrderDetail>();
                var queryBuilder = QueryBuilder.Create<PurchaseReceivingOrderDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.PurchasePriceTo==qModel.PurchasePriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchasePrice, qModel.PurchasePriceFrom);
                }
                else if(qModel.PurchasePriceTo>qModel.PurchasePriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchasePrice, qModel.PurchasePriceFrom,qModel.PurchasePriceTo);
                }//From>To不参与条件
                if(qModel.ActualAmountTo==qModel.ActualAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualAmount, qModel.ActualAmountFrom);
                }
                else if(qModel.ActualAmountTo>qModel.ActualAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualAmount, qModel.ActualAmountFrom,qModel.ActualAmountTo);
                }//From>To不参与条件
                if(qModel.ReceiveAmountTo==qModel.ReceiveAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceiveAmount, qModel.ReceiveAmountFrom);
                }
                else if(qModel.ReceiveAmountTo>qModel.ReceiveAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReceiveAmount, qModel.ReceiveAmountFrom,qModel.ReceiveAmountTo);
                }//From>To不参与条件
                if(qModel.RejectAmountTo==qModel.RejectAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RejectAmount, qModel.RejectAmountFrom);
                }
                else if(qModel.RejectAmountTo>qModel.RejectAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RejectAmount, qModel.RejectAmountFrom,qModel.RejectAmountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.RejectReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectReason, qModel.RejectReason);
                }
                if(!string.IsNullOrEmpty(qModel.RejectTrace)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.RejectTrace, qModel.RejectTrace);
                }
                if(qModel.QueryIsCompanyPurchase){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsCompanyPurchase, qModel.IsCompanyPurchase);
}
                if(!string.IsNullOrEmpty(qModel.TransportMethod)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportMethod, qModel.TransportMethod);
                }
                if(qModel.QueryIsTransportMethod){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportMethod, qModel.IsTransportMethod);
}
                if(!string.IsNullOrEmpty(qModel.TransportTemperature)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TransportTemperature, qModel.TransportTemperature);
                }
                if(!string.IsNullOrEmpty(qModel.TemperatureStatus)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TemperatureStatus, qModel.TemperatureStatus);
                }
                if(qModel.QueryIsTransportTemperature){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsTransportTemperature, qModel.IsTransportTemperature);
}
                if(qModel.CheckResultTo==qModel.CheckResultFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CheckResult, qModel.CheckResultFrom);
                }
                else if(qModel.CheckResultTo>qModel.CheckResultFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CheckResult, qModel.CheckResultFrom,qModel.CheckResultTo);
                }//From>To不参与条件
                if(qModel.DrugInfoId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInfoId, qModel.DrugInfoId);
                }
                if(qModel.PurchaseReceivingOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseReceivingOrderId, qModel.PurchaseReceivingOrderId);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }

                return HandlerFactory.PurchaseReceivingOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseReceivingOrderDetail>>("调用采购收货详细单业务逻辑:通过查询Model分页查询实体(采购收货详细单)失败", ex);
            }  
		}

		#endregion 采购收货详细单 
		   
		#region 购货单位

		/// <summary>
        /// 获取实体购货单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseUnit GetPurchaseUnit(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseUnit>("调用购货单位业务逻辑:根据编号获取实体(购货单位)失败", ex);
            }
		} 

        /// <summary>
        /// 统计购货单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseUnit(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用购货单位业务逻辑:统计所有(购货单位)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加购货单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseUnit(PurchaseUnit value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位业务逻辑:添加实体(购货单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除购货单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseUnit(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位业务逻辑:删除实体(购货单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存购货单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseUnit(PurchaseUnit value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位业务逻辑:保存实体(购货单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录购货单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseUnit> AllPurchaseUnits(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用购货单位业务逻辑:获取所有实体(购货单位)失败";
                return this.HandleException<List<PurchaseUnit>>(message, ex);
            }
		}

		 
        public List<PurchaseUnit> QueryPurchaseUnits(bool valid,bool queryvalid,string validremark,bool islock,bool queryislock,string lockremark,string receiveaddress,string name,string code,string pinyincode,string contactname,string contacttel,string description,string legalperson,string header,string businessscope,string salesamount,string fax,string email,string webaddress,bool isoutdate,bool queryisoutdate,DateTime outdatefrom,DateTime outdateto,bool isgsplicenseoutdate,bool queryisgsplicenseoutdate,DateTime gsplicenseoutdatefrom,DateTime gsplicenseoutdateto,bool isgmplicenseoutdate,bool queryisgmplicenseoutdate,DateTime gmplicenseoutdatefrom,DateTime gmplicenseoutdateto,bool isbusinesslicenseoutdate,bool queryisbusinesslicenseoutdate,DateTime businesslicenseeoutdatefrom,DateTime businesslicenseeoutdateto,bool ismedicineproductionlicenseoutdate,bool queryismedicineproductionlicenseoutdate,DateTime medicineproductionlicenseoutdatefrom,DateTime medicineproductionlicenseoutdateto,bool ismedicinebusinesslicenseoutdate,bool queryismedicinebusinesslicenseoutdate,DateTime medicinebusinesslicenseoutdatefrom,DateTime medicinebusinesslicenseoutdateto,bool isinstrumentsproductionlicenseoutdate,bool queryisinstrumentsproductionlicenseoutdate,DateTime instrumentsproductionlicenseoutdatefrom,DateTime instrumentsproductionlicenseoutdateto,bool isinstrumentsbusinesslicenseoutdate,bool queryisinstrumentsbusinesslicenseoutdate,DateTime instrumentsbusinesslicenseoutdatefrom,DateTime instrumentsbusinesslicenseoutdateto,string taxregistrationcode,DateTime lastannualdtefrom,DateTime lastannualdteto,bool isapproval,bool queryisapproval,int approvalstatusvaluefrom,int approvalstatusvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseUnit>(); 
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(!string.IsNullOrEmpty(validremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, validremark);
                }
                if(queryislock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, islock);
}
                if(!string.IsNullOrEmpty(lockremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, lockremark);
                }
                if(!string.IsNullOrEmpty(receiveaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReceiveAddress, receiveaddress);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(pinyincode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, pinyincode);
                }
                if(!string.IsNullOrEmpty(contactname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, contactname);
                }
                if(!string.IsNullOrEmpty(contacttel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, contacttel);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(salesamount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, salesamount);
                }
                if(!string.IsNullOrEmpty(fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, fax);
                }
                if(!string.IsNullOrEmpty(email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, email);
                }
                if(!string.IsNullOrEmpty(webaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, webaddress);
                }
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(queryisgsplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, isgsplicenseoutdate);
}
                if(gsplicenseoutdateto!=default(DateTime)&&gsplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gsplicenseoutdateto==gsplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom);
                }
                else if(gsplicenseoutdateto>gsplicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom,gsplicenseoutdateto);
                }}//From>To不参与条件
                if(queryisgmplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, isgmplicenseoutdate);
}
                if(gmplicenseoutdateto!=default(DateTime)&&gmplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gmplicenseoutdateto==gmplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom);
                }
                else if(gmplicenseoutdateto>gmplicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom,gmplicenseoutdateto);
                }}//From>To不参与条件
                if(queryisbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, isbusinesslicenseoutdate);
}
                if(businesslicenseeoutdateto!=default(DateTime)&&businesslicenseeoutdatefrom!=default(DateTime)){//From==To执行==
                if(businesslicenseeoutdateto==businesslicenseeoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom);
                }
                else if(businesslicenseeoutdateto>businesslicenseeoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom,businesslicenseeoutdateto);
                }}//From>To不参与条件
                if(queryismedicineproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, ismedicineproductionlicenseoutdate);
}
                if(medicineproductionlicenseoutdateto!=default(DateTime)&&medicineproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicineproductionlicenseoutdateto==medicineproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom);
                }
                else if(medicineproductionlicenseoutdateto>medicineproductionlicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom,medicineproductionlicenseoutdateto);
                }}//From>To不参与条件
                if(queryismedicinebusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, ismedicinebusinesslicenseoutdate);
}
                if(medicinebusinesslicenseoutdateto!=default(DateTime)&&medicinebusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicinebusinesslicenseoutdateto==medicinebusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom);
                }
                else if(medicinebusinesslicenseoutdateto>medicinebusinesslicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom,medicinebusinesslicenseoutdateto);
                }}//From>To不参与条件
                if(queryisinstrumentsproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, isinstrumentsproductionlicenseoutdate);
}
                if(instrumentsproductionlicenseoutdateto!=default(DateTime)&&instrumentsproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsproductionlicenseoutdateto==instrumentsproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom);
                }
                else if(instrumentsproductionlicenseoutdateto>instrumentsproductionlicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom,instrumentsproductionlicenseoutdateto);
                }}//From>To不参与条件
                if(queryisinstrumentsbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, isinstrumentsbusinesslicenseoutdate);
}
                if(instrumentsbusinesslicenseoutdateto!=default(DateTime)&&instrumentsbusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsbusinesslicenseoutdateto==instrumentsbusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom);
                }
                else if(instrumentsbusinesslicenseoutdateto>instrumentsbusinesslicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom,instrumentsbusinesslicenseoutdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(taxregistrationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, taxregistrationcode);
                }
                if(lastannualdteto!=default(DateTime)&&lastannualdtefrom!=default(DateTime)){//From==To执行==
                if(lastannualdteto==lastannualdtefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, lastannualdtefrom);
                }
                else if(lastannualdteto>lastannualdtefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, lastannualdtefrom,lastannualdteto);
                }}//From>To不参与条件
                if(queryisapproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, isapproval);
}
                if(approvalstatusvalueto==approvalstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, approvalstatusvaluefrom);
                }
                else if(approvalstatusvalueto>approvalstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, approvalstatusvaluefrom,approvalstatusvalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseUnitBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用购货单位业务逻辑:查询实体(购货单位)失败";
                return this.HandleException<List<PurchaseUnit>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseUnit> QueryPagedPurchaseUnits(bool valid,bool queryvalid,string validremark,bool islock,bool queryislock,string lockremark,string receiveaddress,string name,string code,string pinyincode,string contactname,string contacttel,string description,string legalperson,string header,string businessscope,string salesamount,string fax,string email,string webaddress,bool isoutdate,bool queryisoutdate,DateTime outdatefrom,DateTime outdateto,bool isgsplicenseoutdate,bool queryisgsplicenseoutdate,DateTime gsplicenseoutdatefrom,DateTime gsplicenseoutdateto,bool isgmplicenseoutdate,bool queryisgmplicenseoutdate,DateTime gmplicenseoutdatefrom,DateTime gmplicenseoutdateto,bool isbusinesslicenseoutdate,bool queryisbusinesslicenseoutdate,DateTime businesslicenseeoutdatefrom,DateTime businesslicenseeoutdateto,bool ismedicineproductionlicenseoutdate,bool queryismedicineproductionlicenseoutdate,DateTime medicineproductionlicenseoutdatefrom,DateTime medicineproductionlicenseoutdateto,bool ismedicinebusinesslicenseoutdate,bool queryismedicinebusinesslicenseoutdate,DateTime medicinebusinesslicenseoutdatefrom,DateTime medicinebusinesslicenseoutdateto,bool isinstrumentsproductionlicenseoutdate,bool queryisinstrumentsproductionlicenseoutdate,DateTime instrumentsproductionlicenseoutdatefrom,DateTime instrumentsproductionlicenseoutdateto,bool isinstrumentsbusinesslicenseoutdate,bool queryisinstrumentsbusinesslicenseoutdate,DateTime instrumentsbusinesslicenseoutdatefrom,DateTime instrumentsbusinesslicenseoutdateto,string taxregistrationcode,DateTime lastannualdtefrom,DateTime lastannualdteto,bool isapproval,bool queryisapproval,int approvalstatusvaluefrom,int approvalstatusvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnit>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnit>(); 
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(!string.IsNullOrEmpty(validremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, validremark);
                }
                if(queryislock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, islock);
}
                if(!string.IsNullOrEmpty(lockremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, lockremark);
                }
                if(!string.IsNullOrEmpty(receiveaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReceiveAddress, receiveaddress);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(pinyincode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, pinyincode);
                }
                if(!string.IsNullOrEmpty(contactname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, contactname);
                }
                if(!string.IsNullOrEmpty(contacttel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, contacttel);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(salesamount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, salesamount);
                }
                if(!string.IsNullOrEmpty(fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, fax);
                }
                if(!string.IsNullOrEmpty(email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, email);
                }
                if(!string.IsNullOrEmpty(webaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, webaddress);
                }
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(queryisgsplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, isgsplicenseoutdate);
}
                if(gsplicenseoutdateto!=default(DateTime)&&gsplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gsplicenseoutdateto==gsplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom);
                }
                else if(gsplicenseoutdateto>gsplicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom,gsplicenseoutdateto);
                }}//From<To不参与条件
                if(queryisgmplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, isgmplicenseoutdate);
}
                if(gmplicenseoutdateto!=default(DateTime)&&gmplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gmplicenseoutdateto==gmplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom);
                }
                else if(gmplicenseoutdateto>gmplicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom,gmplicenseoutdateto);
                }}//From<To不参与条件
                if(queryisbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, isbusinesslicenseoutdate);
}
                if(businesslicenseeoutdateto!=default(DateTime)&&businesslicenseeoutdatefrom!=default(DateTime)){//From==To执行==
                if(businesslicenseeoutdateto==businesslicenseeoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom);
                }
                else if(businesslicenseeoutdateto>businesslicenseeoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom,businesslicenseeoutdateto);
                }}//From<To不参与条件
                if(queryismedicineproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, ismedicineproductionlicenseoutdate);
}
                if(medicineproductionlicenseoutdateto!=default(DateTime)&&medicineproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicineproductionlicenseoutdateto==medicineproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom);
                }
                else if(medicineproductionlicenseoutdateto>medicineproductionlicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom,medicineproductionlicenseoutdateto);
                }}//From<To不参与条件
                if(queryismedicinebusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, ismedicinebusinesslicenseoutdate);
}
                if(medicinebusinesslicenseoutdateto!=default(DateTime)&&medicinebusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicinebusinesslicenseoutdateto==medicinebusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom);
                }
                else if(medicinebusinesslicenseoutdateto>medicinebusinesslicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom,medicinebusinesslicenseoutdateto);
                }}//From<To不参与条件
                if(queryisinstrumentsproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, isinstrumentsproductionlicenseoutdate);
}
                if(instrumentsproductionlicenseoutdateto!=default(DateTime)&&instrumentsproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsproductionlicenseoutdateto==instrumentsproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom);
                }
                else if(instrumentsproductionlicenseoutdateto>instrumentsproductionlicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom,instrumentsproductionlicenseoutdateto);
                }}//From<To不参与条件
                if(queryisinstrumentsbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, isinstrumentsbusinesslicenseoutdate);
}
                if(instrumentsbusinesslicenseoutdateto!=default(DateTime)&&instrumentsbusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsbusinesslicenseoutdateto==instrumentsbusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom);
                }
                else if(instrumentsbusinesslicenseoutdateto>instrumentsbusinesslicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom,instrumentsbusinesslicenseoutdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(taxregistrationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, taxregistrationcode);
                }
                if(lastannualdteto!=default(DateTime)&&lastannualdtefrom!=default(DateTime)){//From==To执行==
                if(lastannualdteto==lastannualdtefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, lastannualdtefrom);
                }
                else if(lastannualdteto>lastannualdtefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, lastannualdtefrom,lastannualdteto);
                }}//From<To不参与条件
                if(queryisapproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, isapproval);
}
                if(approvalstatusvalueto==approvalstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, approvalstatusvaluefrom);
                }
                else if(approvalstatusvalueto>approvalstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, approvalstatusvaluefrom,approvalstatusvalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseUnit>>("调用购货单位业务逻辑:查询实体(购货单位)失败", ex);
            }
        } 
 
        public List<PurchaseUnit> SearchPurchaseUnitsByQueryModel(QueryPurchaseUnitModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseUnit>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnit>(); 
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(!string.IsNullOrEmpty(qModel.ValidRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, qModel.ValidRemark);
                }
                if(qModel.QueryIsLock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, qModel.IsLock);
}
                if(!string.IsNullOrEmpty(qModel.LockRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, qModel.LockRemark);
                }
                if(!string.IsNullOrEmpty(qModel.ReceiveAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReceiveAddress, qModel.ReceiveAddress);
                }
                if(qModel.FlowID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowID, qModel.FlowID);
                }
                if(qModel.DistrictId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DistrictId, qModel.DistrictId);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.PinyinCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, qModel.PinyinCode);
                }
                if(!string.IsNullOrEmpty(qModel.ContactName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, qModel.ContactName);
                }
                if(!string.IsNullOrEmpty(qModel.ContactTel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, qModel.ContactTel);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.SalesAmount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, qModel.SalesAmount);
                }
                if(!string.IsNullOrEmpty(qModel.Fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, qModel.Fax);
                }
                if(!string.IsNullOrEmpty(qModel.Email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, qModel.Email);
                }
                if(!string.IsNullOrEmpty(qModel.WebAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, qModel.WebAddress);
                }
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GSPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GSPLicenseId, qModel.GSPLicenseId);
                }
                if(qModel.QueryIsGSPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, qModel.IsGSPLicenseOutDate);
}
                if(qModel.GSPLicenseOutDateTo!=default(DateTime)&&qModel.GSPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GSPLicenseOutDateTo==qModel.GSPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom);
                }
                else if(qModel.GSPLicenseOutDateTo>qModel.GSPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom,qModel.GSPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GMPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GMPLicenseId, qModel.GMPLicenseId);
                }
                if(qModel.QueryIsGMPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, qModel.IsGMPLicenseOutDate);
}
                if(qModel.GMPLicenseOutDateTo!=default(DateTime)&&qModel.GMPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GMPLicenseOutDateTo==qModel.GMPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom);
                }
                else if(qModel.GMPLicenseOutDateTo>qModel.GMPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom,qModel.GMPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.BusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessLicenseId, qModel.BusinessLicenseId);
                }
                if(qModel.QueryIsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, qModel.IsBusinessLicenseOutDate);
}
                if(qModel.BusinessLicenseeOutDateTo!=default(DateTime)&&qModel.BusinessLicenseeOutDateFrom!=default(DateTime)){
                if(qModel.BusinessLicenseeOutDateTo==qModel.BusinessLicenseeOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom);
                }
                else if(qModel.BusinessLicenseeOutDateTo>qModel.BusinessLicenseeOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom,qModel.BusinessLicenseeOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineProductionLicenseId, qModel.MedicineProductionLicenseId);
                }
                if(qModel.QueryIsMedicineProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, qModel.IsMedicineProductionLicenseOutDate);
}
                if(qModel.MedicineProductionLicenseOutDateTo!=default(DateTime)&&qModel.MedicineProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineProductionLicenseOutDateTo==qModel.MedicineProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom);
                }
                else if(qModel.MedicineProductionLicenseOutDateTo>qModel.MedicineProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom,qModel.MedicineProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseId, qModel.MedicineBusinessLicenseId);
                }
                if(qModel.QueryIsMedicineBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, qModel.IsMedicineBusinessLicenseOutDate);
}
                if(qModel.MedicineBusinessLicenseOutDateTo!=default(DateTime)&&qModel.MedicineBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineBusinessLicenseOutDateTo==qModel.MedicineBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom);
                }
                else if(qModel.MedicineBusinessLicenseOutDateTo>qModel.MedicineBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom,qModel.MedicineBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseId, qModel.InstrumentsProductionLicenseId);
                }
                if(qModel.QueryIsInstrumentsProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, qModel.IsInstrumentsProductionLicenseOutDate);
}
                if(qModel.InstrumentsProductionLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsProductionLicenseOutDateTo==qModel.InstrumentsProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsProductionLicenseOutDateTo>qModel.InstrumentsProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom,qModel.InstrumentsProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseId, qModel.InstrumentsBusinessLicenseId);
                }
                if(qModel.QueryIsInstrumentsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, qModel.IsInstrumentsBusinessLicenseOutDate);
}
                if(qModel.InstrumentsBusinessLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsBusinessLicenseOutDateTo==qModel.InstrumentsBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsBusinessLicenseOutDateTo>qModel.InstrumentsBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom,qModel.InstrumentsBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.TaxRegistrationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, qModel.TaxRegistrationCode);
                }
                if(qModel.TaxRegistrationFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.TaxRegistrationFile, qModel.TaxRegistrationFile);
                }
                if(qModel.AnnualFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AnnualFile, qModel.AnnualFile);
                }
                if(qModel.LastAnnualDteTo!=default(DateTime)&&qModel.LastAnnualDteFrom!=default(DateTime)){
                if(qModel.LastAnnualDteTo==qModel.LastAnnualDteFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, qModel.LastAnnualDteFrom);
                }
                else if(qModel.LastAnnualDteTo>qModel.LastAnnualDteFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, qModel.LastAnnualDteFrom,qModel.LastAnnualDteTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsApproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, qModel.IsApproval);
}
                if(qModel.ApprovalStatusValueTo==qModel.ApprovalStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom);
                }
                else if(qModel.ApprovalStatusValueTo>qModel.ApprovalStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom,qModel.ApprovalStatusValueTo);
                }//From>To不参与条件
                if(qModel.UnitTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UnitTypeId, qModel.UnitTypeId);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PurchaseUnitBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用购货单位业务逻辑:通查询Model查询实体(购货单位)失败";
                return this.HandleException<List<PurchaseUnit>>(message, ex);
            }  
		} 

		 
        public List<PurchaseUnit> SearchPagedPurchaseUnitsByQueryModel(QueryPurchaseUnitModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnit>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnit>(); 
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(!string.IsNullOrEmpty(qModel.ValidRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, qModel.ValidRemark);
                }
                if(qModel.QueryIsLock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, qModel.IsLock);
}
                if(!string.IsNullOrEmpty(qModel.LockRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, qModel.LockRemark);
                }
                if(!string.IsNullOrEmpty(qModel.ReceiveAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReceiveAddress, qModel.ReceiveAddress);
                }
                if(qModel.FlowID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowID, qModel.FlowID);
                }
                if(qModel.DistrictId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DistrictId, qModel.DistrictId);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.PinyinCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, qModel.PinyinCode);
                }
                if(!string.IsNullOrEmpty(qModel.ContactName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, qModel.ContactName);
                }
                if(!string.IsNullOrEmpty(qModel.ContactTel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, qModel.ContactTel);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.SalesAmount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, qModel.SalesAmount);
                }
                if(!string.IsNullOrEmpty(qModel.Fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, qModel.Fax);
                }
                if(!string.IsNullOrEmpty(qModel.Email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, qModel.Email);
                }
                if(!string.IsNullOrEmpty(qModel.WebAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, qModel.WebAddress);
                }
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GSPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GSPLicenseId, qModel.GSPLicenseId);
                }
                if(qModel.QueryIsGSPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, qModel.IsGSPLicenseOutDate);
}
                if(qModel.GSPLicenseOutDateTo!=default(DateTime)&&qModel.GSPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GSPLicenseOutDateTo==qModel.GSPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom);
                }
                else if(qModel.GSPLicenseOutDateTo>qModel.GSPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom,qModel.GSPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GMPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GMPLicenseId, qModel.GMPLicenseId);
                }
                if(qModel.QueryIsGMPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, qModel.IsGMPLicenseOutDate);
}
                if(qModel.GMPLicenseOutDateTo!=default(DateTime)&&qModel.GMPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GMPLicenseOutDateTo==qModel.GMPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom);
                }
                else if(qModel.GMPLicenseOutDateTo>qModel.GMPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom,qModel.GMPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.BusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessLicenseId, qModel.BusinessLicenseId);
                }
                if(qModel.QueryIsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, qModel.IsBusinessLicenseOutDate);
}
                if(qModel.BusinessLicenseeOutDateTo!=default(DateTime)&&qModel.BusinessLicenseeOutDateFrom!=default(DateTime)){
                if(qModel.BusinessLicenseeOutDateTo==qModel.BusinessLicenseeOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom);
                }
                else if(qModel.BusinessLicenseeOutDateTo>qModel.BusinessLicenseeOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom,qModel.BusinessLicenseeOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineProductionLicenseId, qModel.MedicineProductionLicenseId);
                }
                if(qModel.QueryIsMedicineProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, qModel.IsMedicineProductionLicenseOutDate);
}
                if(qModel.MedicineProductionLicenseOutDateTo!=default(DateTime)&&qModel.MedicineProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineProductionLicenseOutDateTo==qModel.MedicineProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom);
                }
                else if(qModel.MedicineProductionLicenseOutDateTo>qModel.MedicineProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom,qModel.MedicineProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseId, qModel.MedicineBusinessLicenseId);
                }
                if(qModel.QueryIsMedicineBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, qModel.IsMedicineBusinessLicenseOutDate);
}
                if(qModel.MedicineBusinessLicenseOutDateTo!=default(DateTime)&&qModel.MedicineBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineBusinessLicenseOutDateTo==qModel.MedicineBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom);
                }
                else if(qModel.MedicineBusinessLicenseOutDateTo>qModel.MedicineBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom,qModel.MedicineBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseId, qModel.InstrumentsProductionLicenseId);
                }
                if(qModel.QueryIsInstrumentsProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, qModel.IsInstrumentsProductionLicenseOutDate);
}
                if(qModel.InstrumentsProductionLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsProductionLicenseOutDateTo==qModel.InstrumentsProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsProductionLicenseOutDateTo>qModel.InstrumentsProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom,qModel.InstrumentsProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseId, qModel.InstrumentsBusinessLicenseId);
                }
                if(qModel.QueryIsInstrumentsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, qModel.IsInstrumentsBusinessLicenseOutDate);
}
                if(qModel.InstrumentsBusinessLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsBusinessLicenseOutDateTo==qModel.InstrumentsBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsBusinessLicenseOutDateTo>qModel.InstrumentsBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom,qModel.InstrumentsBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.TaxRegistrationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, qModel.TaxRegistrationCode);
                }
                if(qModel.TaxRegistrationFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.TaxRegistrationFile, qModel.TaxRegistrationFile);
                }
                if(qModel.AnnualFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AnnualFile, qModel.AnnualFile);
                }
                if(qModel.LastAnnualDteTo!=default(DateTime)&&qModel.LastAnnualDteFrom!=default(DateTime)){
                if(qModel.LastAnnualDteTo==qModel.LastAnnualDteFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, qModel.LastAnnualDteFrom);
                }
                else if(qModel.LastAnnualDteTo>qModel.LastAnnualDteFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, qModel.LastAnnualDteFrom,qModel.LastAnnualDteTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsApproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, qModel.IsApproval);
}
                if(qModel.ApprovalStatusValueTo==qModel.ApprovalStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom);
                }
                else if(qModel.ApprovalStatusValueTo>qModel.ApprovalStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom,qModel.ApprovalStatusValueTo);
                }//From>To不参与条件
                if(qModel.UnitTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UnitTypeId, qModel.UnitTypeId);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PurchaseUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseUnit>>("调用购货单位业务逻辑:通过查询Model分页查询实体(购货单位)失败", ex);
            }  
		}

		#endregion 购货单位 
		   
		#region 购货单位采购人员

		/// <summary>
        /// 获取实体购货单位采购人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseUnitBuyer GetPurchaseUnitBuyer(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseUnitBuyer>("调用购货单位采购人员业务逻辑:根据编号获取实体(购货单位采购人员)失败", ex);
            }
		} 

        /// <summary>
        /// 统计购货单位采购人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseUnitBuyer(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用购货单位采购人员业务逻辑:统计所有(购货单位采购人员)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加购货单位采购人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseUnitBuyer(PurchaseUnitBuyer value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位采购人员业务逻辑:添加实体(购货单位采购人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除购货单位采购人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseUnitBuyer(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位采购人员业务逻辑:删除实体(购货单位采购人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存购货单位采购人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseUnitBuyer(PurchaseUnitBuyer value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位采购人员业务逻辑:保存实体(购货单位采购人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录购货单位采购人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseUnitBuyer> AllPurchaseUnitBuyers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用购货单位采购人员业务逻辑:获取所有实体(购货单位采购人员)失败";
                return this.HandleException<List<PurchaseUnitBuyer>>(message, ex);
            }
		}

		 
        public List<PurchaseUnitBuyer> QueryPurchaseUnitBuyers(DateTime outdatefrom,DateTime outdateto,int purchaselimittypevaluefrom,int purchaselimittypevalueto,string name,string idnumber,string tel,string address,DateTime birthdayfrom,DateTime birthdayto,string gender,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool valid,bool queryvalid,bool enabled,bool queryenabled,bool ischecked,bool queryischecked,string idchecktype,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseUnitBuyer>(); 
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(purchaselimittypevalueto==purchaselimittypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseLimitTypeValue, purchaselimittypevaluefrom);
                }
                else if(purchaselimittypevalueto>purchaselimittypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchaseLimitTypeValue, purchaselimittypevaluefrom,purchaselimittypevalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(idnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, idnumber);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(birthdayto!=default(DateTime)&&birthdayfrom!=default(DateTime)){//From==To执行==
                if(birthdayto==birthdayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, birthdayfrom);
                }
                else if(birthdayto>birthdayfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, birthdayfrom,birthdayto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(queryischecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, ischecked);
}
                if(!string.IsNullOrEmpty(idchecktype)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, idchecktype);
                }

                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用购货单位采购人员业务逻辑:查询实体(购货单位采购人员)失败";
                return this.HandleException<List<PurchaseUnitBuyer>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseUnitBuyer> QueryPagedPurchaseUnitBuyers(DateTime outdatefrom,DateTime outdateto,int purchaselimittypevaluefrom,int purchaselimittypevalueto,string name,string idnumber,string tel,string address,DateTime birthdayfrom,DateTime birthdayto,string gender,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool valid,bool queryvalid,bool enabled,bool queryenabled,bool ischecked,bool queryischecked,string idchecktype,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitBuyer>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitBuyer>(); 
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(purchaselimittypevalueto==purchaselimittypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseLimitTypeValue, purchaselimittypevaluefrom);
                }
                else if(purchaselimittypevalueto>purchaselimittypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PurchaseLimitTypeValue, purchaselimittypevaluefrom,purchaselimittypevalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(idnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, idnumber);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(birthdayto!=default(DateTime)&&birthdayfrom!=default(DateTime)){//From==To执行==
                if(birthdayto==birthdayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, birthdayfrom);
                }
                else if(birthdayto>birthdayfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Birthday, birthdayfrom,birthdayto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(queryischecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, ischecked);
}
                if(!string.IsNullOrEmpty(idchecktype)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, idchecktype);
                }

                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseUnitBuyer>>("调用购货单位采购人员业务逻辑:查询实体(购货单位采购人员)失败", ex);
            }
        } 
 
        public List<PurchaseUnitBuyer> SearchPurchaseUnitBuyersByQueryModel(QueryPurchaseUnitBuyerModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitBuyer>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitBuyer>(); 
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.PurchaseLimitTypeValueTo==qModel.PurchaseLimitTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseLimitTypeValue, qModel.PurchaseLimitTypeValueFrom);
                }
                else if(qModel.PurchaseLimitTypeValueTo>qModel.PurchaseLimitTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchaseLimitTypeValue, qModel.PurchaseLimitTypeValueFrom,qModel.PurchaseLimitTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.IDFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDFile, qModel.IDFile);
                }
                if(!string.IsNullOrEmpty(qModel.IDNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(qModel.BirthdayTo!=default(DateTime)&&qModel.BirthdayFrom!=default(DateTime)){
                if(qModel.BirthdayTo==qModel.BirthdayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                }
                else if(qModel.BirthdayTo>qModel.BirthdayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom,qModel.BirthdayTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.QueryIsChecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, qModel.IsChecked);
}
                if(!string.IsNullOrEmpty(qModel.IDCheckType)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, qModel.IDCheckType);
                }
                if(qModel.IDCheckUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDCheckUserId, qModel.IDCheckUserId);
                }
                if(qModel.PurchaseUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用购货单位采购人员业务逻辑:通查询Model查询实体(购货单位采购人员)失败";
                return this.HandleException<List<PurchaseUnitBuyer>>(message, ex);
            }  
		} 

		 
        public List<PurchaseUnitBuyer> SearchPagedPurchaseUnitBuyersByQueryModel(QueryPurchaseUnitBuyerModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitBuyer>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitBuyer>(); 
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.PurchaseLimitTypeValueTo==qModel.PurchaseLimitTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PurchaseLimitTypeValue, qModel.PurchaseLimitTypeValueFrom);
                }
                else if(qModel.PurchaseLimitTypeValueTo>qModel.PurchaseLimitTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PurchaseLimitTypeValue, qModel.PurchaseLimitTypeValueFrom,qModel.PurchaseLimitTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.IDFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDFile, qModel.IDFile);
                }
                if(!string.IsNullOrEmpty(qModel.IDNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(qModel.BirthdayTo!=default(DateTime)&&qModel.BirthdayFrom!=default(DateTime)){
                if(qModel.BirthdayTo==qModel.BirthdayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                }
                else if(qModel.BirthdayTo>qModel.BirthdayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom,qModel.BirthdayTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.QueryIsChecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, qModel.IsChecked);
}
                if(!string.IsNullOrEmpty(qModel.IDCheckType)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, qModel.IDCheckType);
                }
                if(qModel.IDCheckUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDCheckUserId, qModel.IDCheckUserId);
                }
                if(qModel.PurchaseUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PurchaseUnitBuyerBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseUnitBuyer>>("调用购货单位采购人员业务逻辑:通过查询Model分页查询实体(购货单位采购人员)失败", ex);
            }  
		}

		#endregion 购货单位采购人员 
		   
		#region 购货单位提货人员

		/// <summary>
        /// 获取实体购货单位提货人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseUnitDeliverer GetPurchaseUnitDeliverer(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseUnitDeliverer>("调用购货单位提货人员业务逻辑:根据编号获取实体(购货单位提货人员)失败", ex);
            }
		} 

        /// <summary>
        /// 统计购货单位提货人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseUnitDeliverer(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用购货单位提货人员业务逻辑:统计所有(购货单位提货人员)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加购货单位提货人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseUnitDeliverer(PurchaseUnitDeliverer value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:添加实体(购货单位提货人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除购货单位提货人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseUnitDeliverer(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:删除实体(购货单位提货人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存购货单位提货人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseUnitDeliverer(PurchaseUnitDeliverer value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:保存实体(购货单位提货人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录购货单位提货人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseUnitDeliverer> AllPurchaseUnitDeliverers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用购货单位提货人员业务逻辑:获取所有实体(购货单位提货人员)失败";
                return this.HandleException<List<PurchaseUnitDeliverer>>(message, ex);
            }
		}

		 
        public List<PurchaseUnitDeliverer> QueryPurchaseUnitDeliverers(string name,string idfile,string idnumber,string tel,string address,DateTime birthdayfrom,DateTime birthdayto,string gender,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool valid,bool queryvalid,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseUnitDeliverer>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(idfile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDFile, idfile);
                }
                if(!string.IsNullOrEmpty(idnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, idnumber);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(birthdayto!=default(DateTime)&&birthdayfrom!=default(DateTime)){//From==To执行==
                if(birthdayto==birthdayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, birthdayfrom);
                }
                else if(birthdayto>birthdayfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, birthdayfrom,birthdayto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:查询实体(购货单位提货人员)失败";
                return this.HandleException<List<PurchaseUnitDeliverer>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseUnitDeliverer> QueryPagedPurchaseUnitDeliverers(string name,string idfile,string idnumber,string tel,string address,DateTime birthdayfrom,DateTime birthdayto,string gender,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool valid,bool queryvalid,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitDeliverer>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitDeliverer>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(idfile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDFile, idfile);
                }
                if(!string.IsNullOrEmpty(idnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, idnumber);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(birthdayto!=default(DateTime)&&birthdayfrom!=default(DateTime)){//From==To执行==
                if(birthdayto==birthdayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, birthdayfrom);
                }
                else if(birthdayto>birthdayfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Birthday, birthdayfrom,birthdayto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseUnitDeliverer>>("调用购货单位提货人员业务逻辑:查询实体(购货单位提货人员)失败", ex);
            }
        } 
 
        public List<PurchaseUnitDeliverer> SearchPurchaseUnitDeliverersByQueryModel(QueryPurchaseUnitDelivererModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitDeliverer>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitDeliverer>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.IDFile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDFile, qModel.IDFile);
                }
                if(!string.IsNullOrEmpty(qModel.IDNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(qModel.BirthdayTo!=default(DateTime)&&qModel.BirthdayFrom!=default(DateTime)){
                if(qModel.BirthdayTo==qModel.BirthdayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                }
                else if(qModel.BirthdayTo>qModel.BirthdayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom,qModel.BirthdayTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.PurchaseUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用购货单位提货人员业务逻辑:通查询Model查询实体(购货单位提货人员)失败";
                return this.HandleException<List<PurchaseUnitDeliverer>>(message, ex);
            }  
		} 

		 
        public List<PurchaseUnitDeliverer> SearchPagedPurchaseUnitDeliverersByQueryModel(QueryPurchaseUnitDelivererModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitDeliverer>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitDeliverer>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.IDFile)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDFile, qModel.IDFile);
                }
                if(!string.IsNullOrEmpty(qModel.IDNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(qModel.BirthdayTo!=default(DateTime)&&qModel.BirthdayFrom!=default(DateTime)){
                if(qModel.BirthdayTo==qModel.BirthdayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                }
                else if(qModel.BirthdayTo>qModel.BirthdayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom,qModel.BirthdayTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.PurchaseUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.PurchaseUnitDelivererBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseUnitDeliverer>>("调用购货单位提货人员业务逻辑:通过查询Model分页查询实体(购货单位提货人员)失败", ex);
            }  
		}

		#endregion 购货单位提货人员 
		   
		#region 购货单位类型

		/// <summary>
        /// 获取实体购货单位类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchaseUnitType GetPurchaseUnitType(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchaseUnitType>("调用购货单位类型业务逻辑:根据编号获取实体(购货单位类型)失败", ex);
            }
		} 

        /// <summary>
        /// 统计购货单位类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchaseUnitType(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用购货单位类型业务逻辑:统计所有(购货单位类型)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加购货单位类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchaseUnitType(PurchaseUnitType value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位类型业务逻辑:添加实体(购货单位类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除购货单位类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchaseUnitType(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位类型业务逻辑:删除实体(购货单位类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存购货单位类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchaseUnitType(PurchaseUnitType value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位类型业务逻辑:保存实体(购货单位类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录购货单位类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchaseUnitType> AllPurchaseUnitTypes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用购货单位类型业务逻辑:获取所有实体(购货单位类型)失败";
                return this.HandleException<List<PurchaseUnitType>>(message, ex);
            }
		}

		 
        public List<PurchaseUnitType> QueryPurchaseUnitTypes(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchaseUnitType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用购货单位类型业务逻辑:查询实体(购货单位类型)失败";
                return this.HandleException<List<PurchaseUnitType>>(msg, ex);
            }
        } 
		
		 
        public List<PurchaseUnitType> QueryPagedPurchaseUnitTypes(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitType>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchaseUnitType>>("调用购货单位类型业务逻辑:查询实体(购货单位类型)失败", ex);
            }
        } 
 
        public List<PurchaseUnitType> SearchPurchaseUnitTypesByQueryModel(QueryPurchaseUnitTypeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitType>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用购货单位类型业务逻辑:通查询Model查询实体(购货单位类型)失败";
                return this.HandleException<List<PurchaseUnitType>>(message, ex);
            }  
		} 

		 
        public List<PurchaseUnitType> SearchPagedPurchaseUnitTypesByQueryModel(QueryPurchaseUnitTypeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchaseUnitType>();
                var queryBuilder = QueryBuilder.Create<PurchaseUnitType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.PurchaseUnitTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchaseUnitType>>("调用购货单位类型业务逻辑:通过查询Model分页查询实体(购货单位类型)失败", ex);
            }  
		}

		#endregion 购货单位类型 
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchasingPlan GetPurchasingPlan(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchasingPlanBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchasingPlan>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchasingPlan(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchasingPlanBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchasingPlan(PurchasingPlan value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchasingPlanBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchasingPlan(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchasingPlanBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchasingPlan(PurchasingPlan value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchasingPlanBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchasingPlan> AllPurchasingPlans(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchasingPlanBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<PurchasingPlan>>(message, ex);
            }
		}

		 
        public List<PurchasingPlan> QueryPurchasingPlans(out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchasingPlan>(); 

                return HandlerFactory.PurchasingPlanBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<PurchasingPlan>>(msg, ex);
            }
        } 
		
		 
        public List<PurchasingPlan> QueryPagedPurchasingPlans(int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchasingPlan>();
                var queryBuilder = QueryBuilder.Create<PurchasingPlan>(); 

                return HandlerFactory.PurchasingPlanBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchasingPlan>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<PurchasingPlan> SearchPurchasingPlansByQueryModel(QueryPurchasingPlanModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchasingPlan>();
                var queryBuilder = QueryBuilder.Create<PurchasingPlan>(); 

                return HandlerFactory.PurchasingPlanBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<PurchasingPlan>>(message, ex);
            }  
		} 

		 
        public List<PurchasingPlan> SearchPagedPurchasingPlansByQueryModel(QueryPurchasingPlanModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchasingPlan>();
                var queryBuilder = QueryBuilder.Create<PurchasingPlan>(); 

                return HandlerFactory.PurchasingPlanBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchasingPlan>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public PurchasingPlanDetail GetPurchasingPlanDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<PurchasingPlanDetail>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountPurchasingPlanDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddPurchasingPlanDetail(PurchasingPlanDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeletePurchasingPlanDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SavePurchasingPlanDetail(PurchasingPlanDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<PurchasingPlanDetail> AllPurchasingPlanDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<PurchasingPlanDetail>>(message, ex);
            }
		}

		 
        public List<PurchasingPlanDetail> QueryPurchasingPlanDetails(out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<PurchasingPlanDetail>(); 

                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<PurchasingPlanDetail>>(msg, ex);
            }
        } 
		
		 
        public List<PurchasingPlanDetail> QueryPagedPurchasingPlanDetails(int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchasingPlanDetail>();
                var queryBuilder = QueryBuilder.Create<PurchasingPlanDetail>(); 

                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<PurchasingPlanDetail>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<PurchasingPlanDetail> SearchPurchasingPlanDetailsByQueryModel(QueryPurchasingPlanDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<PurchasingPlanDetail>();
                var queryBuilder = QueryBuilder.Create<PurchasingPlanDetail>(); 

                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<PurchasingPlanDetail>>(message, ex);
            }  
		} 

		 
        public List<PurchasingPlanDetail> SearchPagedPurchasingPlanDetailsByQueryModel(QueryPurchasingPlanDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<PurchasingPlanDetail>();
                var queryBuilder = QueryBuilder.Create<PurchasingPlanDetail>(); 

                return HandlerFactory.PurchasingPlanDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<PurchasingPlanDetail>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 不常用字(生僻字)

		/// <summary>
        /// 获取实体不常用字(生僻字)
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Rareword GetRareword(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RarewordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Rareword>("调用不常用字(生僻字)业务逻辑:根据编号获取实体(不常用字(生僻字))失败", ex);
            }
		} 

        /// <summary>
        /// 统计不常用字(生僻字)
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountRareword(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RarewordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用不常用字(生僻字)业务逻辑:统计所有(不常用字(生僻字))数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加不常用字(生僻字)
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddRareword(Rareword value,out string msg)
		{
			try
            {
                return HandlerFactory.RarewordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用不常用字(生僻字)业务逻辑:添加实体(不常用字(生僻字))失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除不常用字(生僻字)
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteRareword(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.RarewordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用不常用字(生僻字)业务逻辑:删除实体(不常用字(生僻字))失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存不常用字(生僻字)
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveRareword(Rareword value, out string msg)
		{
			try
            {
                return HandlerFactory.RarewordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用不常用字(生僻字)业务逻辑:保存实体(不常用字(生僻字))失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录不常用字(生僻字)
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Rareword> AllRarewords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RarewordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用不常用字(生僻字)业务逻辑:获取所有实体(不常用字(生僻字))失败";
                return this.HandleException<List<Rareword>>(message, ex);
            }
		}

		 
        public List<Rareword> QueryRarewords(string pinyin,string word,string parts,string code,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Rareword>(); 
                if(!string.IsNullOrEmpty(pinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinYin, pinyin);
                }
                if(!string.IsNullOrEmpty(word)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Word, word);
                }
                if(!string.IsNullOrEmpty(parts)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Parts, parts);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }

                return HandlerFactory.RarewordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用不常用字(生僻字)业务逻辑:查询实体(不常用字(生僻字))失败";
                return this.HandleException<List<Rareword>>(msg, ex);
            }
        } 
		
		 
        public List<Rareword> QueryPagedRarewords(string pinyin,string word,string parts,string code,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Rareword>();
                var queryBuilder = QueryBuilder.Create<Rareword>(); 
                if(!string.IsNullOrEmpty(pinyin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinYin, pinyin);
                }
                if(!string.IsNullOrEmpty(word)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Word, word);
                }
                if(!string.IsNullOrEmpty(parts)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Parts, parts);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }

                return HandlerFactory.RarewordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Rareword>>("调用不常用字(生僻字)业务逻辑:查询实体(不常用字(生僻字))失败", ex);
            }
        } 
 
        public List<Rareword> SearchRarewordsByQueryModel(QueryRarewordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Rareword>();
                var queryBuilder = QueryBuilder.Create<Rareword>(); 
                if(!string.IsNullOrEmpty(qModel.PinYin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinYin, qModel.PinYin);
                }
                if(!string.IsNullOrEmpty(qModel.Word)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Word, qModel.Word);
                }
                if(!string.IsNullOrEmpty(qModel.Parts)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Parts, qModel.Parts);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }

                return HandlerFactory.RarewordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用不常用字(生僻字)业务逻辑:通查询Model查询实体(不常用字(生僻字))失败";
                return this.HandleException<List<Rareword>>(message, ex);
            }  
		} 

		 
        public List<Rareword> SearchPagedRarewordsByQueryModel(QueryRarewordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Rareword>();
                var queryBuilder = QueryBuilder.Create<Rareword>(); 
                if(!string.IsNullOrEmpty(qModel.PinYin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinYin, qModel.PinYin);
                }
                if(!string.IsNullOrEmpty(qModel.Word)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Word, qModel.Word);
                }
                if(!string.IsNullOrEmpty(qModel.Parts)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Parts, qModel.Parts);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }

                return HandlerFactory.RarewordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Rareword>>("调用不常用字(生僻字)业务逻辑:通过查询Model分页查询实体(不常用字(生僻字))失败", ex);
            }  
		}

		#endregion 不常用字(生僻字) 
		   
		#region 零售会员

		/// <summary>
        /// 获取实体零售会员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public RetailMember GetRetailMember(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailMemberBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<RetailMember>("调用零售会员业务逻辑:根据编号获取实体(零售会员)失败", ex);
            }
		} 

        /// <summary>
        /// 统计零售会员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountRetailMember(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailMemberBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用零售会员业务逻辑:统计所有(零售会员)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加零售会员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddRetailMember(RetailMember value,out string msg)
		{
			try
            {
                return HandlerFactory.RetailMemberBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用零售会员业务逻辑:添加实体(零售会员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除零售会员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteRetailMember(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.RetailMemberBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用零售会员业务逻辑:删除实体(零售会员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存零售会员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveRetailMember(RetailMember value, out string msg)
		{
			try
            {
                return HandlerFactory.RetailMemberBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用零售会员业务逻辑:保存实体(零售会员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录零售会员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<RetailMember> AllRetailMembers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailMemberBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用零售会员业务逻辑:获取所有实体(零售会员)失败";
                return this.HandleException<List<RetailMember>>(message, ex);
            }
		}

		 
        public List<RetailMember> QueryRetailMembers(string name,string code,bool enabled,bool queryenabled,int retailcustomertypevaluefrom,int retailcustomertypevalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<RetailMember>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(retailcustomertypevalueto==retailcustomertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom);
                }
                else if(retailcustomertypevalueto>retailcustomertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom,retailcustomertypevalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.RetailMemberBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用零售会员业务逻辑:查询实体(零售会员)失败";
                return this.HandleException<List<RetailMember>>(msg, ex);
            }
        } 
		
		 
        public List<RetailMember> QueryPagedRetailMembers(string name,string code,bool enabled,bool queryenabled,int retailcustomertypevaluefrom,int retailcustomertypevalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RetailMember>();
                var queryBuilder = QueryBuilder.Create<RetailMember>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(retailcustomertypevalueto==retailcustomertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom);
                }
                else if(retailcustomertypevalueto>retailcustomertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom,retailcustomertypevalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.RetailMemberBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<RetailMember>>("调用零售会员业务逻辑:查询实体(零售会员)失败", ex);
            }
        } 
 
        public List<RetailMember> SearchRetailMembersByQueryModel(QueryRetailMemberModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<RetailMember>();
                var queryBuilder = QueryBuilder.Create<RetailMember>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.RetailCustomerTypeValueTo==qModel.RetailCustomerTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom);
                }
                else if(qModel.RetailCustomerTypeValueTo>qModel.RetailCustomerTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom,qModel.RetailCustomerTypeValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.RetailMemberBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用零售会员业务逻辑:通查询Model查询实体(零售会员)失败";
                return this.HandleException<List<RetailMember>>(message, ex);
            }  
		} 

		 
        public List<RetailMember> SearchPagedRetailMembersByQueryModel(QueryRetailMemberModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RetailMember>();
                var queryBuilder = QueryBuilder.Create<RetailMember>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.RetailCustomerTypeValueTo==qModel.RetailCustomerTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom);
                }
                else if(qModel.RetailCustomerTypeValueTo>qModel.RetailCustomerTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom,qModel.RetailCustomerTypeValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.RetailMemberBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<RetailMember>>("调用零售会员业务逻辑:通过查询Model分页查询实体(零售会员)失败", ex);
            }  
		}

		#endregion 零售会员 
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public RetailOrder GetRetailOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<RetailOrder>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountRetailOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddRetailOrder(RetailOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.RetailOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteRetailOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.RetailOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveRetailOrder(RetailOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.RetailOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<RetailOrder> AllRetailOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<RetailOrder>>(message, ex);
            }
		}

		 
        public List<RetailOrder> QueryRetailOrders(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string code,string description,decimal totalmoneyfrom,decimal totalmoneyto,decimal reducemoneyfrom,decimal reducemoneyto,decimal receivablemoneyfrom,decimal receivablemoneyto,decimal gotmoneyfrom,decimal gotmoneyto,decimal changemoneyfrom,decimal changemoneyto,decimal realpaymoneyfrom,decimal realpaymoneyto,int retailcustomertypevaluefrom,int retailcustomertypevalueto,int retailpaymentmethodvaluefrom,int retailpaymentmethodvalueto,decimal totalrefundfrom,decimal totalrefundto,decimal returnreducemoneyfrom,decimal returnreducemoneyto,decimal returnreceivablemoneyfrom,decimal returnreceivablemoneyto,decimal returnrealreceivemoneyfrom,decimal returnrealreceivemoneyto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<RetailOrder>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From>To不参与条件
                if(reducemoneyto==reducemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReduceMoney, reducemoneyfrom);
                }
                else if(reducemoneyto>reducemoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReduceMoney, reducemoneyfrom,reducemoneyto);
                }//From>To不参与条件
                if(receivablemoneyto==receivablemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceivableMoney, receivablemoneyfrom);
                }
                else if(receivablemoneyto>receivablemoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReceivableMoney, receivablemoneyfrom,receivablemoneyto);
                }//From>To不参与条件
                if(gotmoneyto==gotmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.GotMoney, gotmoneyfrom);
                }
                else if(gotmoneyto>gotmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.GotMoney, gotmoneyfrom,gotmoneyto);
                }//From>To不参与条件
                if(changemoneyto==changemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeMoney, changemoneyfrom);
                }
                else if(changemoneyto>changemoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ChangeMoney, changemoneyfrom,changemoneyto);
                }//From>To不参与条件
                if(realpaymoneyto==realpaymoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RealPayMoney, realpaymoneyfrom);
                }
                else if(realpaymoneyto>realpaymoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.RealPayMoney, realpaymoneyfrom,realpaymoneyto);
                }//From>To不参与条件
                if(retailcustomertypevalueto==retailcustomertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom);
                }
                else if(retailcustomertypevalueto>retailcustomertypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom,retailcustomertypevalueto);
                }//From>To不参与条件
                if(retailpaymentmethodvalueto==retailpaymentmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPaymentMethodValue, retailpaymentmethodvaluefrom);
                }
                else if(retailpaymentmethodvalueto>retailpaymentmethodvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailPaymentMethodValue, retailpaymentmethodvaluefrom,retailpaymentmethodvalueto);
                }//From>To不参与条件
                if(totalrefundto==totalrefundfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalRefund, totalrefundfrom);
                }
                else if(totalrefundto>totalrefundfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalRefund, totalrefundfrom,totalrefundto);
                }//From>To不参与条件
                if(returnreducemoneyto==returnreducemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReduceMoney, returnreducemoneyfrom);
                }
                else if(returnreducemoneyto>returnreducemoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReduceMoney, returnreducemoneyfrom,returnreducemoneyto);
                }//From>To不参与条件
                if(returnreceivablemoneyto==returnreceivablemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReceivableMoney, returnreceivablemoneyfrom);
                }
                else if(returnreceivablemoneyto>returnreceivablemoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReceivableMoney, returnreceivablemoneyfrom,returnreceivablemoneyto);
                }//From>To不参与条件
                if(returnrealreceivemoneyto==returnrealreceivemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnRealReceiveMoney, returnrealreceivemoneyfrom);
                }
                else if(returnrealreceivemoneyto>returnrealreceivemoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnRealReceiveMoney, returnrealreceivemoneyfrom,returnrealreceivemoneyto);
                }//From>To不参与条件

                return HandlerFactory.RetailOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<RetailOrder>>(msg, ex);
            }
        } 
		
		 
        public List<RetailOrder> QueryPagedRetailOrders(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string code,string description,decimal totalmoneyfrom,decimal totalmoneyto,decimal reducemoneyfrom,decimal reducemoneyto,decimal receivablemoneyfrom,decimal receivablemoneyto,decimal gotmoneyfrom,decimal gotmoneyto,decimal changemoneyfrom,decimal changemoneyto,decimal realpaymoneyfrom,decimal realpaymoneyto,int retailcustomertypevaluefrom,int retailcustomertypevalueto,int retailpaymentmethodvaluefrom,int retailpaymentmethodvalueto,decimal totalrefundfrom,decimal totalrefundto,decimal returnreducemoneyfrom,decimal returnreducemoneyto,decimal returnreceivablemoneyfrom,decimal returnreceivablemoneyto,decimal returnrealreceivemoneyfrom,decimal returnrealreceivemoneyto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RetailOrder>();
                var queryBuilder = QueryBuilder.Create<RetailOrder>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From<To不参与条件
                if(reducemoneyto==reducemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReduceMoney, reducemoneyfrom);
                }
                else if(reducemoneyto>reducemoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReduceMoney, reducemoneyfrom,reducemoneyto);
                }//From<To不参与条件
                if(receivablemoneyto==receivablemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceivableMoney, receivablemoneyfrom);
                }
                else if(receivablemoneyto>receivablemoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReceivableMoney, receivablemoneyfrom,receivablemoneyto);
                }//From<To不参与条件
                if(gotmoneyto==gotmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.GotMoney, gotmoneyfrom);
                }
                else if(gotmoneyto>gotmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.GotMoney, gotmoneyfrom,gotmoneyto);
                }//From<To不参与条件
                if(changemoneyto==changemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeMoney, changemoneyfrom);
                }
                else if(changemoneyto>changemoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ChangeMoney, changemoneyfrom,changemoneyto);
                }//From<To不参与条件
                if(realpaymoneyto==realpaymoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.RealPayMoney, realpaymoneyfrom);
                }
                else if(realpaymoneyto>realpaymoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.RealPayMoney, realpaymoneyfrom,realpaymoneyto);
                }//From<To不参与条件
                if(retailcustomertypevalueto==retailcustomertypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom);
                }
                else if(retailcustomertypevalueto>retailcustomertypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, retailcustomertypevaluefrom,retailcustomertypevalueto);
                }//From<To不参与条件
                if(retailpaymentmethodvalueto==retailpaymentmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPaymentMethodValue, retailpaymentmethodvaluefrom);
                }
                else if(retailpaymentmethodvalueto>retailpaymentmethodvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.RetailPaymentMethodValue, retailpaymentmethodvaluefrom,retailpaymentmethodvalueto);
                }//From<To不参与条件
                if(totalrefundto==totalrefundfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalRefund, totalrefundfrom);
                }
                else if(totalrefundto>totalrefundfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalRefund, totalrefundfrom,totalrefundto);
                }//From<To不参与条件
                if(returnreducemoneyto==returnreducemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReduceMoney, returnreducemoneyfrom);
                }
                else if(returnreducemoneyto>returnreducemoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnReduceMoney, returnreducemoneyfrom,returnreducemoneyto);
                }//From<To不参与条件
                if(returnreceivablemoneyto==returnreceivablemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReceivableMoney, returnreceivablemoneyfrom);
                }
                else if(returnreceivablemoneyto>returnreceivablemoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnReceivableMoney, returnreceivablemoneyfrom,returnreceivablemoneyto);
                }//From<To不参与条件
                if(returnrealreceivemoneyto==returnrealreceivemoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnRealReceiveMoney, returnrealreceivemoneyfrom);
                }
                else if(returnrealreceivemoneyto>returnrealreceivemoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnRealReceiveMoney, returnrealreceivemoneyfrom,returnrealreceivemoneyto);
                }//From<To不参与条件

                return HandlerFactory.RetailOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<RetailOrder>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<RetailOrder> SearchRetailOrdersByQueryModel(QueryRetailOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<RetailOrder>();
                var queryBuilder = QueryBuilder.Create<RetailOrder>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.ReduceMoneyTo==qModel.ReduceMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReduceMoney, qModel.ReduceMoneyFrom);
                }
                else if(qModel.ReduceMoneyTo>qModel.ReduceMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReduceMoney, qModel.ReduceMoneyFrom,qModel.ReduceMoneyTo);
                }//From>To不参与条件
                if(qModel.ReceivableMoneyTo==qModel.ReceivableMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceivableMoney, qModel.ReceivableMoneyFrom);
                }
                else if(qModel.ReceivableMoneyTo>qModel.ReceivableMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReceivableMoney, qModel.ReceivableMoneyFrom,qModel.ReceivableMoneyTo);
                }//From>To不参与条件
                if(qModel.GotMoneyTo==qModel.GotMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GotMoney, qModel.GotMoneyFrom);
                }
                else if(qModel.GotMoneyTo>qModel.GotMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GotMoney, qModel.GotMoneyFrom,qModel.GotMoneyTo);
                }//From>To不参与条件
                if(qModel.ChangeMoneyTo==qModel.ChangeMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeMoney, qModel.ChangeMoneyFrom);
                }
                else if(qModel.ChangeMoneyTo>qModel.ChangeMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ChangeMoney, qModel.ChangeMoneyFrom,qModel.ChangeMoneyTo);
                }//From>To不参与条件
                if(qModel.RealPayMoneyTo==qModel.RealPayMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RealPayMoney, qModel.RealPayMoneyFrom);
                }
                else if(qModel.RealPayMoneyTo>qModel.RealPayMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RealPayMoney, qModel.RealPayMoneyFrom,qModel.RealPayMoneyTo);
                }//From>To不参与条件
                if(qModel.RetailCustomerTypeValueTo==qModel.RetailCustomerTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom);
                }
                else if(qModel.RetailCustomerTypeValueTo>qModel.RetailCustomerTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom,qModel.RetailCustomerTypeValueTo);
                }//From>To不参与条件
                if(qModel.RetailPaymentMethodValueTo==qModel.RetailPaymentMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPaymentMethodValue, qModel.RetailPaymentMethodValueFrom);
                }
                else if(qModel.RetailPaymentMethodValueTo>qModel.RetailPaymentMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailPaymentMethodValue, qModel.RetailPaymentMethodValueFrom,qModel.RetailPaymentMethodValueTo);
                }//From>To不参与条件
                if(qModel.TotalRefundTo==qModel.TotalRefundFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalRefund, qModel.TotalRefundFrom);
                }
                else if(qModel.TotalRefundTo>qModel.TotalRefundFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalRefund, qModel.TotalRefundFrom,qModel.TotalRefundTo);
                }//From>To不参与条件
                if(qModel.ReturnReduceMoneyTo==qModel.ReturnReduceMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReduceMoney, qModel.ReturnReduceMoneyFrom);
                }
                else if(qModel.ReturnReduceMoneyTo>qModel.ReturnReduceMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReduceMoney, qModel.ReturnReduceMoneyFrom,qModel.ReturnReduceMoneyTo);
                }//From>To不参与条件
                if(qModel.ReturnReceivableMoneyTo==qModel.ReturnReceivableMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReceivableMoney, qModel.ReturnReceivableMoneyFrom);
                }
                else if(qModel.ReturnReceivableMoneyTo>qModel.ReturnReceivableMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReceivableMoney, qModel.ReturnReceivableMoneyFrom,qModel.ReturnReceivableMoneyTo);
                }//From>To不参与条件
                if(qModel.ReturnRealReceiveMoneyTo==qModel.ReturnRealReceiveMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnRealReceiveMoney, qModel.ReturnRealReceiveMoneyFrom);
                }
                else if(qModel.ReturnRealReceiveMoneyTo>qModel.ReturnRealReceiveMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnRealReceiveMoney, qModel.ReturnRealReceiveMoneyFrom,qModel.ReturnRealReceiveMoneyTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.RetailOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<RetailOrder>>(message, ex);
            }  
		} 

		 
        public List<RetailOrder> SearchPagedRetailOrdersByQueryModel(QueryRetailOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RetailOrder>();
                var queryBuilder = QueryBuilder.Create<RetailOrder>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.ReduceMoneyTo==qModel.ReduceMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReduceMoney, qModel.ReduceMoneyFrom);
                }
                else if(qModel.ReduceMoneyTo>qModel.ReduceMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReduceMoney, qModel.ReduceMoneyFrom,qModel.ReduceMoneyTo);
                }//From>To不参与条件
                if(qModel.ReceivableMoneyTo==qModel.ReceivableMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReceivableMoney, qModel.ReceivableMoneyFrom);
                }
                else if(qModel.ReceivableMoneyTo>qModel.ReceivableMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReceivableMoney, qModel.ReceivableMoneyFrom,qModel.ReceivableMoneyTo);
                }//From>To不参与条件
                if(qModel.GotMoneyTo==qModel.GotMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GotMoney, qModel.GotMoneyFrom);
                }
                else if(qModel.GotMoneyTo>qModel.GotMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GotMoney, qModel.GotMoneyFrom,qModel.GotMoneyTo);
                }//From>To不参与条件
                if(qModel.ChangeMoneyTo==qModel.ChangeMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeMoney, qModel.ChangeMoneyFrom);
                }
                else if(qModel.ChangeMoneyTo>qModel.ChangeMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ChangeMoney, qModel.ChangeMoneyFrom,qModel.ChangeMoneyTo);
                }//From>To不参与条件
                if(qModel.RealPayMoneyTo==qModel.RealPayMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RealPayMoney, qModel.RealPayMoneyFrom);
                }
                else if(qModel.RealPayMoneyTo>qModel.RealPayMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RealPayMoney, qModel.RealPayMoneyFrom,qModel.RealPayMoneyTo);
                }//From>To不参与条件
                if(qModel.RetailCustomerTypeValueTo==qModel.RetailCustomerTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom);
                }
                else if(qModel.RetailCustomerTypeValueTo>qModel.RetailCustomerTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailCustomerTypeValue, qModel.RetailCustomerTypeValueFrom,qModel.RetailCustomerTypeValueTo);
                }//From>To不参与条件
                if(qModel.RetailPaymentMethodValueTo==qModel.RetailPaymentMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.RetailPaymentMethodValue, qModel.RetailPaymentMethodValueFrom);
                }
                else if(qModel.RetailPaymentMethodValueTo>qModel.RetailPaymentMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.RetailPaymentMethodValue, qModel.RetailPaymentMethodValueFrom,qModel.RetailPaymentMethodValueTo);
                }//From>To不参与条件
                if(qModel.TotalRefundTo==qModel.TotalRefundFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalRefund, qModel.TotalRefundFrom);
                }
                else if(qModel.TotalRefundTo>qModel.TotalRefundFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalRefund, qModel.TotalRefundFrom,qModel.TotalRefundTo);
                }//From>To不参与条件
                if(qModel.ReturnReduceMoneyTo==qModel.ReturnReduceMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReduceMoney, qModel.ReturnReduceMoneyFrom);
                }
                else if(qModel.ReturnReduceMoneyTo>qModel.ReturnReduceMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReduceMoney, qModel.ReturnReduceMoneyFrom,qModel.ReturnReduceMoneyTo);
                }//From>To不参与条件
                if(qModel.ReturnReceivableMoneyTo==qModel.ReturnReceivableMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReceivableMoney, qModel.ReturnReceivableMoneyFrom);
                }
                else if(qModel.ReturnReceivableMoneyTo>qModel.ReturnReceivableMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReceivableMoney, qModel.ReturnReceivableMoneyFrom,qModel.ReturnReceivableMoneyTo);
                }//From>To不参与条件
                if(qModel.ReturnRealReceiveMoneyTo==qModel.ReturnRealReceiveMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnRealReceiveMoney, qModel.ReturnRealReceiveMoneyFrom);
                }
                else if(qModel.ReturnRealReceiveMoneyTo>qModel.ReturnRealReceiveMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnRealReceiveMoney, qModel.ReturnRealReceiveMoneyFrom,qModel.ReturnRealReceiveMoneyTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.RetailOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<RetailOrder>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 零售单明细

		/// <summary>
        /// 获取实体零售单明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public RetailOrderDetail GetRetailOrderDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailOrderDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<RetailOrderDetail>("调用零售单明细业务逻辑:根据编号获取实体(零售单明细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计零售单明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountRetailOrderDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailOrderDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用零售单明细业务逻辑:统计所有(零售单明细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加零售单明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddRetailOrderDetail(RetailOrderDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.RetailOrderDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用零售单明细业务逻辑:添加实体(零售单明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除零售单明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteRetailOrderDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.RetailOrderDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用零售单明细业务逻辑:删除实体(零售单明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存零售单明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveRetailOrderDetail(RetailOrderDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.RetailOrderDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用零售单明细业务逻辑:保存实体(零售单明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录零售单明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<RetailOrderDetail> AllRetailOrderDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RetailOrderDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用零售单明细业务逻辑:获取所有实体(零售单明细)失败";
                return this.HandleException<List<RetailOrderDetail>>(message, ex);
            }
		}

		 
        public List<RetailOrderDetail> QueryRetailOrderDetails(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int indexfrom,int indexto,string productname,string productcode,string batchnumber,int amountfrom,int amountto,int returnamountfrom,int returnamountto,bool isdismanting,bool queryisdismanting,int dismantingamountfrom,int dismantingamountto,decimal unitpricefrom,decimal unitpriceto,decimal dismantingunitpricefrom,decimal dismantingunitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal actualdismantingunitpricefrom,decimal actualdismantingunitpriceto,string measurementunit,string specificationcode,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,bool isdiscount,bool queryisdiscount,int discountfrom,int discountto,int discountpricefrom,int discountpriceto,decimal totalmoneyfrom,decimal totalmoneyto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<RetailOrderDetail>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From>To不参与条件
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From>To不参与条件
                if(queryisdismanting){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDismanting, isdismanting);
}
                if(dismantingamountto==dismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, dismantingamountfrom);
                }
                else if(dismantingamountto>dismantingamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, dismantingamountfrom,dismantingamountto);
                }//From>To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From>To不参与条件
                if(dismantingunitpriceto==dismantingunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingUnitPrice, dismantingunitpricefrom);
                }
                else if(dismantingunitpriceto>dismantingunitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingUnitPrice, dismantingunitpricefrom,dismantingunitpriceto);
                }//From>To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From>To不参与条件
                if(actualdismantingunitpriceto==actualdismantingunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualDismantingUnitPrice, actualdismantingunitpricefrom);
                }
                else if(actualdismantingunitpriceto>actualdismantingunitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualDismantingUnitPrice, actualdismantingunitpricefrom,actualdismantingunitpriceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(queryisdiscount){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDiscount, isdiscount);
}
                if(discountto==discountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Discount, discountfrom);
                }
                else if(discountto>discountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Discount, discountfrom,discountto);
                }//From>To不参与条件
                if(discountpriceto==discountpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DiscountPrice, discountpricefrom);
                }
                else if(discountpriceto>discountpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.DiscountPrice, discountpricefrom,discountpriceto);
                }//From>To不参与条件
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From>To不参与条件

                return HandlerFactory.RetailOrderDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用零售单明细业务逻辑:查询实体(零售单明细)失败";
                return this.HandleException<List<RetailOrderDetail>>(msg, ex);
            }
        } 
		
		 
        public List<RetailOrderDetail> QueryPagedRetailOrderDetails(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int indexfrom,int indexto,string productname,string productcode,string batchnumber,int amountfrom,int amountto,int returnamountfrom,int returnamountto,bool isdismanting,bool queryisdismanting,int dismantingamountfrom,int dismantingamountto,decimal unitpricefrom,decimal unitpriceto,decimal dismantingunitpricefrom,decimal dismantingunitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal actualdismantingunitpricefrom,decimal actualdismantingunitpriceto,string measurementunit,string specificationcode,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,bool isdiscount,bool queryisdiscount,int discountfrom,int discountto,int discountpricefrom,int discountpriceto,decimal totalmoneyfrom,decimal totalmoneyto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RetailOrderDetail>();
                var queryBuilder = QueryBuilder.Create<RetailOrderDetail>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From<To不参与条件
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From<To不参与条件
                if(queryisdismanting){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDismanting, isdismanting);
}
                if(dismantingamountto==dismantingamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, dismantingamountfrom);
                }
                else if(dismantingamountto>dismantingamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, dismantingamountfrom,dismantingamountto);
                }//From<To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From<To不参与条件
                if(dismantingunitpriceto==dismantingunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingUnitPrice, dismantingunitpricefrom);
                }
                else if(dismantingunitpriceto>dismantingunitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DismantingUnitPrice, dismantingunitpricefrom,dismantingunitpriceto);
                }//From<To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From<To不参与条件
                if(actualdismantingunitpriceto==actualdismantingunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualDismantingUnitPrice, actualdismantingunitpricefrom);
                }
                else if(actualdismantingunitpriceto>actualdismantingunitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ActualDismantingUnitPrice, actualdismantingunitpricefrom,actualdismantingunitpriceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(queryisdiscount){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDiscount, isdiscount);
}
                if(discountto==discountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Discount, discountfrom);
                }
                else if(discountto>discountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Discount, discountfrom,discountto);
                }//From<To不参与条件
                if(discountpriceto==discountpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.DiscountPrice, discountpricefrom);
                }
                else if(discountpriceto>discountpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.DiscountPrice, discountpricefrom,discountpriceto);
                }//From<To不参与条件
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From<To不参与条件

                return HandlerFactory.RetailOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<RetailOrderDetail>>("调用零售单明细业务逻辑:查询实体(零售单明细)失败", ex);
            }
        } 
 
        public List<RetailOrderDetail> SearchRetailOrderDetailsByQueryModel(QueryRetailOrderDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<RetailOrderDetail>();
                var queryBuilder = QueryBuilder.Create<RetailOrderDetail>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.QueryIsDismanting){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDismanting, qModel.IsDismanting);
}
                if(qModel.DismantingAmountTo==qModel.DismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, qModel.DismantingAmountFrom);
                }
                else if(qModel.DismantingAmountTo>qModel.DismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, qModel.DismantingAmountFrom,qModel.DismantingAmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.DismantingUnitPriceTo==qModel.DismantingUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingUnitPrice, qModel.DismantingUnitPriceFrom);
                }
                else if(qModel.DismantingUnitPriceTo>qModel.DismantingUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingUnitPrice, qModel.DismantingUnitPriceFrom,qModel.DismantingUnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualDismantingUnitPriceTo==qModel.ActualDismantingUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualDismantingUnitPrice, qModel.ActualDismantingUnitPriceFrom);
                }
                else if(qModel.ActualDismantingUnitPriceTo>qModel.ActualDismantingUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualDismantingUnitPrice, qModel.ActualDismantingUnitPriceFrom,qModel.ActualDismantingUnitPriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.QueryIsDiscount){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDiscount, qModel.IsDiscount);
}
                if(qModel.DiscountTo==qModel.DiscountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Discount, qModel.DiscountFrom);
                }
                else if(qModel.DiscountTo>qModel.DiscountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Discount, qModel.DiscountFrom,qModel.DiscountTo);
                }//From>To不参与条件
                if(qModel.DiscountPriceTo==qModel.DiscountPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DiscountPrice, qModel.DiscountPriceFrom);
                }
                else if(qModel.DiscountPriceTo>qModel.DiscountPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DiscountPrice, qModel.DiscountPriceFrom,qModel.DiscountPriceTo);
                }//From>To不参与条件
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.RetailOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RetailOrderId, qModel.RetailOrderId);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }

                return HandlerFactory.RetailOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用零售单明细业务逻辑:通查询Model查询实体(零售单明细)失败";
                return this.HandleException<List<RetailOrderDetail>>(message, ex);
            }  
		} 

		 
        public List<RetailOrderDetail> SearchPagedRetailOrderDetailsByQueryModel(QueryRetailOrderDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RetailOrderDetail>();
                var queryBuilder = QueryBuilder.Create<RetailOrderDetail>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.QueryIsDismanting){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDismanting, qModel.IsDismanting);
}
                if(qModel.DismantingAmountTo==qModel.DismantingAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingAmount, qModel.DismantingAmountFrom);
                }
                else if(qModel.DismantingAmountTo>qModel.DismantingAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingAmount, qModel.DismantingAmountFrom,qModel.DismantingAmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.DismantingUnitPriceTo==qModel.DismantingUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DismantingUnitPrice, qModel.DismantingUnitPriceFrom);
                }
                else if(qModel.DismantingUnitPriceTo>qModel.DismantingUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DismantingUnitPrice, qModel.DismantingUnitPriceFrom,qModel.DismantingUnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualDismantingUnitPriceTo==qModel.ActualDismantingUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualDismantingUnitPrice, qModel.ActualDismantingUnitPriceFrom);
                }
                else if(qModel.ActualDismantingUnitPriceTo>qModel.ActualDismantingUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualDismantingUnitPrice, qModel.ActualDismantingUnitPriceFrom,qModel.ActualDismantingUnitPriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.QueryIsDiscount){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsDiscount, qModel.IsDiscount);
}
                if(qModel.DiscountTo==qModel.DiscountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Discount, qModel.DiscountFrom);
                }
                else if(qModel.DiscountTo>qModel.DiscountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Discount, qModel.DiscountFrom,qModel.DiscountTo);
                }//From>To不参与条件
                if(qModel.DiscountPriceTo==qModel.DiscountPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.DiscountPrice, qModel.DiscountPriceFrom);
                }
                else if(qModel.DiscountPriceTo>qModel.DiscountPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.DiscountPrice, qModel.DiscountPriceFrom,qModel.DiscountPriceTo);
                }//From>To不参与条件
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.RetailOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RetailOrderId, qModel.RetailOrderId);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }

                return HandlerFactory.RetailOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<RetailOrderDetail>>("调用零售单明细业务逻辑:通过查询Model分页查询实体(零售单明细)失败", ex);
            }  
		}

		#endregion 零售单明细 
		   
		#region 系统角色

		/// <summary>
        /// 获取实体系统角色
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Role GetRole(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RoleBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Role>("调用系统角色业务逻辑:根据编号获取实体(系统角色)失败", ex);
            }
		} 

        /// <summary>
        /// 统计系统角色
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountRole(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RoleBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用系统角色业务逻辑:统计所有(系统角色)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加系统角色
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddRole(Role value,out string msg)
		{
			try
            {
                return HandlerFactory.RoleBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用系统角色业务逻辑:添加实体(系统角色)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除系统角色
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteRole(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.RoleBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用系统角色业务逻辑:删除实体(系统角色)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存系统角色
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveRole(Role value, out string msg)
		{
			try
            {
                return HandlerFactory.RoleBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用系统角色业务逻辑:保存实体(系统角色)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录系统角色
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Role> AllRoles(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RoleBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用系统角色业务逻辑:获取所有实体(系统角色)失败";
                return this.HandleException<List<Role>>(message, ex);
            }
		}

		 
        public List<Role> QueryRoles(string name,string code,string description,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Role>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.RoleBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用系统角色业务逻辑:查询实体(系统角色)失败";
                return this.HandleException<List<Role>>(msg, ex);
            }
        } 
		
		 
        public List<Role> QueryPagedRoles(string name,string code,string description,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Role>();
                var queryBuilder = QueryBuilder.Create<Role>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.RoleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Role>>("调用系统角色业务逻辑:查询实体(系统角色)失败", ex);
            }
        } 
 
        public List<Role> SearchRolesByQueryModel(QueryRoleModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Role>();
                var queryBuilder = QueryBuilder.Create<Role>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.RoleBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用系统角色业务逻辑:通查询Model查询实体(系统角色)失败";
                return this.HandleException<List<Role>>(message, ex);
            }  
		} 

		 
        public List<Role> SearchPagedRolesByQueryModel(QueryRoleModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Role>();
                var queryBuilder = QueryBuilder.Create<Role>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.RoleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Role>>("调用系统角色业务逻辑:通过查询Model分页查询实体(系统角色)失败", ex);
            }  
		}

		#endregion 系统角色 
		   
		#region 角色与用户的关联

		/// <summary>
        /// 获取实体角色与用户的关联
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public RoleWithUser GetRoleWithUser(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RoleWithUserBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<RoleWithUser>("调用角色与用户的关联业务逻辑:根据编号获取实体(角色与用户的关联)失败", ex);
            }
		} 

        /// <summary>
        /// 统计角色与用户的关联
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountRoleWithUser(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RoleWithUserBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用角色与用户的关联业务逻辑:统计所有(角色与用户的关联)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加角色与用户的关联
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddRoleWithUser(RoleWithUser value,out string msg)
		{
			try
            {
                return HandlerFactory.RoleWithUserBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用角色与用户的关联业务逻辑:添加实体(角色与用户的关联)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除角色与用户的关联
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteRoleWithUser(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.RoleWithUserBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用角色与用户的关联业务逻辑:删除实体(角色与用户的关联)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存角色与用户的关联
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveRoleWithUser(RoleWithUser value, out string msg)
		{
			try
            {
                return HandlerFactory.RoleWithUserBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用角色与用户的关联业务逻辑:保存实体(角色与用户的关联)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录角色与用户的关联
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<RoleWithUser> AllRoleWithUsers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.RoleWithUserBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用角色与用户的关联业务逻辑:获取所有实体(角色与用户的关联)失败";
                return this.HandleException<List<RoleWithUser>>(message, ex);
            }
		}

		 
        public List<RoleWithUser> QueryRoleWithUsers(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<RoleWithUser>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.RoleWithUserBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用角色与用户的关联业务逻辑:查询实体(角色与用户的关联)失败";
                return this.HandleException<List<RoleWithUser>>(msg, ex);
            }
        } 
		
		 
        public List<RoleWithUser> QueryPagedRoleWithUsers(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RoleWithUser>();
                var queryBuilder = QueryBuilder.Create<RoleWithUser>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.RoleWithUserBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<RoleWithUser>>("调用角色与用户的关联业务逻辑:查询实体(角色与用户的关联)失败", ex);
            }
        } 
 
        public List<RoleWithUser> SearchRoleWithUsersByQueryModel(QueryRoleWithUserModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<RoleWithUser>();
                var queryBuilder = QueryBuilder.Create<RoleWithUser>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.RoleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RoleId, qModel.RoleId);
                }
                if(qModel.UserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UserId, qModel.UserId);
                }

                return HandlerFactory.RoleWithUserBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用角色与用户的关联业务逻辑:通查询Model查询实体(角色与用户的关联)失败";
                return this.HandleException<List<RoleWithUser>>(message, ex);
            }  
		} 

		 
        public List<RoleWithUser> SearchPagedRoleWithUsersByQueryModel(QueryRoleWithUserModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<RoleWithUser>();
                var queryBuilder = QueryBuilder.Create<RoleWithUser>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.RoleId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.RoleId, qModel.RoleId);
                }
                if(qModel.UserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UserId, qModel.UserId);
                }

                return HandlerFactory.RoleWithUserBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<RoleWithUser>>("调用角色与用户的关联业务逻辑:通过查询Model分页查询实体(角色与用户的关联)失败", ex);
            }  
		}

		#endregion 角色与用户的关联 
		   
		#region 销售单

		/// <summary>
        /// 获取实体销售单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SalesOrder GetSalesOrder(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SalesOrder>("调用销售单业务逻辑:根据编号获取实体(销售单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计销售单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSalesOrder(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用销售单业务逻辑:统计所有(销售单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加销售单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSalesOrder(SalesOrder value,out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售单业务逻辑:添加实体(销售单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除销售单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSalesOrder(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售单业务逻辑:删除实体(销售单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存销售单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSalesOrder(SalesOrder value, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售单业务逻辑:保存实体(销售单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录销售单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SalesOrder> AllSalesOrders(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用销售单业务逻辑:获取所有实体(销售单)失败";
                return this.HandleException<List<SalesOrder>>(message, ex);
            }
		}

		 
        public List<SalesOrder> QuerySalesOrders(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string salername,DateTime saledatefrom,DateTime saledateto,string description,decimal totalmoneyfrom,decimal totalmoneyto,string ordercode,bool alldelivered,bool queryalldelivered,int salesdrugtypevaluefrom,int salesdrugtypevalueto,int pickupgoodtypevaluefrom,int pickupgoodtypevalueto,string pickupman,string purchaseunitman,int orderstatusvaluefrom,int orderstatusvalueto,string cancelreason,string ordercancelcode,string orderbalancecode,string balancereason,string orderoutinventorycode,string orderoutinventorycheckcode,string orderreturncode,string orderreturnreason,string orderreturncancelcode,string orderreturncancelreason,string orderreturncheckcode,string orderreturnininventorycode,string orderdirectreturncode,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SalesOrder>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(salername)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalerName, salername);
                }
                if(saledateto!=default(DateTime)&&saledatefrom!=default(DateTime)){//From==To执行==
                if(saledateto==saledatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SaleDate, saledatefrom);
                }
                else if(saledateto>saledatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.SaleDate, saledatefrom,saledateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(ordercode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, ordercode);
                }
                if(queryalldelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.AllDelivered, alldelivered);
}
                if(salesdrugtypevalueto==salesdrugtypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesDrugTypeValue, salesdrugtypevaluefrom);
                }
                else if(salesdrugtypevalueto>salesdrugtypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesDrugTypeValue, salesdrugtypevaluefrom,salesdrugtypevalueto);
                }//From>To不参与条件
                if(pickupgoodtypevalueto==pickupgoodtypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PickUpGoodTypeValue, pickupgoodtypevaluefrom);
                }
                else if(pickupgoodtypevalueto>pickupgoodtypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PickUpGoodTypeValue, pickupgoodtypevaluefrom,pickupgoodtypevalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(pickupman)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PickUpMan, pickupman);
                }
                if(!string.IsNullOrEmpty(purchaseunitman)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseUnitMan, purchaseunitman);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(cancelreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CancelReason, cancelreason);
                }
                if(!string.IsNullOrEmpty(ordercancelcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCancelCode, ordercancelcode);
                }
                if(!string.IsNullOrEmpty(orderbalancecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderBalanceCode, orderbalancecode);
                }
                if(!string.IsNullOrEmpty(balancereason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BalanceReason, balancereason);
                }
                if(!string.IsNullOrEmpty(orderoutinventorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCode, orderoutinventorycode);
                }
                if(!string.IsNullOrEmpty(orderoutinventorycheckcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckCode, orderoutinventorycheckcode);
                }
                if(!string.IsNullOrEmpty(orderreturncode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, orderreturncode);
                }
                if(!string.IsNullOrEmpty(orderreturnreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, orderreturnreason);
                }
                if(!string.IsNullOrEmpty(orderreturncancelcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, orderreturncancelcode);
                }
                if(!string.IsNullOrEmpty(orderreturncancelreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, orderreturncancelreason);
                }
                if(!string.IsNullOrEmpty(orderreturncheckcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, orderreturncheckcode);
                }
                if(!string.IsNullOrEmpty(orderreturnininventorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, orderreturnininventorycode);
                }
                if(!string.IsNullOrEmpty(orderdirectreturncode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderDirectReturnCode, orderdirectreturncode);
                }

                return HandlerFactory.SalesOrderBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用销售单业务逻辑:查询实体(销售单)失败";
                return this.HandleException<List<SalesOrder>>(msg, ex);
            }
        } 
		
		 
        public List<SalesOrder> QueryPagedSalesOrders(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string salername,DateTime saledatefrom,DateTime saledateto,string description,decimal totalmoneyfrom,decimal totalmoneyto,string ordercode,bool alldelivered,bool queryalldelivered,int salesdrugtypevaluefrom,int salesdrugtypevalueto,int pickupgoodtypevaluefrom,int pickupgoodtypevalueto,string pickupman,string purchaseunitman,int orderstatusvaluefrom,int orderstatusvalueto,string cancelreason,string ordercancelcode,string orderbalancecode,string balancereason,string orderoutinventorycode,string orderoutinventorycheckcode,string orderreturncode,string orderreturnreason,string orderreturncancelcode,string orderreturncancelreason,string orderreturncheckcode,string orderreturnininventorycode,string orderdirectreturncode,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrder>();
                var queryBuilder = QueryBuilder.Create<SalesOrder>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(salername)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalerName, salername);
                }
                if(saledateto!=default(DateTime)&&saledatefrom!=default(DateTime)){//From==To执行==
                if(saledateto==saledatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SaleDate, saledatefrom);
                }
                else if(saledateto>saledatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.SaleDate, saledatefrom,saledateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(ordercode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, ordercode);
                }
                if(queryalldelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.AllDelivered, alldelivered);
}
                if(salesdrugtypevalueto==salesdrugtypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesDrugTypeValue, salesdrugtypevaluefrom);
                }
                else if(salesdrugtypevalueto>salesdrugtypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.SalesDrugTypeValue, salesdrugtypevaluefrom,salesdrugtypevalueto);
                }//From<To不参与条件
                if(pickupgoodtypevalueto==pickupgoodtypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PickUpGoodTypeValue, pickupgoodtypevaluefrom);
                }
                else if(pickupgoodtypevalueto>pickupgoodtypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PickUpGoodTypeValue, pickupgoodtypevaluefrom,pickupgoodtypevalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(pickupman)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PickUpMan, pickupman);
                }
                if(!string.IsNullOrEmpty(purchaseunitman)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseUnitMan, purchaseunitman);
                }
                if(orderstatusvalueto==orderstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, orderstatusvaluefrom);
                }
                else if(orderstatusvalueto>orderstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, orderstatusvaluefrom,orderstatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(cancelreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CancelReason, cancelreason);
                }
                if(!string.IsNullOrEmpty(ordercancelcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCancelCode, ordercancelcode);
                }
                if(!string.IsNullOrEmpty(orderbalancecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderBalanceCode, orderbalancecode);
                }
                if(!string.IsNullOrEmpty(balancereason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BalanceReason, balancereason);
                }
                if(!string.IsNullOrEmpty(orderoutinventorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCode, orderoutinventorycode);
                }
                if(!string.IsNullOrEmpty(orderoutinventorycheckcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckCode, orderoutinventorycheckcode);
                }
                if(!string.IsNullOrEmpty(orderreturncode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, orderreturncode);
                }
                if(!string.IsNullOrEmpty(orderreturnreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, orderreturnreason);
                }
                if(!string.IsNullOrEmpty(orderreturncancelcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, orderreturncancelcode);
                }
                if(!string.IsNullOrEmpty(orderreturncancelreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, orderreturncancelreason);
                }
                if(!string.IsNullOrEmpty(orderreturncheckcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, orderreturncheckcode);
                }
                if(!string.IsNullOrEmpty(orderreturnininventorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, orderreturnininventorycode);
                }
                if(!string.IsNullOrEmpty(orderdirectreturncode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderDirectReturnCode, orderdirectreturncode);
                }

                return HandlerFactory.SalesOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SalesOrder>>("调用销售单业务逻辑:查询实体(销售单)失败", ex);
            }
        } 
 
        public List<SalesOrder> SearchSalesOrdersByQueryModel(QuerySalesOrderModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SalesOrder>();
                var queryBuilder = QueryBuilder.Create<SalesOrder>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.SalerName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalerName, qModel.SalerName);
                }
                if(qModel.SaleDateTo!=default(DateTime)&&qModel.SaleDateFrom!=default(DateTime)){
                if(qModel.SaleDateTo==qModel.SaleDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SaleDate, qModel.SaleDateFrom);
                }
                else if(qModel.SaleDateTo>qModel.SaleDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SaleDate, qModel.SaleDateFrom,qModel.SaleDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.OrderCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, qModel.OrderCode);
                }
                if(qModel.QueryAllDelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.AllDelivered, qModel.AllDelivered);
}
                if(qModel.SalesDrugTypeValueTo==qModel.SalesDrugTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesDrugTypeValue, qModel.SalesDrugTypeValueFrom);
                }
                else if(qModel.SalesDrugTypeValueTo>qModel.SalesDrugTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesDrugTypeValue, qModel.SalesDrugTypeValueFrom,qModel.SalesDrugTypeValueTo);
                }//From>To不参与条件
                if(qModel.PickUpGoodTypeValueTo==qModel.PickUpGoodTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PickUpGoodTypeValue, qModel.PickUpGoodTypeValueFrom);
                }
                else if(qModel.PickUpGoodTypeValueTo>qModel.PickUpGoodTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PickUpGoodTypeValue, qModel.PickUpGoodTypeValueFrom,qModel.PickUpGoodTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.PickUpMan)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PickUpMan, qModel.PickUpMan);
                }
                if(!string.IsNullOrEmpty(qModel.PurchaseUnitMan)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseUnitMan, qModel.PurchaseUnitMan);
                }
                if(qModel.PurchaseUnitManID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitManID, qModel.PurchaseUnitManID);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(qModel.CancelUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CancelUserID, qModel.CancelUserID);
                }
                if(!string.IsNullOrEmpty(qModel.CancelReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CancelReason, qModel.CancelReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderCancelCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCancelCode, qModel.OrderCancelCode);
                }
                if(!string.IsNullOrEmpty(qModel.OrderBalanceCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderBalanceCode, qModel.OrderBalanceCode);
                }
                if(qModel.BalanceUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BalanceUserID, qModel.BalanceUserID);
                }
                if(!string.IsNullOrEmpty(qModel.BalanceReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BalanceReason, qModel.BalanceReason);
                }
                if(qModel.payMentMethodID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.payMentMethodID, qModel.payMentMethodID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderOutInventoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCode, qModel.OrderOutInventoryCode);
                }
                if(qModel.OrderOutInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryUserID, qModel.OrderOutInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderOutInventoryCheckCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckCode, qModel.OrderOutInventoryCheckCode);
                }
                if(qModel.OrderOutInventoryCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryCheckUserID, qModel.OrderOutInventoryCheckUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, qModel.OrderReturnCode);
                }
                if(qModel.OrderReturnUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnUserID, qModel.OrderReturnUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, qModel.OrderReturnReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, qModel.OrderReturnCancelCode);
                }
                if(qModel.OrderReturnCancelUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCancelUserID, qModel.OrderReturnCancelUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, qModel.OrderReturnCancelReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCheckCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, qModel.OrderReturnCheckCode);
                }
                if(qModel.OrderReturnCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCheckUserID, qModel.OrderReturnCheckUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnInInventoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, qModel.OrderReturnInInventoryCode);
                }
                if(qModel.OrderReturnInInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnInInventoryUserID, qModel.OrderReturnInInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderDirectReturnCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderDirectReturnCode, qModel.OrderDirectReturnCode);
                }
                if(qModel.OrderDirectReturnUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderDirectReturnUserID, qModel.OrderDirectReturnUserID);
                }
                if(qModel.OutInventoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryId, qModel.OutInventoryId);
                }
                if(qModel.PurchaseUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                }

                return HandlerFactory.SalesOrderBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用销售单业务逻辑:通查询Model查询实体(销售单)失败";
                return this.HandleException<List<SalesOrder>>(message, ex);
            }  
		} 

		 
        public List<SalesOrder> SearchPagedSalesOrdersByQueryModel(QuerySalesOrderModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrder>();
                var queryBuilder = QueryBuilder.Create<SalesOrder>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.SalerName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalerName, qModel.SalerName);
                }
                if(qModel.SaleDateTo!=default(DateTime)&&qModel.SaleDateFrom!=default(DateTime)){
                if(qModel.SaleDateTo==qModel.SaleDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SaleDate, qModel.SaleDateFrom);
                }
                else if(qModel.SaleDateTo>qModel.SaleDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SaleDate, qModel.SaleDateFrom,qModel.SaleDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.OrderCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, qModel.OrderCode);
                }
                if(qModel.QueryAllDelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.AllDelivered, qModel.AllDelivered);
}
                if(qModel.SalesDrugTypeValueTo==qModel.SalesDrugTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SalesDrugTypeValue, qModel.SalesDrugTypeValueFrom);
                }
                else if(qModel.SalesDrugTypeValueTo>qModel.SalesDrugTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SalesDrugTypeValue, qModel.SalesDrugTypeValueFrom,qModel.SalesDrugTypeValueTo);
                }//From>To不参与条件
                if(qModel.PickUpGoodTypeValueTo==qModel.PickUpGoodTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PickUpGoodTypeValue, qModel.PickUpGoodTypeValueFrom);
                }
                else if(qModel.PickUpGoodTypeValueTo>qModel.PickUpGoodTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PickUpGoodTypeValue, qModel.PickUpGoodTypeValueFrom,qModel.PickUpGoodTypeValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.PickUpMan)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PickUpMan, qModel.PickUpMan);
                }
                if(!string.IsNullOrEmpty(qModel.PurchaseUnitMan)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PurchaseUnitMan, qModel.PurchaseUnitMan);
                }
                if(qModel.PurchaseUnitManID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitManID, qModel.PurchaseUnitManID);
                }
                if(qModel.OrderStatusValueTo==qModel.OrderStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderStatusValue, qModel.OrderStatusValueFrom);
                }
                else if(qModel.OrderStatusValueTo>qModel.OrderStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderStatusValue, qModel.OrderStatusValueFrom,qModel.OrderStatusValueTo);
                }//From>To不参与条件
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(qModel.CancelUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CancelUserID, qModel.CancelUserID);
                }
                if(!string.IsNullOrEmpty(qModel.CancelReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.CancelReason, qModel.CancelReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderCancelCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCancelCode, qModel.OrderCancelCode);
                }
                if(!string.IsNullOrEmpty(qModel.OrderBalanceCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderBalanceCode, qModel.OrderBalanceCode);
                }
                if(qModel.BalanceUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BalanceUserID, qModel.BalanceUserID);
                }
                if(!string.IsNullOrEmpty(qModel.BalanceReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BalanceReason, qModel.BalanceReason);
                }
                if(qModel.payMentMethodID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.payMentMethodID, qModel.payMentMethodID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderOutInventoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCode, qModel.OrderOutInventoryCode);
                }
                if(qModel.OrderOutInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryUserID, qModel.OrderOutInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderOutInventoryCheckCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckCode, qModel.OrderOutInventoryCheckCode);
                }
                if(qModel.OrderOutInventoryCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryCheckUserID, qModel.OrderOutInventoryCheckUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, qModel.OrderReturnCode);
                }
                if(qModel.OrderReturnUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnUserID, qModel.OrderReturnUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, qModel.OrderReturnReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, qModel.OrderReturnCancelCode);
                }
                if(qModel.OrderReturnCancelUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCancelUserID, qModel.OrderReturnCancelUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, qModel.OrderReturnCancelReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCheckCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, qModel.OrderReturnCheckCode);
                }
                if(qModel.OrderReturnCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCheckUserID, qModel.OrderReturnCheckUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnInInventoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, qModel.OrderReturnInInventoryCode);
                }
                if(qModel.OrderReturnInInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnInInventoryUserID, qModel.OrderReturnInInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderDirectReturnCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderDirectReturnCode, qModel.OrderDirectReturnCode);
                }
                if(qModel.OrderDirectReturnUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderDirectReturnUserID, qModel.OrderDirectReturnUserID);
                }
                if(qModel.OutInventoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryId, qModel.OutInventoryId);
                }
                if(qModel.PurchaseUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                }

                return HandlerFactory.SalesOrderBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SalesOrder>>("调用销售单业务逻辑:通过查询Model分页查询实体(销售单)失败", ex);
            }  
		}

		#endregion 销售单 
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SalesOrderDeliverDetail GetSalesOrderDeliverDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SalesOrderDeliverDetail>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSalesOrderDeliverDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSalesOrderDeliverDetail(SalesOrderDeliverDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSalesOrderDeliverDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSalesOrderDeliverDetail(SalesOrderDeliverDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SalesOrderDeliverDetail> AllSalesOrderDeliverDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<SalesOrderDeliverDetail>>(message, ex);
            }
		}

		 
        public List<SalesOrderDeliverDetail> QuerySalesOrderDeliverDetails(out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverDetail>(); 

                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<SalesOrderDeliverDetail>>(msg, ex);
            }
        } 
		
		 
        public List<SalesOrderDeliverDetail> QueryPagedSalesOrderDeliverDetails(int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderDeliverDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverDetail>(); 

                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SalesOrderDeliverDetail>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<SalesOrderDeliverDetail> SearchSalesOrderDeliverDetailsByQueryModel(QuerySalesOrderDeliverDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SalesOrderDeliverDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.SalesOrderDeliverRecordId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDeliverRecordId, qModel.SalesOrderDeliverRecordId);
                }
                if(qModel.SalesOrderDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailId, qModel.SalesOrderDetailId);
                }

                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<SalesOrderDeliverDetail>>(message, ex);
            }  
		} 

		 
        public List<SalesOrderDeliverDetail> SearchPagedSalesOrderDeliverDetailsByQueryModel(QuerySalesOrderDeliverDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderDeliverDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverDetail>(); 
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.SalesOrderDeliverRecordId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDeliverRecordId, qModel.SalesOrderDeliverRecordId);
                }
                if(qModel.SalesOrderDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailId, qModel.SalesOrderDetailId);
                }

                return HandlerFactory.SalesOrderDeliverDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SalesOrderDeliverDetail>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 销售发货记录

		/// <summary>
        /// 获取实体销售发货记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SalesOrderDeliverRecord GetSalesOrderDeliverRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SalesOrderDeliverRecord>("调用销售发货记录业务逻辑:根据编号获取实体(销售发货记录)失败", ex);
            }
		} 

        /// <summary>
        /// 统计销售发货记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSalesOrderDeliverRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用销售发货记录业务逻辑:统计所有(销售发货记录)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加销售发货记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSalesOrderDeliverRecord(SalesOrderDeliverRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售发货记录业务逻辑:添加实体(销售发货记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除销售发货记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSalesOrderDeliverRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售发货记录业务逻辑:删除实体(销售发货记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存销售发货记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSalesOrderDeliverRecord(SalesOrderDeliverRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售发货记录业务逻辑:保存实体(销售发货记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录销售发货记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SalesOrderDeliverRecord> AllSalesOrderDeliverRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用销售发货记录业务逻辑:获取所有实体(销售发货记录)失败";
                return this.HandleException<List<SalesOrderDeliverRecord>>(message, ex);
            }
		}

		 
        public List<SalesOrderDeliverRecord> QuerySalesOrderDeliverRecords(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool haddelivered,bool queryhaddelivered,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverRecord>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryhaddelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.HadDelivered, haddelivered);
}

                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用销售发货记录业务逻辑:查询实体(销售发货记录)失败";
                return this.HandleException<List<SalesOrderDeliverRecord>>(msg, ex);
            }
        } 
		
		 
        public List<SalesOrderDeliverRecord> QueryPagedSalesOrderDeliverRecords(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool haddelivered,bool queryhaddelivered,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderDeliverRecord>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverRecord>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryhaddelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.HadDelivered, haddelivered);
}

                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SalesOrderDeliverRecord>>("调用销售发货记录业务逻辑:查询实体(销售发货记录)失败", ex);
            }
        } 
 
        public List<SalesOrderDeliverRecord> SearchSalesOrderDeliverRecordsByQueryModel(QuerySalesOrderDeliverRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SalesOrderDeliverRecord>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverRecord>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(qModel.QueryHadDelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.HadDelivered, qModel.HadDelivered);
}
                if(qModel.OutInventoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryId, qModel.OutInventoryId);
                }
                if(qModel.SalesOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderId, qModel.SalesOrderId);
                }

                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用销售发货记录业务逻辑:通查询Model查询实体(销售发货记录)失败";
                return this.HandleException<List<SalesOrderDeliverRecord>>(message, ex);
            }  
		} 

		 
        public List<SalesOrderDeliverRecord> SearchPagedSalesOrderDeliverRecordsByQueryModel(QuerySalesOrderDeliverRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderDeliverRecord>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDeliverRecord>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.ApprovalUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ApprovalUserId, qModel.ApprovalUserId);
                }
                if(qModel.QueryHadDelivered){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.HadDelivered, qModel.HadDelivered);
}
                if(qModel.OutInventoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryId, qModel.OutInventoryId);
                }
                if(qModel.SalesOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderId, qModel.SalesOrderId);
                }

                return HandlerFactory.SalesOrderDeliverRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SalesOrderDeliverRecord>>("调用销售发货记录业务逻辑:通过查询Model分页查询实体(销售发货记录)失败", ex);
            }  
		}

		#endregion 销售发货记录 
		   
		#region 销售单明细

		/// <summary>
        /// 获取实体销售单明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SalesOrderDetail GetSalesOrderDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SalesOrderDetail>("调用销售单明细业务逻辑:根据编号获取实体(销售单明细)失败", ex);
            }
		} 

        /// <summary>
        /// 统计销售单明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSalesOrderDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用销售单明细业务逻辑:统计所有(销售单明细)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加销售单明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSalesOrderDetail(SalesOrderDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售单明细业务逻辑:添加实体(销售单明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除销售单明细
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSalesOrderDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售单明细业务逻辑:删除实体(销售单明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存销售单明细
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSalesOrderDetail(SalesOrderDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售单明细业务逻辑:保存实体(销售单明细)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录销售单明细
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SalesOrderDetail> AllSalesOrderDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用销售单明细业务逻辑:获取所有实体(销售单明细)失败";
                return this.HandleException<List<SalesOrderDetail>>(message, ex);
            }
		}

		 
        public List<SalesOrderDetail> QuerySalesOrderDetails(int indexfrom,int indexto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string productname,string productcode,string batchnumber,int amountfrom,int amountto,decimal unitpricefrom,decimal unitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal pricefrom,decimal priceto,string measurementunit,string specificationcode,string dictionarydosagecode,string origin,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,int returnamountfrom,int returnamountto,int changeamountfrom,int changeamountto,int outamountfrom,int outamountto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SalesOrderDetail>(); 
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From>To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From>To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From>To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From>To不参与条件
                if(changeamountto==changeamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeAmount, changeamountfrom);
                }
                else if(changeamountto>changeamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ChangeAmount, changeamountfrom,changeamountto);
                }//From>To不参与条件
                if(outamountto==outamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, outamountfrom);
                }
                else if(outamountto>outamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutAmount, outamountfrom,outamountto);
                }//From>To不参与条件

                return HandlerFactory.SalesOrderDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用销售单明细业务逻辑:查询实体(销售单明细)失败";
                return this.HandleException<List<SalesOrderDetail>>(msg, ex);
            }
        } 
		
		 
        public List<SalesOrderDetail> QueryPagedSalesOrderDetails(int indexfrom,int indexto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string productname,string productcode,string batchnumber,int amountfrom,int amountto,decimal unitpricefrom,decimal unitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal pricefrom,decimal priceto,string measurementunit,string specificationcode,string dictionarydosagecode,string origin,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,int returnamountfrom,int returnamountto,int changeamountfrom,int changeamountto,int outamountfrom,int outamountto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDetail>(); 
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From<To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From<To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From<To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From<To不参与条件
                if(changeamountto==changeamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeAmount, changeamountfrom);
                }
                else if(changeamountto>changeamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ChangeAmount, changeamountfrom,changeamountto);
                }//From<To不参与条件
                if(outamountto==outamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, outamountfrom);
                }
                else if(outamountto>outamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutAmount, outamountfrom,outamountto);
                }//From<To不参与条件

                return HandlerFactory.SalesOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SalesOrderDetail>>("调用销售单明细业务逻辑:查询实体(销售单明细)失败", ex);
            }
        } 
 
        public List<SalesOrderDetail> SearchSalesOrderDetailsByQueryModel(QuerySalesOrderDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SalesOrderDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDetail>(); 
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.ChangeAmountTo==qModel.ChangeAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeAmount, qModel.ChangeAmountFrom);
                }
                else if(qModel.ChangeAmountTo>qModel.ChangeAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ChangeAmount, qModel.ChangeAmountFrom,qModel.ChangeAmountTo);
                }//From>To不参与条件
                if(qModel.OutAmountTo==qModel.OutAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, qModel.OutAmountFrom);
                }
                else if(qModel.OutAmountTo>qModel.OutAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutAmount, qModel.OutAmountFrom,qModel.OutAmountTo);
                }//From>To不参与条件
                if(qModel.OutInventoryDetailID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryDetailID, qModel.OutInventoryDetailID);
                }
                if(qModel.SalesOrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderID, qModel.SalesOrderID);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }

                return HandlerFactory.SalesOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用销售单明细业务逻辑:通查询Model查询实体(销售单明细)失败";
                return this.HandleException<List<SalesOrderDetail>>(message, ex);
            }  
		} 

		 
        public List<SalesOrderDetail> SearchPagedSalesOrderDetailsByQueryModel(QuerySalesOrderDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderDetail>(); 
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.ChangeAmountTo==qModel.ChangeAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ChangeAmount, qModel.ChangeAmountFrom);
                }
                else if(qModel.ChangeAmountTo>qModel.ChangeAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ChangeAmount, qModel.ChangeAmountFrom,qModel.ChangeAmountTo);
                }//From>To不参与条件
                if(qModel.OutAmountTo==qModel.OutAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, qModel.OutAmountFrom);
                }
                else if(qModel.OutAmountTo>qModel.OutAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutAmount, qModel.OutAmountFrom,qModel.OutAmountTo);
                }//From>To不参与条件
                if(qModel.OutInventoryDetailID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryDetailID, qModel.OutInventoryDetailID);
                }
                if(qModel.SalesOrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderID, qModel.SalesOrderID);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }

                return HandlerFactory.SalesOrderDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SalesOrderDetail>>("调用销售单明细业务逻辑:通过查询Model分页查询实体(销售单明细)失败", ex);
            }  
		}

		#endregion 销售单明细 
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SalesOrderReturn GetSalesOrderReturn(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderReturnBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SalesOrderReturn>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSalesOrderReturn(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderReturnBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSalesOrderReturn(SalesOrderReturn value,out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderReturnBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSalesOrderReturn(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderReturnBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSalesOrderReturn(SalesOrderReturn value, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderReturnBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SalesOrderReturn> AllSalesOrderReturns(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderReturnBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<SalesOrderReturn>>(message, ex);
            }
		}

		 
        public List<SalesOrderReturn> QuerySalesOrderReturns(string orderreturncode,string orderreturnreason,DateTime orderreturntimefrom,DateTime orderreturntimeto,bool isreissue,bool queryisreissue,string sellermemo,DateTime sellerupdatetimefrom,DateTime sellerupdatetimeto,string tradememo,DateTime tradeupdatetimefrom,DateTime tradeupdatetimeto,string qualitymemo,DateTime qualityupdatetimefrom,DateTime qualityupdatetimeto,int orderreturnstatusvaluefrom,int orderreturnstatusvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string orderreturnininventorycode,string orderreturncancelcode,string orderreturncancelreason,string orderreturncheckcode,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SalesOrderReturn>(); 
                if(!string.IsNullOrEmpty(orderreturncode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, orderreturncode);
                }
                if(!string.IsNullOrEmpty(orderreturnreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, orderreturnreason);
                }
                if(orderreturntimeto!=default(DateTime)&&orderreturntimefrom!=default(DateTime)){//From==To执行==
                if(orderreturntimeto==orderreturntimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnTime, orderreturntimefrom);
                }
                else if(orderreturntimeto>orderreturntimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderReturnTime, orderreturntimefrom,orderreturntimeto);
                }}//From>To不参与条件
                if(queryisreissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, isreissue);
}
                if(!string.IsNullOrEmpty(sellermemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SellerMemo, sellermemo);
                }
                if(sellerupdatetimeto!=default(DateTime)&&sellerupdatetimefrom!=default(DateTime)){//From==To执行==
                if(sellerupdatetimeto==sellerupdatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SellerUpdateTime, sellerupdatetimefrom);
                }
                else if(sellerupdatetimeto>sellerupdatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.SellerUpdateTime, sellerupdatetimefrom,sellerupdatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(tradememo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TradeMemo, tradememo);
                }
                if(tradeupdatetimeto!=default(DateTime)&&tradeupdatetimefrom!=default(DateTime)){//From==To执行==
                if(tradeupdatetimeto==tradeupdatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.TradeUpdateTime, tradeupdatetimefrom);
                }
                else if(tradeupdatetimeto>tradeupdatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.TradeUpdateTime, tradeupdatetimefrom,tradeupdatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(qualitymemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityMemo, qualitymemo);
                }
                if(qualityupdatetimeto!=default(DateTime)&&qualityupdatetimefrom!=default(DateTime)){//From==To执行==
                if(qualityupdatetimeto==qualityupdatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityUpdateTime, qualityupdatetimefrom);
                }
                else if(qualityupdatetimeto>qualityupdatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualityUpdateTime, qualityupdatetimefrom,qualityupdatetimeto);
                }}//From>To不参与条件
                if(orderreturnstatusvalueto==orderreturnstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnStatusValue, orderreturnstatusvaluefrom);
                }
                else if(orderreturnstatusvalueto>orderreturnstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderReturnStatusValue, orderreturnstatusvaluefrom,orderreturnstatusvalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(orderreturnininventorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, orderreturnininventorycode);
                }
                if(!string.IsNullOrEmpty(orderreturncancelcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, orderreturncancelcode);
                }
                if(!string.IsNullOrEmpty(orderreturncancelreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, orderreturncancelreason);
                }
                if(!string.IsNullOrEmpty(orderreturncheckcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, orderreturncheckcode);
                }

                return HandlerFactory.SalesOrderReturnBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<SalesOrderReturn>>(msg, ex);
            }
        } 
		
		 
        public List<SalesOrderReturn> QueryPagedSalesOrderReturns(string orderreturncode,string orderreturnreason,DateTime orderreturntimefrom,DateTime orderreturntimeto,bool isreissue,bool queryisreissue,string sellermemo,DateTime sellerupdatetimefrom,DateTime sellerupdatetimeto,string tradememo,DateTime tradeupdatetimefrom,DateTime tradeupdatetimeto,string qualitymemo,DateTime qualityupdatetimefrom,DateTime qualityupdatetimeto,int orderreturnstatusvaluefrom,int orderreturnstatusvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string orderreturnininventorycode,string orderreturncancelcode,string orderreturncancelreason,string orderreturncheckcode,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderReturn>();
                var queryBuilder = QueryBuilder.Create<SalesOrderReturn>(); 
                if(!string.IsNullOrEmpty(orderreturncode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, orderreturncode);
                }
                if(!string.IsNullOrEmpty(orderreturnreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, orderreturnreason);
                }
                if(orderreturntimeto!=default(DateTime)&&orderreturntimefrom!=default(DateTime)){//From==To执行==
                if(orderreturntimeto==orderreturntimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnTime, orderreturntimefrom);
                }
                else if(orderreturntimeto>orderreturntimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderReturnTime, orderreturntimefrom,orderreturntimeto);
                }}//From<To不参与条件
                if(queryisreissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, isreissue);
}
                if(!string.IsNullOrEmpty(sellermemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SellerMemo, sellermemo);
                }
                if(sellerupdatetimeto!=default(DateTime)&&sellerupdatetimefrom!=default(DateTime)){//From==To执行==
                if(sellerupdatetimeto==sellerupdatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.SellerUpdateTime, sellerupdatetimefrom);
                }
                else if(sellerupdatetimeto>sellerupdatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.SellerUpdateTime, sellerupdatetimefrom,sellerupdatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(tradememo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TradeMemo, tradememo);
                }
                if(tradeupdatetimeto!=default(DateTime)&&tradeupdatetimefrom!=default(DateTime)){//From==To执行==
                if(tradeupdatetimeto==tradeupdatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.TradeUpdateTime, tradeupdatetimefrom);
                }
                else if(tradeupdatetimeto>tradeupdatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.TradeUpdateTime, tradeupdatetimefrom,tradeupdatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(qualitymemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityMemo, qualitymemo);
                }
                if(qualityupdatetimeto!=default(DateTime)&&qualityupdatetimefrom!=default(DateTime)){//From==To执行==
                if(qualityupdatetimeto==qualityupdatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityUpdateTime, qualityupdatetimefrom);
                }
                else if(qualityupdatetimeto>qualityupdatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.QualityUpdateTime, qualityupdatetimefrom,qualityupdatetimeto);
                }}//From<To不参与条件
                if(orderreturnstatusvalueto==orderreturnstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnStatusValue, orderreturnstatusvaluefrom);
                }
                else if(orderreturnstatusvalueto>orderreturnstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderReturnStatusValue, orderreturnstatusvaluefrom,orderreturnstatusvalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(orderreturnininventorycode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, orderreturnininventorycode);
                }
                if(!string.IsNullOrEmpty(orderreturncancelcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, orderreturncancelcode);
                }
                if(!string.IsNullOrEmpty(orderreturncancelreason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, orderreturncancelreason);
                }
                if(!string.IsNullOrEmpty(orderreturncheckcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, orderreturncheckcode);
                }

                return HandlerFactory.SalesOrderReturnBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SalesOrderReturn>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<SalesOrderReturn> SearchSalesOrderReturnsByQueryModel(QuerySalesOrderReturnModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SalesOrderReturn>();
                var queryBuilder = QueryBuilder.Create<SalesOrderReturn>(); 
                if(!string.IsNullOrEmpty(qModel.OrderReturnCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, qModel.OrderReturnCode);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, qModel.OrderReturnReason);
                }
                if(qModel.OrderReturnTimeTo!=default(DateTime)&&qModel.OrderReturnTimeFrom!=default(DateTime)){
                if(qModel.OrderReturnTimeTo==qModel.OrderReturnTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnTime, qModel.OrderReturnTimeFrom);
                }
                else if(qModel.OrderReturnTimeTo>qModel.OrderReturnTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderReturnTime, qModel.OrderReturnTimeFrom,qModel.OrderReturnTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsReissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, qModel.IsReissue);
}
                if(qModel.SellerID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SellerID, qModel.SellerID);
                }
                if(!string.IsNullOrEmpty(qModel.SellerMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SellerMemo, qModel.SellerMemo);
                }
                if(qModel.SellerUpdateTimeTo!=default(DateTime)&&qModel.SellerUpdateTimeFrom!=default(DateTime)){
                if(qModel.SellerUpdateTimeTo==qModel.SellerUpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SellerUpdateTime, qModel.SellerUpdateTimeFrom);
                }
                else if(qModel.SellerUpdateTimeTo>qModel.SellerUpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SellerUpdateTime, qModel.SellerUpdateTimeFrom,qModel.SellerUpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.TradeUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.TradeUserID, qModel.TradeUserID);
                }
                if(!string.IsNullOrEmpty(qModel.TradeMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TradeMemo, qModel.TradeMemo);
                }
                if(qModel.TradeUpdateTimeTo!=default(DateTime)&&qModel.TradeUpdateTimeFrom!=default(DateTime)){
                if(qModel.TradeUpdateTimeTo==qModel.TradeUpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TradeUpdateTime, qModel.TradeUpdateTimeFrom);
                }
                else if(qModel.TradeUpdateTimeTo>qModel.TradeUpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TradeUpdateTime, qModel.TradeUpdateTimeFrom,qModel.TradeUpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QualityUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.QualityUserID, qModel.QualityUserID);
                }
                if(!string.IsNullOrEmpty(qModel.QualityMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityMemo, qModel.QualityMemo);
                }
                if(qModel.QualityUpdateTimeTo!=default(DateTime)&&qModel.QualityUpdateTimeFrom!=default(DateTime)){
                if(qModel.QualityUpdateTimeTo==qModel.QualityUpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityUpdateTime, qModel.QualityUpdateTimeFrom);
                }
                else if(qModel.QualityUpdateTimeTo>qModel.QualityUpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualityUpdateTime, qModel.QualityUpdateTimeFrom,qModel.QualityUpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OrderReturnStatusValueTo==qModel.OrderReturnStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnStatusValue, qModel.OrderReturnStatusValueFrom);
                }
                else if(qModel.OrderReturnStatusValueTo>qModel.OrderReturnStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderReturnStatusValue, qModel.OrderReturnStatusValueFrom,qModel.OrderReturnStatusValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnInInventoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, qModel.OrderReturnInInventoryCode);
                }
                if(qModel.OrderReturnInInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnInInventoryUserID, qModel.OrderReturnInInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, qModel.OrderReturnCancelCode);
                }
                if(qModel.OrderReturnCancelUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCancelUserID, qModel.OrderReturnCancelUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, qModel.OrderReturnCancelReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCheckCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, qModel.OrderReturnCheckCode);
                }
                if(qModel.OrderReturnCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCheckUserID, qModel.OrderReturnCheckUserID);
                }
                if(qModel.SalesOrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderID, qModel.SalesOrderID);
                }
                if(qModel.OutInventoryID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryID, qModel.OutInventoryID);
                }

                return HandlerFactory.SalesOrderReturnBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<SalesOrderReturn>>(message, ex);
            }  
		} 

		 
        public List<SalesOrderReturn> SearchPagedSalesOrderReturnsByQueryModel(QuerySalesOrderReturnModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderReturn>();
                var queryBuilder = QueryBuilder.Create<SalesOrderReturn>(); 
                if(!string.IsNullOrEmpty(qModel.OrderReturnCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCode, qModel.OrderReturnCode);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnReason, qModel.OrderReturnReason);
                }
                if(qModel.OrderReturnTimeTo!=default(DateTime)&&qModel.OrderReturnTimeFrom!=default(DateTime)){
                if(qModel.OrderReturnTimeTo==qModel.OrderReturnTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnTime, qModel.OrderReturnTimeFrom);
                }
                else if(qModel.OrderReturnTimeTo>qModel.OrderReturnTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderReturnTime, qModel.OrderReturnTimeFrom,qModel.OrderReturnTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsReissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, qModel.IsReissue);
}
                if(qModel.SellerID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SellerID, qModel.SellerID);
                }
                if(!string.IsNullOrEmpty(qModel.SellerMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SellerMemo, qModel.SellerMemo);
                }
                if(qModel.SellerUpdateTimeTo!=default(DateTime)&&qModel.SellerUpdateTimeFrom!=default(DateTime)){
                if(qModel.SellerUpdateTimeTo==qModel.SellerUpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.SellerUpdateTime, qModel.SellerUpdateTimeFrom);
                }
                else if(qModel.SellerUpdateTimeTo>qModel.SellerUpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.SellerUpdateTime, qModel.SellerUpdateTimeFrom,qModel.SellerUpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.TradeUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.TradeUserID, qModel.TradeUserID);
                }
                if(!string.IsNullOrEmpty(qModel.TradeMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TradeMemo, qModel.TradeMemo);
                }
                if(qModel.TradeUpdateTimeTo!=default(DateTime)&&qModel.TradeUpdateTimeFrom!=default(DateTime)){
                if(qModel.TradeUpdateTimeTo==qModel.TradeUpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TradeUpdateTime, qModel.TradeUpdateTimeFrom);
                }
                else if(qModel.TradeUpdateTimeTo>qModel.TradeUpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TradeUpdateTime, qModel.TradeUpdateTimeFrom,qModel.TradeUpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QualityUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.QualityUserID, qModel.QualityUserID);
                }
                if(!string.IsNullOrEmpty(qModel.QualityMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityMemo, qModel.QualityMemo);
                }
                if(qModel.QualityUpdateTimeTo!=default(DateTime)&&qModel.QualityUpdateTimeFrom!=default(DateTime)){
                if(qModel.QualityUpdateTimeTo==qModel.QualityUpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityUpdateTime, qModel.QualityUpdateTimeFrom);
                }
                else if(qModel.QualityUpdateTimeTo>qModel.QualityUpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualityUpdateTime, qModel.QualityUpdateTimeFrom,qModel.QualityUpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.OrderReturnStatusValueTo==qModel.OrderReturnStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderReturnStatusValue, qModel.OrderReturnStatusValueFrom);
                }
                else if(qModel.OrderReturnStatusValueTo>qModel.OrderReturnStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderReturnStatusValue, qModel.OrderReturnStatusValueFrom,qModel.OrderReturnStatusValueTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnInInventoryCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnInInventoryCode, qModel.OrderReturnInInventoryCode);
                }
                if(qModel.OrderReturnInInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnInInventoryUserID, qModel.OrderReturnInInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelCode, qModel.OrderReturnCancelCode);
                }
                if(qModel.OrderReturnCancelUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCancelUserID, qModel.OrderReturnCancelUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCancelReason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCancelReason, qModel.OrderReturnCancelReason);
                }
                if(!string.IsNullOrEmpty(qModel.OrderReturnCheckCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderReturnCheckCode, qModel.OrderReturnCheckCode);
                }
                if(qModel.OrderReturnCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnCheckUserID, qModel.OrderReturnCheckUserID);
                }
                if(qModel.SalesOrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderID, qModel.SalesOrderID);
                }
                if(qModel.OutInventoryID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryID, qModel.OutInventoryID);
                }

                return HandlerFactory.SalesOrderReturnBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SalesOrderReturn>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SalesOrderReturnDetail GetSalesOrderReturnDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SalesOrderReturnDetail>("调用业务逻辑:根据编号获取实体()失败", ex);
            }
		} 

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSalesOrderReturnDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:统计所有()数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSalesOrderReturnDetail(SalesOrderReturnDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:添加实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSalesOrderReturnDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:删除实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSalesOrderReturnDetail(SalesOrderReturnDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用业务逻辑:保存实体()失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SalesOrderReturnDetail> AllSalesOrderReturnDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用业务逻辑:获取所有实体()失败";
                return this.HandleException<List<SalesOrderReturnDetail>>(message, ex);
            }
		}

		 
        public List<SalesOrderReturnDetail> QuerySalesOrderReturnDetails(int indexfrom,int indexto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string productname,string productcode,string batchnumber,int orderamountfrom,int orderamountto,decimal unitpricefrom,decimal unitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal pricefrom,decimal priceto,string measurementunit,string specificationcode,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,int returnamountfrom,int returnamountto,int returnreasonvaluefrom,int returnreasonvalueto,string returnreasonmemo,int caninamountfrom,int caninamountto,int cannotinamountfrom,int cannotinamountto,int returnhandledmethodvaluefrom,int returnhandledmethodvalueto,string returnhandledmethodmemo,bool isreissue,bool queryisreissue,int reissueamountfrom,int reissueamountto,string dictionarydosagecode,string origin,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SalesOrderReturnDetail>(); 
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(orderamountto==orderamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderAmount, orderamountfrom);
                }
                else if(orderamountto>orderamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderAmount, orderamountfrom,orderamountto);
                }//From>To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From>To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From>To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From>To不参与条件
                if(returnreasonvalueto==returnreasonvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReasonValue, returnreasonvaluefrom);
                }
                else if(returnreasonvalueto>returnreasonvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReasonValue, returnreasonvaluefrom,returnreasonvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(returnreasonmemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReasonMemo, returnreasonmemo);
                }
                if(caninamountto==caninamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanInAmount, caninamountfrom);
                }
                else if(caninamountto>caninamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanInAmount, caninamountfrom,caninamountto);
                }//From>To不参与条件
                if(cannotinamountto==cannotinamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CannotInAmount, cannotinamountfrom);
                }
                else if(cannotinamountto>cannotinamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CannotInAmount, cannotinamountfrom,cannotinamountto);
                }//From>To不参与条件
                if(returnhandledmethodvalueto==returnhandledmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom);
                }
                else if(returnhandledmethodvalueto>returnhandledmethodvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom,returnhandledmethodvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(returnhandledmethodmemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnHandledMethodMemo, returnhandledmethodmemo);
                }
                if(queryisreissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, isreissue);
}
                if(reissueamountto==reissueamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, reissueamountfrom);
                }
                else if(reissueamountto>reissueamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, reissueamountfrom,reissueamountto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }

                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用业务逻辑:查询实体()失败";
                return this.HandleException<List<SalesOrderReturnDetail>>(msg, ex);
            }
        } 
		
		 
        public List<SalesOrderReturnDetail> QueryPagedSalesOrderReturnDetails(int indexfrom,int indexto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string productname,string productcode,string batchnumber,int orderamountfrom,int orderamountto,decimal unitpricefrom,decimal unitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal pricefrom,decimal priceto,string measurementunit,string specificationcode,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,int returnamountfrom,int returnamountto,int returnreasonvaluefrom,int returnreasonvalueto,string returnreasonmemo,int caninamountfrom,int caninamountto,int cannotinamountfrom,int cannotinamountto,int returnhandledmethodvaluefrom,int returnhandledmethodvalueto,string returnhandledmethodmemo,bool isreissue,bool queryisreissue,int reissueamountfrom,int reissueamountto,string dictionarydosagecode,string origin,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderReturnDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderReturnDetail>(); 
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(orderamountto==orderamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderAmount, orderamountfrom);
                }
                else if(orderamountto>orderamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OrderAmount, orderamountfrom,orderamountto);
                }//From<To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From<To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From<To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(returnamountto==returnamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, returnamountfrom);
                }
                else if(returnamountto>returnamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, returnamountfrom,returnamountto);
                }//From<To不参与条件
                if(returnreasonvalueto==returnreasonvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReasonValue, returnreasonvaluefrom);
                }
                else if(returnreasonvalueto>returnreasonvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnReasonValue, returnreasonvaluefrom,returnreasonvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(returnreasonmemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReasonMemo, returnreasonmemo);
                }
                if(caninamountto==caninamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanInAmount, caninamountfrom);
                }
                else if(caninamountto>caninamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CanInAmount, caninamountfrom,caninamountto);
                }//From<To不参与条件
                if(cannotinamountto==cannotinamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CannotInAmount, cannotinamountfrom);
                }
                else if(cannotinamountto>cannotinamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CannotInAmount, cannotinamountfrom,cannotinamountto);
                }//From<To不参与条件
                if(returnhandledmethodvalueto==returnhandledmethodvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom);
                }
                else if(returnhandledmethodvalueto>returnhandledmethodvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, returnhandledmethodvaluefrom,returnhandledmethodvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(returnhandledmethodmemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnHandledMethodMemo, returnhandledmethodmemo);
                }
                if(queryisreissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, isreissue);
}
                if(reissueamountto==reissueamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, reissueamountfrom);
                }
                else if(reissueamountto>reissueamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, reissueamountfrom,reissueamountto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }

                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SalesOrderReturnDetail>>("调用业务逻辑:查询实体()失败", ex);
            }
        } 
 
        public List<SalesOrderReturnDetail> SearchSalesOrderReturnDetailsByQueryModel(QuerySalesOrderReturnDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SalesOrderReturnDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderReturnDetail>(); 
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.OrderAmountTo==qModel.OrderAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderAmount, qModel.OrderAmountFrom);
                }
                else if(qModel.OrderAmountTo>qModel.OrderAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderAmount, qModel.OrderAmountFrom,qModel.OrderAmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.ReturnReasonValueTo==qModel.ReturnReasonValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReasonValue, qModel.ReturnReasonValueFrom);
                }
                else if(qModel.ReturnReasonValueTo>qModel.ReturnReasonValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReasonValue, qModel.ReturnReasonValueFrom,qModel.ReturnReasonValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ReturnReasonMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReasonMemo, qModel.ReturnReasonMemo);
                }
                if(qModel.CanInAmountTo==qModel.CanInAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanInAmount, qModel.CanInAmountFrom);
                }
                else if(qModel.CanInAmountTo>qModel.CanInAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanInAmount, qModel.CanInAmountFrom,qModel.CanInAmountTo);
                }//From>To不参与条件
                if(qModel.CannotInAmountTo==qModel.CannotInAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CannotInAmount, qModel.CannotInAmountFrom);
                }
                else if(qModel.CannotInAmountTo>qModel.CannotInAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CannotInAmount, qModel.CannotInAmountFrom,qModel.CannotInAmountTo);
                }//From>To不参与条件
                if(qModel.ReturnHandledMethodValueTo==qModel.ReturnHandledMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom);
                }
                else if(qModel.ReturnHandledMethodValueTo>qModel.ReturnHandledMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom,qModel.ReturnHandledMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ReturnHandledMethodMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnHandledMethodMemo, qModel.ReturnHandledMethodMemo);
                }
                if(qModel.QueryIsReissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, qModel.IsReissue);
}
                if(qModel.ReissueAmountTo==qModel.ReissueAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, qModel.ReissueAmountFrom);
                }
                else if(qModel.ReissueAmountTo>qModel.ReissueAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, qModel.ReissueAmountFrom,qModel.ReissueAmountTo);
                }//From>To不参与条件
                if(qModel.OutInventoryDetailID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryDetailID, qModel.OutInventoryDetailID);
                }
                if(qModel.OrderReturnID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnID, qModel.OrderReturnID);
                }
                if(qModel.SalesOrderDetailID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailID, qModel.SalesOrderDetailID);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }

                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用业务逻辑:通查询Model查询实体()失败";
                return this.HandleException<List<SalesOrderReturnDetail>>(message, ex);
            }  
		} 

		 
        public List<SalesOrderReturnDetail> SearchPagedSalesOrderReturnDetailsByQueryModel(QuerySalesOrderReturnDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SalesOrderReturnDetail>();
                var queryBuilder = QueryBuilder.Create<SalesOrderReturnDetail>(); 
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.OrderAmountTo==qModel.OrderAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OrderAmount, qModel.OrderAmountFrom);
                }
                else if(qModel.OrderAmountTo>qModel.OrderAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OrderAmount, qModel.OrderAmountFrom,qModel.OrderAmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.ReturnAmountTo==qModel.ReturnAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnAmount, qModel.ReturnAmountFrom);
                }
                else if(qModel.ReturnAmountTo>qModel.ReturnAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnAmount, qModel.ReturnAmountFrom,qModel.ReturnAmountTo);
                }//From>To不参与条件
                if(qModel.ReturnReasonValueTo==qModel.ReturnReasonValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnReasonValue, qModel.ReturnReasonValueFrom);
                }
                else if(qModel.ReturnReasonValueTo>qModel.ReturnReasonValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnReasonValue, qModel.ReturnReasonValueFrom,qModel.ReturnReasonValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ReturnReasonMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnReasonMemo, qModel.ReturnReasonMemo);
                }
                if(qModel.CanInAmountTo==qModel.CanInAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanInAmount, qModel.CanInAmountFrom);
                }
                else if(qModel.CanInAmountTo>qModel.CanInAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanInAmount, qModel.CanInAmountFrom,qModel.CanInAmountTo);
                }//From>To不参与条件
                if(qModel.CannotInAmountTo==qModel.CannotInAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CannotInAmount, qModel.CannotInAmountFrom);
                }
                else if(qModel.CannotInAmountTo>qModel.CannotInAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CannotInAmount, qModel.CannotInAmountFrom,qModel.CannotInAmountTo);
                }//From>To不参与条件
                if(qModel.ReturnHandledMethodValueTo==qModel.ReturnHandledMethodValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom);
                }
                else if(qModel.ReturnHandledMethodValueTo>qModel.ReturnHandledMethodValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReturnHandledMethodValue, qModel.ReturnHandledMethodValueFrom,qModel.ReturnHandledMethodValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.ReturnHandledMethodMemo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ReturnHandledMethodMemo, qModel.ReturnHandledMethodMemo);
                }
                if(qModel.QueryIsReissue){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsReissue, qModel.IsReissue);
}
                if(qModel.ReissueAmountTo==qModel.ReissueAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ReissueAmount, qModel.ReissueAmountFrom);
                }
                else if(qModel.ReissueAmountTo>qModel.ReissueAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ReissueAmount, qModel.ReissueAmountFrom,qModel.ReissueAmountTo);
                }//From>To不参与条件
                if(qModel.OutInventoryDetailID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OutInventoryDetailID, qModel.OutInventoryDetailID);
                }
                if(qModel.OrderReturnID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderReturnID, qModel.OrderReturnID);
                }
                if(qModel.SalesOrderDetailID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailID, qModel.SalesOrderDetailID);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }

                return HandlerFactory.SalesOrderReturnDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SalesOrderReturnDetail>>("调用业务逻辑:通过查询Model分页查询实体()失败", ex);
            }  
		}

		#endregion  
		   
		#region 销售出库单

		/// <summary>
        /// 获取实体销售出库单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public OutInventory GetOutInventory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.OutInventoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<OutInventory>("调用销售出库单业务逻辑:根据编号获取实体(销售出库单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计销售出库单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountOutInventory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.OutInventoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用销售出库单业务逻辑:统计所有(销售出库单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加销售出库单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddOutInventory(OutInventory value,out string msg)
		{
			try
            {
                return HandlerFactory.OutInventoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售出库单业务逻辑:添加实体(销售出库单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除销售出库单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteOutInventory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.OutInventoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售出库单业务逻辑:删除实体(销售出库单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存销售出库单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveOutInventory(OutInventory value, out string msg)
		{
			try
            {
                return HandlerFactory.OutInventoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售出库单业务逻辑:保存实体(销售出库单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录销售出库单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<OutInventory> AllOutInventorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.OutInventoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用销售出库单业务逻辑:获取所有实体(销售出库单)失败";
                return this.HandleException<List<OutInventory>>(message, ex);
            }
		}

		 
        public List<OutInventory> QueryOutInventorys(string outinventorynumber,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,DateTime outinventorydatefrom,DateTime outinventorydateto,string description,string orderoutinventorychecknumber,decimal totalmoneyfrom,decimal totalmoneyto,decimal totaltaxfrom,decimal totaltaxto,int outinventorytypevaluefrom,int outinventorytypevalueto,int outinventorystatusvaluefrom,int outinventorystatusvalueto,string ordercode,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<OutInventory>(); 
                if(!string.IsNullOrEmpty(outinventorynumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OutInventoryNumber, outinventorynumber);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(outinventorydateto!=default(DateTime)&&outinventorydatefrom!=default(DateTime)){//From==To执行==
                if(outinventorydateto==outinventorydatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryDate, outinventorydatefrom);
                }
                else if(outinventorydateto>outinventorydatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryDate, outinventorydatefrom,outinventorydateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(orderoutinventorychecknumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckNumber, orderoutinventorychecknumber);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From>To不参与条件
                if(totaltaxto==totaltaxfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalTax, totaltaxfrom);
                }
                else if(totaltaxto>totaltaxfrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalTax, totaltaxfrom,totaltaxto);
                }//From>To不参与条件
                if(outinventorytypevalueto==outinventorytypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryTypeValue, outinventorytypevaluefrom);
                }
                else if(outinventorytypevalueto>outinventorytypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryTypeValue, outinventorytypevaluefrom,outinventorytypevalueto);
                }//From>To不参与条件
                if(outinventorystatusvalueto==outinventorystatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryStatusValue, outinventorystatusvaluefrom);
                }
                else if(outinventorystatusvalueto>outinventorystatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryStatusValue, outinventorystatusvaluefrom,outinventorystatusvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(ordercode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, ordercode);
                }

                return HandlerFactory.OutInventoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用销售出库单业务逻辑:查询实体(销售出库单)失败";
                return this.HandleException<List<OutInventory>>(msg, ex);
            }
        } 
		
		 
        public List<OutInventory> QueryPagedOutInventorys(string outinventorynumber,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,DateTime outinventorydatefrom,DateTime outinventorydateto,string description,string orderoutinventorychecknumber,decimal totalmoneyfrom,decimal totalmoneyto,decimal totaltaxfrom,decimal totaltaxto,int outinventorytypevaluefrom,int outinventorytypevalueto,int outinventorystatusvaluefrom,int outinventorystatusvalueto,string ordercode,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<OutInventory>();
                var queryBuilder = QueryBuilder.Create<OutInventory>(); 
                if(!string.IsNullOrEmpty(outinventorynumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OutInventoryNumber, outinventorynumber);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(outinventorydateto!=default(DateTime)&&outinventorydatefrom!=default(DateTime)){//From==To执行==
                if(outinventorydateto==outinventorydatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryDate, outinventorydatefrom);
                }
                else if(outinventorydateto>outinventorydatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutInventoryDate, outinventorydatefrom,outinventorydateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(orderoutinventorychecknumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckNumber, orderoutinventorychecknumber);
                }
                if(totalmoneyto==totalmoneyfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, totalmoneyfrom);
                }
                else if(totalmoneyto>totalmoneyfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalMoney, totalmoneyfrom,totalmoneyto);
                }//From<To不参与条件
                if(totaltaxto==totaltaxfrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalTax, totaltaxfrom);
                }
                else if(totaltaxto>totaltaxfrom){//From>To执行Between
                    queryBuilder.Between(a => a.TotalTax, totaltaxfrom,totaltaxto);
                }//From<To不参与条件
                if(outinventorytypevalueto==outinventorytypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryTypeValue, outinventorytypevaluefrom);
                }
                else if(outinventorytypevalueto>outinventorytypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutInventoryTypeValue, outinventorytypevaluefrom,outinventorytypevalueto);
                }//From<To不参与条件
                if(outinventorystatusvalueto==outinventorystatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryStatusValue, outinventorystatusvaluefrom);
                }
                else if(outinventorystatusvalueto>outinventorystatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutInventoryStatusValue, outinventorystatusvaluefrom,outinventorystatusvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(ordercode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, ordercode);
                }

                return HandlerFactory.OutInventoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<OutInventory>>("调用销售出库单业务逻辑:查询实体(销售出库单)失败", ex);
            }
        } 
 
        public List<OutInventory> SearchOutInventorysByQueryModel(QueryOutInventoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<OutInventory>();
                var queryBuilder = QueryBuilder.Create<OutInventory>(); 
                if(!string.IsNullOrEmpty(qModel.OutInventoryNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OutInventoryNumber, qModel.OutInventoryNumber);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.storekeeperId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.storekeeperId, qModel.storekeeperId);
                }
                if(qModel.ReviewerId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReviewerId, qModel.ReviewerId);
                }
                if(qModel.OutInventoryDateTo!=default(DateTime)&&qModel.OutInventoryDateFrom!=default(DateTime)){
                if(qModel.OutInventoryDateTo==qModel.OutInventoryDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryDate, qModel.OutInventoryDateFrom);
                }
                else if(qModel.OutInventoryDateTo>qModel.OutInventoryDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryDate, qModel.OutInventoryDateFrom,qModel.OutInventoryDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.OrderOutInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryUserID, qModel.OrderOutInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderOutInventoryCheckNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckNumber, qModel.OrderOutInventoryCheckNumber);
                }
                if(qModel.OrderOutInventoryCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryCheckUserID, qModel.OrderOutInventoryCheckUserID);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.TotalTaxTo==qModel.TotalTaxFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalTax, qModel.TotalTaxFrom);
                }
                else if(qModel.TotalTaxTo>qModel.TotalTaxFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalTax, qModel.TotalTaxFrom,qModel.TotalTaxTo);
                }//From>To不参与条件
                if(qModel.OutInventoryTypeValueTo==qModel.OutInventoryTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryTypeValue, qModel.OutInventoryTypeValueFrom);
                }
                else if(qModel.OutInventoryTypeValueTo>qModel.OutInventoryTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryTypeValue, qModel.OutInventoryTypeValueFrom,qModel.OutInventoryTypeValueTo);
                }//From>To不参与条件
                if(qModel.OutInventoryStatusValueTo==qModel.OutInventoryStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryStatusValue, qModel.OutInventoryStatusValueFrom);
                }
                else if(qModel.OutInventoryStatusValueTo>qModel.OutInventoryStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryStatusValue, qModel.OutInventoryStatusValueFrom,qModel.OutInventoryStatusValueTo);
                }//From>To不参与条件
                if(qModel.SalesOrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderID, qModel.SalesOrderID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, qModel.OrderCode);
                }
                if(qModel.SalesOrderReturnID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderReturnID, qModel.SalesOrderReturnID);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.OutInventoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用销售出库单业务逻辑:通查询Model查询实体(销售出库单)失败";
                return this.HandleException<List<OutInventory>>(message, ex);
            }  
		} 

		 
        public List<OutInventory> SearchPagedOutInventorysByQueryModel(QueryOutInventoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<OutInventory>();
                var queryBuilder = QueryBuilder.Create<OutInventory>(); 
                if(!string.IsNullOrEmpty(qModel.OutInventoryNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OutInventoryNumber, qModel.OutInventoryNumber);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.storekeeperId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.storekeeperId, qModel.storekeeperId);
                }
                if(qModel.ReviewerId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ReviewerId, qModel.ReviewerId);
                }
                if(qModel.OutInventoryDateTo!=default(DateTime)&&qModel.OutInventoryDateFrom!=default(DateTime)){
                if(qModel.OutInventoryDateTo==qModel.OutInventoryDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryDate, qModel.OutInventoryDateFrom);
                }
                else if(qModel.OutInventoryDateTo>qModel.OutInventoryDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryDate, qModel.OutInventoryDateFrom,qModel.OutInventoryDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.OrderOutInventoryUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryUserID, qModel.OrderOutInventoryUserID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderOutInventoryCheckNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderOutInventoryCheckNumber, qModel.OrderOutInventoryCheckNumber);
                }
                if(qModel.OrderOutInventoryCheckUserID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.OrderOutInventoryCheckUserID, qModel.OrderOutInventoryCheckUserID);
                }
                if(qModel.TotalMoneyTo==qModel.TotalMoneyFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalMoney, qModel.TotalMoneyFrom);
                }
                else if(qModel.TotalMoneyTo>qModel.TotalMoneyFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalMoney, qModel.TotalMoneyFrom,qModel.TotalMoneyTo);
                }//From>To不参与条件
                if(qModel.TotalTaxTo==qModel.TotalTaxFrom){//From==To执行==
                    queryBuilder.Equals(a => a.TotalTax, qModel.TotalTaxFrom);
                }
                else if(qModel.TotalTaxTo>qModel.TotalTaxFrom){//From<To执行Between
                    queryBuilder.Between(a => a.TotalTax, qModel.TotalTaxFrom,qModel.TotalTaxTo);
                }//From>To不参与条件
                if(qModel.OutInventoryTypeValueTo==qModel.OutInventoryTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryTypeValue, qModel.OutInventoryTypeValueFrom);
                }
                else if(qModel.OutInventoryTypeValueTo>qModel.OutInventoryTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryTypeValue, qModel.OutInventoryTypeValueFrom,qModel.OutInventoryTypeValueTo);
                }//From>To不参与条件
                if(qModel.OutInventoryStatusValueTo==qModel.OutInventoryStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutInventoryStatusValue, qModel.OutInventoryStatusValueFrom);
                }
                else if(qModel.OutInventoryStatusValueTo>qModel.OutInventoryStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutInventoryStatusValue, qModel.OutInventoryStatusValueFrom,qModel.OutInventoryStatusValueTo);
                }//From>To不参与条件
                if(qModel.SalesOrderID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderID, qModel.SalesOrderID);
                }
                if(!string.IsNullOrEmpty(qModel.OrderCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.OrderCode, qModel.OrderCode);
                }
                if(qModel.SalesOrderReturnID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderReturnID, qModel.SalesOrderReturnID);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.OutInventoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<OutInventory>>("调用销售出库单业务逻辑:通过查询Model分页查询实体(销售出库单)失败", ex);
            }  
		}

		#endregion 销售出库单 
		   
		#region 设置重点药品记录表

		/// <summary>
        /// 获取实体设置重点药品记录表
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SetSpeicalDrugRecord GetSetSpeicalDrugRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SetSpeicalDrugRecord>("调用设置重点药品记录表业务逻辑:根据编号获取实体(设置重点药品记录表)失败", ex);
            }
		} 

        /// <summary>
        /// 统计设置重点药品记录表
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSetSpeicalDrugRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用设置重点药品记录表业务逻辑:统计所有(设置重点药品记录表)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加设置重点药品记录表
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSetSpeicalDrugRecord(SetSpeicalDrugRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用设置重点药品记录表业务逻辑:添加实体(设置重点药品记录表)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除设置重点药品记录表
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSetSpeicalDrugRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用设置重点药品记录表业务逻辑:删除实体(设置重点药品记录表)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存设置重点药品记录表
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSetSpeicalDrugRecord(SetSpeicalDrugRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用设置重点药品记录表业务逻辑:保存实体(设置重点药品记录表)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录设置重点药品记录表
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SetSpeicalDrugRecord> AllSetSpeicalDrugRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用设置重点药品记录表业务逻辑:获取所有实体(设置重点药品记录表)失败";
                return this.HandleException<List<SetSpeicalDrugRecord>>(message, ex);
            }
		}

		 
        public List<SetSpeicalDrugRecord> QuerySetSpeicalDrugRecords(int maintainduetimefrom,int maintainduetimeto,string reason,string maintainemphasis,string memo,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SetSpeicalDrugRecord>(); 
                if(maintainduetimeto==maintainduetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainDuetime, maintainduetimefrom);
                }
                else if(maintainduetimeto>maintainduetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaintainDuetime, maintainduetimefrom,maintainduetimeto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(reason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Reason, reason);
                }
                if(!string.IsNullOrEmpty(maintainemphasis)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MaintainEmphasis, maintainemphasis);
                }
                if(!string.IsNullOrEmpty(memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, memo);
                }

                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用设置重点药品记录表业务逻辑:查询实体(设置重点药品记录表)失败";
                return this.HandleException<List<SetSpeicalDrugRecord>>(msg, ex);
            }
        } 
		
		 
        public List<SetSpeicalDrugRecord> QueryPagedSetSpeicalDrugRecords(int maintainduetimefrom,int maintainduetimeto,string reason,string maintainemphasis,string memo,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SetSpeicalDrugRecord>();
                var queryBuilder = QueryBuilder.Create<SetSpeicalDrugRecord>(); 
                if(maintainduetimeto==maintainduetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainDuetime, maintainduetimefrom);
                }
                else if(maintainduetimeto>maintainduetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.MaintainDuetime, maintainduetimefrom,maintainduetimeto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(reason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Reason, reason);
                }
                if(!string.IsNullOrEmpty(maintainemphasis)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MaintainEmphasis, maintainemphasis);
                }
                if(!string.IsNullOrEmpty(memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, memo);
                }

                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SetSpeicalDrugRecord>>("调用设置重点药品记录表业务逻辑:查询实体(设置重点药品记录表)失败", ex);
            }
        } 
 
        public List<SetSpeicalDrugRecord> SearchSetSpeicalDrugRecordsByQueryModel(QuerySetSpeicalDrugRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SetSpeicalDrugRecord>();
                var queryBuilder = QueryBuilder.Create<SetSpeicalDrugRecord>(); 
                if(qModel.DrugInventoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryId, qModel.DrugInventoryId);
                }
                if(qModel.MaintainDuetimeTo==qModel.MaintainDuetimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainDuetime, qModel.MaintainDuetimeFrom);
                }
                else if(qModel.MaintainDuetimeTo>qModel.MaintainDuetimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaintainDuetime, qModel.MaintainDuetimeFrom,qModel.MaintainDuetimeTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Reason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Reason, qModel.Reason);
                }
                if(!string.IsNullOrEmpty(qModel.MaintainEmphasis)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MaintainEmphasis, qModel.MaintainEmphasis);
                }
                if(!string.IsNullOrEmpty(qModel.Memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, qModel.Memo);
                }

                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用设置重点药品记录表业务逻辑:通查询Model查询实体(设置重点药品记录表)失败";
                return this.HandleException<List<SetSpeicalDrugRecord>>(message, ex);
            }  
		} 

		 
        public List<SetSpeicalDrugRecord> SearchPagedSetSpeicalDrugRecordsByQueryModel(QuerySetSpeicalDrugRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SetSpeicalDrugRecord>();
                var queryBuilder = QueryBuilder.Create<SetSpeicalDrugRecord>(); 
                if(qModel.DrugInventoryId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryId, qModel.DrugInventoryId);
                }
                if(qModel.MaintainDuetimeTo==qModel.MaintainDuetimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MaintainDuetime, qModel.MaintainDuetimeFrom);
                }
                else if(qModel.MaintainDuetimeTo>qModel.MaintainDuetimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MaintainDuetime, qModel.MaintainDuetimeFrom,qModel.MaintainDuetimeTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Reason)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Reason, qModel.Reason);
                }
                if(!string.IsNullOrEmpty(qModel.MaintainEmphasis)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MaintainEmphasis, qModel.MaintainEmphasis);
                }
                if(!string.IsNullOrEmpty(qModel.Memo)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Memo, qModel.Memo);
                }

                return HandlerFactory.SetSpeicalDrugRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SetSpeicalDrugRecord>>("调用设置重点药品记录表业务逻辑:通过查询Model分页查询实体(设置重点药品记录表)失败", ex);
            }  
		}

		#endregion 设置重点药品记录表 
		   
		#region 特殊管理药物类型

		/// <summary>
        /// 获取实体特殊管理药物类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SpecialDrugCategory GetSpecialDrugCategory(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SpecialDrugCategory>("调用特殊管理药物类型业务逻辑:根据编号获取实体(特殊管理药物类型)失败", ex);
            }
		} 

        /// <summary>
        /// 统计特殊管理药物类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSpecialDrugCategory(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用特殊管理药物类型业务逻辑:统计所有(特殊管理药物类型)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加特殊管理药物类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSpecialDrugCategory(SpecialDrugCategory value,out string msg)
		{
			try
            {
                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用特殊管理药物类型业务逻辑:添加实体(特殊管理药物类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除特殊管理药物类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSpecialDrugCategory(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用特殊管理药物类型业务逻辑:删除实体(特殊管理药物类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存特殊管理药物类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSpecialDrugCategory(SpecialDrugCategory value, out string msg)
		{
			try
            {
                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用特殊管理药物类型业务逻辑:保存实体(特殊管理药物类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录特殊管理药物类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SpecialDrugCategory> AllSpecialDrugCategorys(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用特殊管理药物类型业务逻辑:获取所有实体(特殊管理药物类型)失败";
                return this.HandleException<List<SpecialDrugCategory>>(message, ex);
            }
		}

		 
        public List<SpecialDrugCategory> QuerySpecialDrugCategorys(string name,string decription,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SpecialDrugCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用特殊管理药物类型业务逻辑:查询实体(特殊管理药物类型)失败";
                return this.HandleException<List<SpecialDrugCategory>>(msg, ex);
            }
        } 
		
		 
        public List<SpecialDrugCategory> QueryPagedSpecialDrugCategorys(string name,string decription,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SpecialDrugCategory>();
                var queryBuilder = QueryBuilder.Create<SpecialDrugCategory>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SpecialDrugCategory>>("调用特殊管理药物类型业务逻辑:查询实体(特殊管理药物类型)失败", ex);
            }
        } 
 
        public List<SpecialDrugCategory> SearchSpecialDrugCategorysByQueryModel(QuerySpecialDrugCategoryModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SpecialDrugCategory>();
                var queryBuilder = QueryBuilder.Create<SpecialDrugCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用特殊管理药物类型业务逻辑:通查询Model查询实体(特殊管理药物类型)失败";
                return this.HandleException<List<SpecialDrugCategory>>(message, ex);
            }  
		} 

		 
        public List<SpecialDrugCategory> SearchPagedSpecialDrugCategorysByQueryModel(QuerySpecialDrugCategoryModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SpecialDrugCategory>();
                var queryBuilder = QueryBuilder.Create<SpecialDrugCategory>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.SpecialDrugCategoryBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SpecialDrugCategory>>("调用特殊管理药物类型业务逻辑:通过查询Model分页查询实体(特殊管理药物类型)失败", ex);
            }  
		}

		#endregion 特殊管理药物类型 
		   
		#region 门店

		/// <summary>
        /// 获取实体门店
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Store GetStore(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.StoreBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Store>("调用门店业务逻辑:根据编号获取实体(门店)失败", ex);
            }
		} 

        /// <summary>
        /// 统计门店
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountStore(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.StoreBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用门店业务逻辑:统计所有(门店)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加门店
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddStore(Store value,out string msg)
		{
			try
            {
                return HandlerFactory.StoreBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用门店业务逻辑:添加实体(门店)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除门店
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteStore(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.StoreBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用门店业务逻辑:删除实体(门店)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存门店
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveStore(Store value, out string msg)
		{
			try
            {
                return HandlerFactory.StoreBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用门店业务逻辑:保存实体(门店)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录门店
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Store> AllStores(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.StoreBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用门店业务逻辑:获取所有实体(门店)失败";
                return this.HandleException<List<Store>>(message, ex);
            }
		}

		 
        public List<Store> QueryStores(string name,string decription,string code,bool enabled,bool queryenabled,string address,string tel,string head,int storetypevaluefrom,int storetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Store>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(head)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Head, head);
                }
                if(storetypevalueto==storetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StoreTypeValue, storetypevaluefrom);
                }
                else if(storetypevalueto>storetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.StoreTypeValue, storetypevaluefrom,storetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.StoreBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用门店业务逻辑:查询实体(门店)失败";
                return this.HandleException<List<Store>>(msg, ex);
            }
        } 
		
		 
        public List<Store> QueryPagedStores(string name,string decription,string code,bool enabled,bool queryenabled,string address,string tel,string head,int storetypevaluefrom,int storetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Store>();
                var queryBuilder = QueryBuilder.Create<Store>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(head)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Head, head);
                }
                if(storetypevalueto==storetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.StoreTypeValue, storetypevaluefrom);
                }
                else if(storetypevalueto>storetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.StoreTypeValue, storetypevaluefrom,storetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.StoreBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Store>>("调用门店业务逻辑:查询实体(门店)失败", ex);
            }
        } 
 
        public List<Store> SearchStoresByQueryModel(QueryStoreModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Store>();
                var queryBuilder = QueryBuilder.Create<Store>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Head)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Head, qModel.Head);
                }
                if(qModel.StoreTypeValueTo==qModel.StoreTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StoreTypeValue, qModel.StoreTypeValueFrom);
                }
                else if(qModel.StoreTypeValueTo>qModel.StoreTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StoreTypeValue, qModel.StoreTypeValueFrom,qModel.StoreTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.StoreBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用门店业务逻辑:通查询Model查询实体(门店)失败";
                return this.HandleException<List<Store>>(message, ex);
            }  
		} 

		 
        public List<Store> SearchPagedStoresByQueryModel(QueryStoreModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Store>();
                var queryBuilder = QueryBuilder.Create<Store>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Head)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Head, qModel.Head);
                }
                if(qModel.StoreTypeValueTo==qModel.StoreTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.StoreTypeValue, qModel.StoreTypeValueFrom);
                }
                else if(qModel.StoreTypeValueTo>qModel.StoreTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.StoreTypeValue, qModel.StoreTypeValueFrom,qModel.StoreTypeValueTo);
                }//From>To不参与条件

                return HandlerFactory.StoreBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Store>>("调用门店业务逻辑:通过查询Model分页查询实体(门店)失败", ex);
            }  
		}

		#endregion 门店 
		   
		#region 供货单位

		/// <summary>
        /// 获取实体供货单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SupplyUnit GetSupplyUnit(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SupplyUnitBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SupplyUnit>("调用供货单位业务逻辑:根据编号获取实体(供货单位)失败", ex);
            }
		} 

        /// <summary>
        /// 统计供货单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSupplyUnit(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SupplyUnitBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用供货单位业务逻辑:统计所有(供货单位)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加供货单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSupplyUnit(SupplyUnit value,out string msg)
		{
			try
            {
                return HandlerFactory.SupplyUnitBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用供货单位业务逻辑:添加实体(供货单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除供货单位
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSupplyUnit(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SupplyUnitBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用供货单位业务逻辑:删除实体(供货单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存供货单位
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSupplyUnit(SupplyUnit value, out string msg)
		{
			try
            {
                return HandlerFactory.SupplyUnitBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用供货单位业务逻辑:保存实体(供货单位)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录供货单位
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SupplyUnit> AllSupplyUnits(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SupplyUnitBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用供货单位业务逻辑:获取所有实体(供货单位)失败";
                return this.HandleException<List<SupplyUnit>>(message, ex);
            }
		}

		 
        public List<SupplyUnit> QuerySupplyUnits(bool isqualityagreementout,bool queryisqualityagreementout,DateTime qualityagreementoutdatefrom,DateTime qualityagreementoutdateto,bool isattorneyaattorneyout,bool queryisattorneyaattorneyout,DateTime attorneyaattorneyoutdatefrom,DateTime attorneyaattorneyoutdateto,string supplyproductclass,string qualitycharger,string bankaccountname,string bank,string bankaccount,bool valid,bool queryvalid,string validremark,bool islock,bool queryislock,string lockremark,string name,string code,string pinyincode,string contactname,string contacttel,string description,string legalperson,string header,string businessscope,string salesamount,string fax,string email,string webaddress,bool isoutdate,bool queryisoutdate,DateTime outdatefrom,DateTime outdateto,bool isgsplicenseoutdate,bool queryisgsplicenseoutdate,DateTime gsplicenseoutdatefrom,DateTime gsplicenseoutdateto,bool isgmplicenseoutdate,bool queryisgmplicenseoutdate,DateTime gmplicenseoutdatefrom,DateTime gmplicenseoutdateto,bool isbusinesslicenseoutdate,bool queryisbusinesslicenseoutdate,DateTime businesslicenseeoutdatefrom,DateTime businesslicenseeoutdateto,bool ismedicineproductionlicenseoutdate,bool queryismedicineproductionlicenseoutdate,DateTime medicineproductionlicenseoutdatefrom,DateTime medicineproductionlicenseoutdateto,bool ismedicinebusinesslicenseoutdate,bool queryismedicinebusinesslicenseoutdate,DateTime medicinebusinesslicenseoutdatefrom,DateTime medicinebusinesslicenseoutdateto,bool isinstrumentsproductionlicenseoutdate,bool queryisinstrumentsproductionlicenseoutdate,DateTime instrumentsproductionlicenseoutdatefrom,DateTime instrumentsproductionlicenseoutdateto,bool isinstrumentsbusinesslicenseoutdate,bool queryisinstrumentsbusinesslicenseoutdate,DateTime instrumentsbusinesslicenseoutdatefrom,DateTime instrumentsbusinesslicenseoutdateto,string taxregistrationcode,DateTime lastannualdtefrom,DateTime lastannualdteto,bool isapproval,bool queryisapproval,int approvalstatusvaluefrom,int approvalstatusvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SupplyUnit>(); 
                if(queryisqualityagreementout){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsQualityAgreementOut, isqualityagreementout);
}
                if(qualityagreementoutdateto!=default(DateTime)&&qualityagreementoutdatefrom!=default(DateTime)){//From==To执行==
                if(qualityagreementoutdateto==qualityagreementoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityAgreementOutdate, qualityagreementoutdatefrom);
                }
                else if(qualityagreementoutdateto>qualityagreementoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualityAgreementOutdate, qualityagreementoutdatefrom,qualityagreementoutdateto);
                }}//From>To不参与条件
                if(queryisattorneyaattorneyout){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsAttorneyAattorneyOut, isattorneyaattorneyout);
}
                if(attorneyaattorneyoutdateto!=default(DateTime)&&attorneyaattorneyoutdatefrom!=default(DateTime)){//From==To执行==
                if(attorneyaattorneyoutdateto==attorneyaattorneyoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.AttorneyAattorneyOutdate, attorneyaattorneyoutdatefrom);
                }
                else if(attorneyaattorneyoutdateto>attorneyaattorneyoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.AttorneyAattorneyOutdate, attorneyaattorneyoutdatefrom,attorneyaattorneyoutdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(supplyproductclass)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SupplyProductClass, supplyproductclass);
                }
                if(!string.IsNullOrEmpty(qualitycharger)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityCharger, qualitycharger);
                }
                if(!string.IsNullOrEmpty(bankaccountname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccountName, bankaccountname);
                }
                if(!string.IsNullOrEmpty(bank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Bank, bank);
                }
                if(!string.IsNullOrEmpty(bankaccount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccount, bankaccount);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(!string.IsNullOrEmpty(validremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, validremark);
                }
                if(queryislock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, islock);
}
                if(!string.IsNullOrEmpty(lockremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, lockremark);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(pinyincode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, pinyincode);
                }
                if(!string.IsNullOrEmpty(contactname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, contactname);
                }
                if(!string.IsNullOrEmpty(contacttel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, contacttel);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(salesamount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, salesamount);
                }
                if(!string.IsNullOrEmpty(fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, fax);
                }
                if(!string.IsNullOrEmpty(email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, email);
                }
                if(!string.IsNullOrEmpty(webaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, webaddress);
                }
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(queryisgsplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, isgsplicenseoutdate);
}
                if(gsplicenseoutdateto!=default(DateTime)&&gsplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gsplicenseoutdateto==gsplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom);
                }
                else if(gsplicenseoutdateto>gsplicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom,gsplicenseoutdateto);
                }}//From>To不参与条件
                if(queryisgmplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, isgmplicenseoutdate);
}
                if(gmplicenseoutdateto!=default(DateTime)&&gmplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gmplicenseoutdateto==gmplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom);
                }
                else if(gmplicenseoutdateto>gmplicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom,gmplicenseoutdateto);
                }}//From>To不参与条件
                if(queryisbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, isbusinesslicenseoutdate);
}
                if(businesslicenseeoutdateto!=default(DateTime)&&businesslicenseeoutdatefrom!=default(DateTime)){//From==To执行==
                if(businesslicenseeoutdateto==businesslicenseeoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom);
                }
                else if(businesslicenseeoutdateto>businesslicenseeoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom,businesslicenseeoutdateto);
                }}//From>To不参与条件
                if(queryismedicineproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, ismedicineproductionlicenseoutdate);
}
                if(medicineproductionlicenseoutdateto!=default(DateTime)&&medicineproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicineproductionlicenseoutdateto==medicineproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom);
                }
                else if(medicineproductionlicenseoutdateto>medicineproductionlicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom,medicineproductionlicenseoutdateto);
                }}//From>To不参与条件
                if(queryismedicinebusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, ismedicinebusinesslicenseoutdate);
}
                if(medicinebusinesslicenseoutdateto!=default(DateTime)&&medicinebusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicinebusinesslicenseoutdateto==medicinebusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom);
                }
                else if(medicinebusinesslicenseoutdateto>medicinebusinesslicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom,medicinebusinesslicenseoutdateto);
                }}//From>To不参与条件
                if(queryisinstrumentsproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, isinstrumentsproductionlicenseoutdate);
}
                if(instrumentsproductionlicenseoutdateto!=default(DateTime)&&instrumentsproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsproductionlicenseoutdateto==instrumentsproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom);
                }
                else if(instrumentsproductionlicenseoutdateto>instrumentsproductionlicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom,instrumentsproductionlicenseoutdateto);
                }}//From>To不参与条件
                if(queryisinstrumentsbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, isinstrumentsbusinesslicenseoutdate);
}
                if(instrumentsbusinesslicenseoutdateto!=default(DateTime)&&instrumentsbusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsbusinesslicenseoutdateto==instrumentsbusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom);
                }
                else if(instrumentsbusinesslicenseoutdateto>instrumentsbusinesslicenseoutdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom,instrumentsbusinesslicenseoutdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(taxregistrationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, taxregistrationcode);
                }
                if(lastannualdteto!=default(DateTime)&&lastannualdtefrom!=default(DateTime)){//From==To执行==
                if(lastannualdteto==lastannualdtefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, lastannualdtefrom);
                }
                else if(lastannualdteto>lastannualdtefrom){//From<To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, lastannualdtefrom,lastannualdteto);
                }}//From>To不参与条件
                if(queryisapproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, isapproval);
}
                if(approvalstatusvalueto==approvalstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, approvalstatusvaluefrom);
                }
                else if(approvalstatusvalueto>approvalstatusvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, approvalstatusvaluefrom,approvalstatusvalueto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.SupplyUnitBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用供货单位业务逻辑:查询实体(供货单位)失败";
                return this.HandleException<List<SupplyUnit>>(msg, ex);
            }
        } 
		
		 
        public List<SupplyUnit> QueryPagedSupplyUnits(bool isqualityagreementout,bool queryisqualityagreementout,DateTime qualityagreementoutdatefrom,DateTime qualityagreementoutdateto,bool isattorneyaattorneyout,bool queryisattorneyaattorneyout,DateTime attorneyaattorneyoutdatefrom,DateTime attorneyaattorneyoutdateto,string supplyproductclass,string qualitycharger,string bankaccountname,string bank,string bankaccount,bool valid,bool queryvalid,string validremark,bool islock,bool queryislock,string lockremark,string name,string code,string pinyincode,string contactname,string contacttel,string description,string legalperson,string header,string businessscope,string salesamount,string fax,string email,string webaddress,bool isoutdate,bool queryisoutdate,DateTime outdatefrom,DateTime outdateto,bool isgsplicenseoutdate,bool queryisgsplicenseoutdate,DateTime gsplicenseoutdatefrom,DateTime gsplicenseoutdateto,bool isgmplicenseoutdate,bool queryisgmplicenseoutdate,DateTime gmplicenseoutdatefrom,DateTime gmplicenseoutdateto,bool isbusinesslicenseoutdate,bool queryisbusinesslicenseoutdate,DateTime businesslicenseeoutdatefrom,DateTime businesslicenseeoutdateto,bool ismedicineproductionlicenseoutdate,bool queryismedicineproductionlicenseoutdate,DateTime medicineproductionlicenseoutdatefrom,DateTime medicineproductionlicenseoutdateto,bool ismedicinebusinesslicenseoutdate,bool queryismedicinebusinesslicenseoutdate,DateTime medicinebusinesslicenseoutdatefrom,DateTime medicinebusinesslicenseoutdateto,bool isinstrumentsproductionlicenseoutdate,bool queryisinstrumentsproductionlicenseoutdate,DateTime instrumentsproductionlicenseoutdatefrom,DateTime instrumentsproductionlicenseoutdateto,bool isinstrumentsbusinesslicenseoutdate,bool queryisinstrumentsbusinesslicenseoutdate,DateTime instrumentsbusinesslicenseoutdatefrom,DateTime instrumentsbusinesslicenseoutdateto,string taxregistrationcode,DateTime lastannualdtefrom,DateTime lastannualdteto,bool isapproval,bool queryisapproval,int approvalstatusvaluefrom,int approvalstatusvalueto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SupplyUnit>();
                var queryBuilder = QueryBuilder.Create<SupplyUnit>(); 
                if(queryisqualityagreementout){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsQualityAgreementOut, isqualityagreementout);
}
                if(qualityagreementoutdateto!=default(DateTime)&&qualityagreementoutdatefrom!=default(DateTime)){//From==To执行==
                if(qualityagreementoutdateto==qualityagreementoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityAgreementOutdate, qualityagreementoutdatefrom);
                }
                else if(qualityagreementoutdateto>qualityagreementoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.QualityAgreementOutdate, qualityagreementoutdatefrom,qualityagreementoutdateto);
                }}//From<To不参与条件
                if(queryisattorneyaattorneyout){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsAttorneyAattorneyOut, isattorneyaattorneyout);
}
                if(attorneyaattorneyoutdateto!=default(DateTime)&&attorneyaattorneyoutdatefrom!=default(DateTime)){//From==To执行==
                if(attorneyaattorneyoutdateto==attorneyaattorneyoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.AttorneyAattorneyOutdate, attorneyaattorneyoutdatefrom);
                }
                else if(attorneyaattorneyoutdateto>attorneyaattorneyoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.AttorneyAattorneyOutdate, attorneyaattorneyoutdatefrom,attorneyaattorneyoutdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(supplyproductclass)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SupplyProductClass, supplyproductclass);
                }
                if(!string.IsNullOrEmpty(qualitycharger)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityCharger, qualitycharger);
                }
                if(!string.IsNullOrEmpty(bankaccountname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccountName, bankaccountname);
                }
                if(!string.IsNullOrEmpty(bank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Bank, bank);
                }
                if(!string.IsNullOrEmpty(bankaccount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccount, bankaccount);
                }
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(!string.IsNullOrEmpty(validremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, validremark);
                }
                if(queryislock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, islock);
}
                if(!string.IsNullOrEmpty(lockremark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, lockremark);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(pinyincode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, pinyincode);
                }
                if(!string.IsNullOrEmpty(contactname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, contactname);
                }
                if(!string.IsNullOrEmpty(contacttel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, contacttel);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(!string.IsNullOrEmpty(legalperson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, legalperson);
                }
                if(!string.IsNullOrEmpty(header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, header);
                }
                if(!string.IsNullOrEmpty(businessscope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, businessscope);
                }
                if(!string.IsNullOrEmpty(salesamount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, salesamount);
                }
                if(!string.IsNullOrEmpty(fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, fax);
                }
                if(!string.IsNullOrEmpty(email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, email);
                }
                if(!string.IsNullOrEmpty(webaddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, webaddress);
                }
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(queryisgsplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, isgsplicenseoutdate);
}
                if(gsplicenseoutdateto!=default(DateTime)&&gsplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gsplicenseoutdateto==gsplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom);
                }
                else if(gsplicenseoutdateto>gsplicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, gsplicenseoutdatefrom,gsplicenseoutdateto);
                }}//From<To不参与条件
                if(queryisgmplicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, isgmplicenseoutdate);
}
                if(gmplicenseoutdateto!=default(DateTime)&&gmplicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(gmplicenseoutdateto==gmplicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom);
                }
                else if(gmplicenseoutdateto>gmplicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, gmplicenseoutdatefrom,gmplicenseoutdateto);
                }}//From<To不参与条件
                if(queryisbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, isbusinesslicenseoutdate);
}
                if(businesslicenseeoutdateto!=default(DateTime)&&businesslicenseeoutdatefrom!=default(DateTime)){//From==To执行==
                if(businesslicenseeoutdateto==businesslicenseeoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom);
                }
                else if(businesslicenseeoutdateto>businesslicenseeoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, businesslicenseeoutdatefrom,businesslicenseeoutdateto);
                }}//From<To不参与条件
                if(queryismedicineproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, ismedicineproductionlicenseoutdate);
}
                if(medicineproductionlicenseoutdateto!=default(DateTime)&&medicineproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicineproductionlicenseoutdateto==medicineproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom);
                }
                else if(medicineproductionlicenseoutdateto>medicineproductionlicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, medicineproductionlicenseoutdatefrom,medicineproductionlicenseoutdateto);
                }}//From<To不参与条件
                if(queryismedicinebusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, ismedicinebusinesslicenseoutdate);
}
                if(medicinebusinesslicenseoutdateto!=default(DateTime)&&medicinebusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(medicinebusinesslicenseoutdateto==medicinebusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom);
                }
                else if(medicinebusinesslicenseoutdateto>medicinebusinesslicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, medicinebusinesslicenseoutdatefrom,medicinebusinesslicenseoutdateto);
                }}//From<To不参与条件
                if(queryisinstrumentsproductionlicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, isinstrumentsproductionlicenseoutdate);
}
                if(instrumentsproductionlicenseoutdateto!=default(DateTime)&&instrumentsproductionlicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsproductionlicenseoutdateto==instrumentsproductionlicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom);
                }
                else if(instrumentsproductionlicenseoutdateto>instrumentsproductionlicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, instrumentsproductionlicenseoutdatefrom,instrumentsproductionlicenseoutdateto);
                }}//From<To不参与条件
                if(queryisinstrumentsbusinesslicenseoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, isinstrumentsbusinesslicenseoutdate);
}
                if(instrumentsbusinesslicenseoutdateto!=default(DateTime)&&instrumentsbusinesslicenseoutdatefrom!=default(DateTime)){//From==To执行==
                if(instrumentsbusinesslicenseoutdateto==instrumentsbusinesslicenseoutdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom);
                }
                else if(instrumentsbusinesslicenseoutdateto>instrumentsbusinesslicenseoutdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, instrumentsbusinesslicenseoutdatefrom,instrumentsbusinesslicenseoutdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(taxregistrationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, taxregistrationcode);
                }
                if(lastannualdteto!=default(DateTime)&&lastannualdtefrom!=default(DateTime)){//From==To执行==
                if(lastannualdteto==lastannualdtefrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, lastannualdtefrom);
                }
                else if(lastannualdteto>lastannualdtefrom){//From>To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, lastannualdtefrom,lastannualdteto);
                }}//From<To不参与条件
                if(queryisapproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, isapproval);
}
                if(approvalstatusvalueto==approvalstatusvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, approvalstatusvaluefrom);
                }
                else if(approvalstatusvalueto>approvalstatusvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, approvalstatusvaluefrom,approvalstatusvalueto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.SupplyUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SupplyUnit>>("调用供货单位业务逻辑:查询实体(供货单位)失败", ex);
            }
        } 
 
        public List<SupplyUnit> SearchSupplyUnitsByQueryModel(QuerySupplyUnitModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SupplyUnit>();
                var queryBuilder = QueryBuilder.Create<SupplyUnit>(); 
                if(qModel.QueryIsQualityAgreementOut){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsQualityAgreementOut, qModel.IsQualityAgreementOut);
}
                if(qModel.QualityAgreementFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.QualityAgreementFile, qModel.QualityAgreementFile);
                }
                if(qModel.QualityAgreementOutdateTo!=default(DateTime)&&qModel.QualityAgreementOutdateFrom!=default(DateTime)){
                if(qModel.QualityAgreementOutdateTo==qModel.QualityAgreementOutdateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityAgreementOutdate, qModel.QualityAgreementOutdateFrom);
                }
                else if(qModel.QualityAgreementOutdateTo>qModel.QualityAgreementOutdateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualityAgreementOutdate, qModel.QualityAgreementOutdateFrom,qModel.QualityAgreementOutdateTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsAttorneyAattorneyOut){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsAttorneyAattorneyOut, qModel.IsAttorneyAattorneyOut);
}
                if(qModel.AttorneyAattorneyFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AttorneyAattorneyFile, qModel.AttorneyAattorneyFile);
                }
                if(qModel.AttorneyAattorneyOutdateTo!=default(DateTime)&&qModel.AttorneyAattorneyOutdateFrom!=default(DateTime)){
                if(qModel.AttorneyAattorneyOutdateTo==qModel.AttorneyAattorneyOutdateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AttorneyAattorneyOutdate, qModel.AttorneyAattorneyOutdateFrom);
                }
                else if(qModel.AttorneyAattorneyOutdateTo>qModel.AttorneyAattorneyOutdateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AttorneyAattorneyOutdate, qModel.AttorneyAattorneyOutdateFrom,qModel.AttorneyAattorneyOutdateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.SupplyProductClass)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SupplyProductClass, qModel.SupplyProductClass);
                }
                if(!string.IsNullOrEmpty(qModel.QualityCharger)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityCharger, qModel.QualityCharger);
                }
                if(qModel.SealFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SealFile, qModel.SealFile);
                }
                if(qModel.SingleTicketFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SingleTicketFile, qModel.SingleTicketFile);
                }
                if(qModel.ProofFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ProofFile, qModel.ProofFile);
                }
                if(!string.IsNullOrEmpty(qModel.BankAccountName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccountName, qModel.BankAccountName);
                }
                if(!string.IsNullOrEmpty(qModel.Bank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Bank, qModel.Bank);
                }
                if(!string.IsNullOrEmpty(qModel.BankAccount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccount, qModel.BankAccount);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(!string.IsNullOrEmpty(qModel.ValidRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, qModel.ValidRemark);
                }
                if(qModel.QueryIsLock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, qModel.IsLock);
}
                if(!string.IsNullOrEmpty(qModel.LockRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, qModel.LockRemark);
                }
                if(qModel.FlowID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowID, qModel.FlowID);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.PinyinCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, qModel.PinyinCode);
                }
                if(!string.IsNullOrEmpty(qModel.ContactName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, qModel.ContactName);
                }
                if(!string.IsNullOrEmpty(qModel.ContactTel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, qModel.ContactTel);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.SalesAmount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, qModel.SalesAmount);
                }
                if(!string.IsNullOrEmpty(qModel.Fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, qModel.Fax);
                }
                if(!string.IsNullOrEmpty(qModel.Email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, qModel.Email);
                }
                if(!string.IsNullOrEmpty(qModel.WebAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, qModel.WebAddress);
                }
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GSPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GSPLicenseId, qModel.GSPLicenseId);
                }
                if(qModel.QueryIsGSPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, qModel.IsGSPLicenseOutDate);
}
                if(qModel.GSPLicenseOutDateTo!=default(DateTime)&&qModel.GSPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GSPLicenseOutDateTo==qModel.GSPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom);
                }
                else if(qModel.GSPLicenseOutDateTo>qModel.GSPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom,qModel.GSPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GMPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GMPLicenseId, qModel.GMPLicenseId);
                }
                if(qModel.QueryIsGMPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, qModel.IsGMPLicenseOutDate);
}
                if(qModel.GMPLicenseOutDateTo!=default(DateTime)&&qModel.GMPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GMPLicenseOutDateTo==qModel.GMPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom);
                }
                else if(qModel.GMPLicenseOutDateTo>qModel.GMPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom,qModel.GMPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.BusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessLicenseId, qModel.BusinessLicenseId);
                }
                if(qModel.QueryIsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, qModel.IsBusinessLicenseOutDate);
}
                if(qModel.BusinessLicenseeOutDateTo!=default(DateTime)&&qModel.BusinessLicenseeOutDateFrom!=default(DateTime)){
                if(qModel.BusinessLicenseeOutDateTo==qModel.BusinessLicenseeOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom);
                }
                else if(qModel.BusinessLicenseeOutDateTo>qModel.BusinessLicenseeOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom,qModel.BusinessLicenseeOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineProductionLicenseId, qModel.MedicineProductionLicenseId);
                }
                if(qModel.QueryIsMedicineProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, qModel.IsMedicineProductionLicenseOutDate);
}
                if(qModel.MedicineProductionLicenseOutDateTo!=default(DateTime)&&qModel.MedicineProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineProductionLicenseOutDateTo==qModel.MedicineProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom);
                }
                else if(qModel.MedicineProductionLicenseOutDateTo>qModel.MedicineProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom,qModel.MedicineProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseId, qModel.MedicineBusinessLicenseId);
                }
                if(qModel.QueryIsMedicineBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, qModel.IsMedicineBusinessLicenseOutDate);
}
                if(qModel.MedicineBusinessLicenseOutDateTo!=default(DateTime)&&qModel.MedicineBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineBusinessLicenseOutDateTo==qModel.MedicineBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom);
                }
                else if(qModel.MedicineBusinessLicenseOutDateTo>qModel.MedicineBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom,qModel.MedicineBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseId, qModel.InstrumentsProductionLicenseId);
                }
                if(qModel.QueryIsInstrumentsProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, qModel.IsInstrumentsProductionLicenseOutDate);
}
                if(qModel.InstrumentsProductionLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsProductionLicenseOutDateTo==qModel.InstrumentsProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsProductionLicenseOutDateTo>qModel.InstrumentsProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom,qModel.InstrumentsProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseId, qModel.InstrumentsBusinessLicenseId);
                }
                if(qModel.QueryIsInstrumentsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, qModel.IsInstrumentsBusinessLicenseOutDate);
}
                if(qModel.InstrumentsBusinessLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsBusinessLicenseOutDateTo==qModel.InstrumentsBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsBusinessLicenseOutDateTo>qModel.InstrumentsBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom,qModel.InstrumentsBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.TaxRegistrationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, qModel.TaxRegistrationCode);
                }
                if(qModel.TaxRegistrationFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.TaxRegistrationFile, qModel.TaxRegistrationFile);
                }
                if(qModel.AnnualFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AnnualFile, qModel.AnnualFile);
                }
                if(qModel.LastAnnualDteTo!=default(DateTime)&&qModel.LastAnnualDteFrom!=default(DateTime)){
                if(qModel.LastAnnualDteTo==qModel.LastAnnualDteFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, qModel.LastAnnualDteFrom);
                }
                else if(qModel.LastAnnualDteTo>qModel.LastAnnualDteFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, qModel.LastAnnualDteFrom,qModel.LastAnnualDteTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsApproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, qModel.IsApproval);
}
                if(qModel.ApprovalStatusValueTo==qModel.ApprovalStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom);
                }
                else if(qModel.ApprovalStatusValueTo>qModel.ApprovalStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom,qModel.ApprovalStatusValueTo);
                }//From>To不参与条件
                if(qModel.UnitTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UnitTypeId, qModel.UnitTypeId);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.SupplyUnitBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用供货单位业务逻辑:通查询Model查询实体(供货单位)失败";
                return this.HandleException<List<SupplyUnit>>(message, ex);
            }  
		} 

		 
        public List<SupplyUnit> SearchPagedSupplyUnitsByQueryModel(QuerySupplyUnitModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SupplyUnit>();
                var queryBuilder = QueryBuilder.Create<SupplyUnit>(); 
                if(qModel.QueryIsQualityAgreementOut){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsQualityAgreementOut, qModel.IsQualityAgreementOut);
}
                if(qModel.QualityAgreementFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.QualityAgreementFile, qModel.QualityAgreementFile);
                }
                if(qModel.QualityAgreementOutdateTo!=default(DateTime)&&qModel.QualityAgreementOutdateFrom!=default(DateTime)){
                if(qModel.QualityAgreementOutdateTo==qModel.QualityAgreementOutdateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.QualityAgreementOutdate, qModel.QualityAgreementOutdateFrom);
                }
                else if(qModel.QualityAgreementOutdateTo>qModel.QualityAgreementOutdateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.QualityAgreementOutdate, qModel.QualityAgreementOutdateFrom,qModel.QualityAgreementOutdateTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsAttorneyAattorneyOut){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsAttorneyAattorneyOut, qModel.IsAttorneyAattorneyOut);
}
                if(qModel.AttorneyAattorneyFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AttorneyAattorneyFile, qModel.AttorneyAattorneyFile);
                }
                if(qModel.AttorneyAattorneyOutdateTo!=default(DateTime)&&qModel.AttorneyAattorneyOutdateFrom!=default(DateTime)){
                if(qModel.AttorneyAattorneyOutdateTo==qModel.AttorneyAattorneyOutdateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.AttorneyAattorneyOutdate, qModel.AttorneyAattorneyOutdateFrom);
                }
                else if(qModel.AttorneyAattorneyOutdateTo>qModel.AttorneyAattorneyOutdateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.AttorneyAattorneyOutdate, qModel.AttorneyAattorneyOutdateFrom,qModel.AttorneyAattorneyOutdateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.SupplyProductClass)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SupplyProductClass, qModel.SupplyProductClass);
                }
                if(!string.IsNullOrEmpty(qModel.QualityCharger)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.QualityCharger, qModel.QualityCharger);
                }
                if(qModel.SealFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SealFile, qModel.SealFile);
                }
                if(qModel.SingleTicketFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SingleTicketFile, qModel.SingleTicketFile);
                }
                if(qModel.ProofFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.ProofFile, qModel.ProofFile);
                }
                if(!string.IsNullOrEmpty(qModel.BankAccountName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccountName, qModel.BankAccountName);
                }
                if(!string.IsNullOrEmpty(qModel.Bank)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Bank, qModel.Bank);
                }
                if(!string.IsNullOrEmpty(qModel.BankAccount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BankAccount, qModel.BankAccount);
                }
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(!string.IsNullOrEmpty(qModel.ValidRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ValidRemark, qModel.ValidRemark);
                }
                if(qModel.QueryIsLock){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsLock, qModel.IsLock);
}
                if(!string.IsNullOrEmpty(qModel.LockRemark)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LockRemark, qModel.LockRemark);
                }
                if(qModel.FlowID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.FlowID, qModel.FlowID);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.PinyinCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PinyinCode, qModel.PinyinCode);
                }
                if(!string.IsNullOrEmpty(qModel.ContactName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactName, qModel.ContactName);
                }
                if(!string.IsNullOrEmpty(qModel.ContactTel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ContactTel, qModel.ContactTel);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(!string.IsNullOrEmpty(qModel.LegalPerson)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LegalPerson, qModel.LegalPerson);
                }
                if(!string.IsNullOrEmpty(qModel.Header)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Header, qModel.Header);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScope)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScope, qModel.BusinessScope);
                }
                if(!string.IsNullOrEmpty(qModel.SalesAmount)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SalesAmount, qModel.SalesAmount);
                }
                if(!string.IsNullOrEmpty(qModel.Fax)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Fax, qModel.Fax);
                }
                if(!string.IsNullOrEmpty(qModel.Email)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Email, qModel.Email);
                }
                if(!string.IsNullOrEmpty(qModel.WebAddress)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WebAddress, qModel.WebAddress);
                }
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GSPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GSPLicenseId, qModel.GSPLicenseId);
                }
                if(qModel.QueryIsGSPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGSPLicenseOutDate, qModel.IsGSPLicenseOutDate);
}
                if(qModel.GSPLicenseOutDateTo!=default(DateTime)&&qModel.GSPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GSPLicenseOutDateTo==qModel.GSPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom);
                }
                else if(qModel.GSPLicenseOutDateTo>qModel.GSPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GSPLicenseOutDate, qModel.GSPLicenseOutDateFrom,qModel.GSPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.GMPLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.GMPLicenseId, qModel.GMPLicenseId);
                }
                if(qModel.QueryIsGMPLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsGMPLicenseOutDate, qModel.IsGMPLicenseOutDate);
}
                if(qModel.GMPLicenseOutDateTo!=default(DateTime)&&qModel.GMPLicenseOutDateFrom!=default(DateTime)){
                if(qModel.GMPLicenseOutDateTo==qModel.GMPLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom);
                }
                else if(qModel.GMPLicenseOutDateTo>qModel.GMPLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.GMPLicenseOutDate, qModel.GMPLicenseOutDateFrom,qModel.GMPLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.BusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.BusinessLicenseId, qModel.BusinessLicenseId);
                }
                if(qModel.QueryIsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsBusinessLicenseOutDate, qModel.IsBusinessLicenseOutDate);
}
                if(qModel.BusinessLicenseeOutDateTo!=default(DateTime)&&qModel.BusinessLicenseeOutDateFrom!=default(DateTime)){
                if(qModel.BusinessLicenseeOutDateTo==qModel.BusinessLicenseeOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom);
                }
                else if(qModel.BusinessLicenseeOutDateTo>qModel.BusinessLicenseeOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.BusinessLicenseeOutDate, qModel.BusinessLicenseeOutDateFrom,qModel.BusinessLicenseeOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineProductionLicenseId, qModel.MedicineProductionLicenseId);
                }
                if(qModel.QueryIsMedicineProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineProductionLicenseOutDate, qModel.IsMedicineProductionLicenseOutDate);
}
                if(qModel.MedicineProductionLicenseOutDateTo!=default(DateTime)&&qModel.MedicineProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineProductionLicenseOutDateTo==qModel.MedicineProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom);
                }
                else if(qModel.MedicineProductionLicenseOutDateTo>qModel.MedicineProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineProductionLicenseOutDate, qModel.MedicineProductionLicenseOutDateFrom,qModel.MedicineProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.MedicineBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseId, qModel.MedicineBusinessLicenseId);
                }
                if(qModel.QueryIsMedicineBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsMedicineBusinessLicenseOutDate, qModel.IsMedicineBusinessLicenseOutDate);
}
                if(qModel.MedicineBusinessLicenseOutDateTo!=default(DateTime)&&qModel.MedicineBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.MedicineBusinessLicenseOutDateTo==qModel.MedicineBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom);
                }
                else if(qModel.MedicineBusinessLicenseOutDateTo>qModel.MedicineBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.MedicineBusinessLicenseOutDate, qModel.MedicineBusinessLicenseOutDateFrom,qModel.MedicineBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsProductionLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseId, qModel.InstrumentsProductionLicenseId);
                }
                if(qModel.QueryIsInstrumentsProductionLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsProductionLicenseOutDate, qModel.IsInstrumentsProductionLicenseOutDate);
}
                if(qModel.InstrumentsProductionLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsProductionLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsProductionLicenseOutDateTo==qModel.InstrumentsProductionLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsProductionLicenseOutDateTo>qModel.InstrumentsProductionLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsProductionLicenseOutDate, qModel.InstrumentsProductionLicenseOutDateFrom,qModel.InstrumentsProductionLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(qModel.InstrumentsBusinessLicenseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseId, qModel.InstrumentsBusinessLicenseId);
                }
                if(qModel.QueryIsInstrumentsBusinessLicenseOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsInstrumentsBusinessLicenseOutDate, qModel.IsInstrumentsBusinessLicenseOutDate);
}
                if(qModel.InstrumentsBusinessLicenseOutDateTo!=default(DateTime)&&qModel.InstrumentsBusinessLicenseOutDateFrom!=default(DateTime)){
                if(qModel.InstrumentsBusinessLicenseOutDateTo==qModel.InstrumentsBusinessLicenseOutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom);
                }
                else if(qModel.InstrumentsBusinessLicenseOutDateTo>qModel.InstrumentsBusinessLicenseOutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.InstrumentsBusinessLicenseOutDate, qModel.InstrumentsBusinessLicenseOutDateFrom,qModel.InstrumentsBusinessLicenseOutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.TaxRegistrationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TaxRegistrationCode, qModel.TaxRegistrationCode);
                }
                if(qModel.TaxRegistrationFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.TaxRegistrationFile, qModel.TaxRegistrationFile);
                }
                if(qModel.AnnualFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AnnualFile, qModel.AnnualFile);
                }
                if(qModel.LastAnnualDteTo!=default(DateTime)&&qModel.LastAnnualDteFrom!=default(DateTime)){
                if(qModel.LastAnnualDteTo==qModel.LastAnnualDteFrom){//From==To执行==
                    queryBuilder.Equals(a => a.LastAnnualDte, qModel.LastAnnualDteFrom);
                }
                else if(qModel.LastAnnualDteTo>qModel.LastAnnualDteFrom){//From<To执行Between
                    queryBuilder.Between(a => a.LastAnnualDte, qModel.LastAnnualDteFrom,qModel.LastAnnualDteTo);
                }//From>To不参与条件
                }
                if(qModel.QueryIsApproval){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsApproval, qModel.IsApproval);
}
                if(qModel.ApprovalStatusValueTo==qModel.ApprovalStatusValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom);
                }
                else if(qModel.ApprovalStatusValueTo>qModel.ApprovalStatusValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ApprovalStatusValue, qModel.ApprovalStatusValueFrom,qModel.ApprovalStatusValueTo);
                }//From>To不参与条件
                if(qModel.UnitTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UnitTypeId, qModel.UnitTypeId);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.SupplyUnitBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SupplyUnit>>("调用供货单位业务逻辑:通过查询Model分页查询实体(供货单位)失败", ex);
            }  
		}

		#endregion 供货单位 
		   
		#region 供货商销售人员

		/// <summary>
        /// 获取实体供货商销售人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public SupplyUnitSalesman GetSupplyUnitSalesman(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<SupplyUnitSalesman>("调用供货商销售人员业务逻辑:根据编号获取实体(供货商销售人员)失败", ex);
            }
		} 

        /// <summary>
        /// 统计供货商销售人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountSupplyUnitSalesman(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用供货商销售人员业务逻辑:统计所有(供货商销售人员)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加供货商销售人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSupplyUnitSalesman(SupplyUnitSalesman value,out string msg)
		{
			try
            {
                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用供货商销售人员业务逻辑:添加实体(供货商销售人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除供货商销售人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSupplyUnitSalesman(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用供货商销售人员业务逻辑:删除实体(供货商销售人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存供货商销售人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSupplyUnitSalesman(SupplyUnitSalesman value, out string msg)
		{
			try
            {
                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用供货商销售人员业务逻辑:保存实体(供货商销售人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录供货商销售人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SupplyUnitSalesman> AllSupplyUnitSalesmans(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用供货商销售人员业务逻辑:获取所有实体(供货商销售人员)失败";
                return this.HandleException<List<SupplyUnitSalesman>>(message, ex);
            }
		}

		 
        public List<SupplyUnitSalesman> QuerySupplyUnitSalesmans(DateTime outdatefrom,DateTime outdateto,string name,string idnumber,string tel,string address,DateTime birthdayfrom,DateTime birthdayto,string gender,bool enabled,bool queryenabled,bool valid,bool queryvalid,bool isoutdate,bool queryisoutdate,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string businessscopes,bool ischecked,bool queryischecked,string idchecktype,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<SupplyUnitSalesman>(); 
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(idnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, idnumber);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(birthdayto!=default(DateTime)&&birthdayfrom!=default(DateTime)){//From==To执行==
                if(birthdayto==birthdayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, birthdayfrom);
                }
                else if(birthdayto>birthdayfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, birthdayfrom,birthdayto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(businessscopes)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopes, businessscopes);
                }
                if(queryischecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, ischecked);
}
                if(!string.IsNullOrEmpty(idchecktype)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, idchecktype);
                }

                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用供货商销售人员业务逻辑:查询实体(供货商销售人员)失败";
                return this.HandleException<List<SupplyUnitSalesman>>(msg, ex);
            }
        } 
		
		 
        public List<SupplyUnitSalesman> QueryPagedSupplyUnitSalesmans(DateTime outdatefrom,DateTime outdateto,string name,string idnumber,string tel,string address,DateTime birthdayfrom,DateTime birthdayto,string gender,bool enabled,bool queryenabled,bool valid,bool queryvalid,bool isoutdate,bool queryisoutdate,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string businessscopes,bool ischecked,bool queryischecked,string idchecktype,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SupplyUnitSalesman>();
                var queryBuilder = QueryBuilder.Create<SupplyUnitSalesman>(); 
                if(outdateto!=default(DateTime)&&outdatefrom!=default(DateTime)){//From==To执行==
                if(outdateto==outdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, outdatefrom);
                }
                else if(outdateto>outdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutDate, outdatefrom,outdateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(idnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, idnumber);
                }
                if(!string.IsNullOrEmpty(tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, tel);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(birthdayto!=default(DateTime)&&birthdayfrom!=default(DateTime)){//From==To执行==
                if(birthdayto==birthdayfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, birthdayfrom);
                }
                else if(birthdayto>birthdayfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Birthday, birthdayfrom,birthdayto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, gender);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(queryvalid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, valid);
}
                if(queryisoutdate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, isoutdate);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(businessscopes)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopes, businessscopes);
                }
                if(queryischecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, ischecked);
}
                if(!string.IsNullOrEmpty(idchecktype)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, idchecktype);
                }

                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<SupplyUnitSalesman>>("调用供货商销售人员业务逻辑:查询实体(供货商销售人员)失败", ex);
            }
        } 
 
        public List<SupplyUnitSalesman> SearchSupplyUnitSalesmansByQueryModel(QuerySupplyUnitSalesmanModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<SupplyUnitSalesman>();
                var queryBuilder = QueryBuilder.Create<SupplyUnitSalesman>(); 
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.IDFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDFile, qModel.IDFile);
                }
                if(!string.IsNullOrEmpty(qModel.IDNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(qModel.BirthdayTo!=default(DateTime)&&qModel.BirthdayFrom!=default(DateTime)){
                if(qModel.BirthdayTo==qModel.BirthdayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                }
                else if(qModel.BirthdayTo>qModel.BirthdayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom,qModel.BirthdayTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.AuthorizedDistrictId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AuthorizedDistrictId, qModel.AuthorizedDistrictId);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScopes)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopes, qModel.BusinessScopes);
                }
                if(qModel.QueryIsChecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, qModel.IsChecked);
}
                if(!string.IsNullOrEmpty(qModel.IDCheckType)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, qModel.IDCheckType);
                }
                if(qModel.IDCheckUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDCheckUserId, qModel.IDCheckUserId);
                }
                if(qModel.AuthorizationDocId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AuthorizationDocId, qModel.AuthorizationDocId);
                }
                if(qModel.SupplyUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SupplyUnitId, qModel.SupplyUnitId);
                }

                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用供货商销售人员业务逻辑:通查询Model查询实体(供货商销售人员)失败";
                return this.HandleException<List<SupplyUnitSalesman>>(message, ex);
            }  
		} 

		 
        public List<SupplyUnitSalesman> SearchPagedSupplyUnitSalesmansByQueryModel(QuerySupplyUnitSalesmanModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<SupplyUnitSalesman>();
                var queryBuilder = QueryBuilder.Create<SupplyUnitSalesman>(); 
                if(qModel.OutDateTo!=default(DateTime)&&qModel.OutDateFrom!=default(DateTime)){
                if(qModel.OutDateTo==qModel.OutDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutDate, qModel.OutDateFrom);
                }
                else if(qModel.OutDateTo>qModel.OutDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutDate, qModel.OutDateFrom,qModel.OutDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.IDFile!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDFile, qModel.IDFile);
                }
                if(!string.IsNullOrEmpty(qModel.IDNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if(!string.IsNullOrEmpty(qModel.Tel)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(qModel.BirthdayTo!=default(DateTime)&&qModel.BirthdayFrom!=default(DateTime)){
                if(qModel.BirthdayTo==qModel.BirthdayFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                }
                else if(qModel.BirthdayTo>qModel.BirthdayFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom,qModel.BirthdayTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Gender)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.QueryValid){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.QueryIsOutDate){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutDate, qModel.IsOutDate);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.AuthorizedDistrictId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AuthorizedDistrictId, qModel.AuthorizedDistrictId);
                }
                if(!string.IsNullOrEmpty(qModel.BusinessScopes)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BusinessScopes, qModel.BusinessScopes);
                }
                if(qModel.QueryIsChecked){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsChecked, qModel.IsChecked);
}
                if(!string.IsNullOrEmpty(qModel.IDCheckType)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDCheckType, qModel.IDCheckType);
                }
                if(qModel.IDCheckUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.IDCheckUserId, qModel.IDCheckUserId);
                }
                if(qModel.AuthorizationDocId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.AuthorizationDocId, qModel.AuthorizationDocId);
                }
                if(qModel.SupplyUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SupplyUnitId, qModel.SupplyUnitId);
                }

                return HandlerFactory.SupplyUnitSalesmanBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<SupplyUnitSalesman>>("调用供货商销售人员业务逻辑:通过查询Model分页查询实体(供货商销售人员)失败", ex);
            }  
		}

		#endregion 供货商销售人员 
		   
		#region 税率

		/// <summary>
        /// 获取实体税率
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public TaxRate GetTaxRate(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.TaxRateBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<TaxRate>("调用税率业务逻辑:根据编号获取实体(税率)失败", ex);
            }
		} 

        /// <summary>
        /// 统计税率
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountTaxRate(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.TaxRateBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用税率业务逻辑:统计所有(税率)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加税率
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddTaxRate(TaxRate value,out string msg)
		{
			try
            {
                return HandlerFactory.TaxRateBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用税率业务逻辑:添加实体(税率)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除税率
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteTaxRate(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.TaxRateBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用税率业务逻辑:删除实体(税率)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存税率
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveTaxRate(TaxRate value, out string msg)
		{
			try
            {
                return HandlerFactory.TaxRateBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用税率业务逻辑:保存实体(税率)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录税率
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<TaxRate> AllTaxRates(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.TaxRateBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用税率业务逻辑:获取所有实体(税率)失败";
                return this.HandleException<List<TaxRate>>(message, ex);
            }
		}

		 
        public List<TaxRate> QueryTaxRates(string name,string code,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<TaxRate>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.TaxRateBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用税率业务逻辑:查询实体(税率)失败";
                return this.HandleException<List<TaxRate>>(msg, ex);
            }
        } 
		
		 
        public List<TaxRate> QueryPagedTaxRates(string name,string code,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<TaxRate>();
                var queryBuilder = QueryBuilder.Create<TaxRate>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.TaxRateBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<TaxRate>>("调用税率业务逻辑:查询实体(税率)失败", ex);
            }
        } 
 
        public List<TaxRate> SearchTaxRatesByQueryModel(QueryTaxRateModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<TaxRate>();
                var queryBuilder = QueryBuilder.Create<TaxRate>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.TaxRateBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用税率业务逻辑:通查询Model查询实体(税率)失败";
                return this.HandleException<List<TaxRate>>(message, ex);
            }  
		} 

		 
        public List<TaxRate> SearchPagedTaxRatesByQueryModel(QueryTaxRateModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<TaxRate>();
                var queryBuilder = QueryBuilder.Create<TaxRate>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}

                return HandlerFactory.TaxRateBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<TaxRate>>("调用税率业务逻辑:通过查询Model分页查询实体(税率)失败", ex);
            }  
		}

		#endregion 税率 
		   
		#region 企业类型

		/// <summary>
        /// 获取实体企业类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public UnitType GetUnitType(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UnitTypeBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<UnitType>("调用企业类型业务逻辑:根据编号获取实体(企业类型)失败", ex);
            }
		} 

        /// <summary>
        /// 统计企业类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountUnitType(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UnitTypeBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用企业类型业务逻辑:统计所有(企业类型)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加企业类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddUnitType(UnitType value,out string msg)
		{
			try
            {
                return HandlerFactory.UnitTypeBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用企业类型业务逻辑:添加实体(企业类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除企业类型
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteUnitType(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.UnitTypeBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用企业类型业务逻辑:删除实体(企业类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存企业类型
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveUnitType(UnitType value, out string msg)
		{
			try
            {
                return HandlerFactory.UnitTypeBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用企业类型业务逻辑:保存实体(企业类型)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录企业类型
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<UnitType> AllUnitTypes(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UnitTypeBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用企业类型业务逻辑:获取所有实体(企业类型)失败";
                return this.HandleException<List<UnitType>>(message, ex);
            }
		}

		 
        public List<UnitType> QueryUnitTypes(string name,bool enabled,bool queryenabled,string decription,string code,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<UnitType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }

                return HandlerFactory.UnitTypeBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用企业类型业务逻辑:查询实体(企业类型)失败";
                return this.HandleException<List<UnitType>>(msg, ex);
            }
        } 
		
		 
        public List<UnitType> QueryPagedUnitTypes(string name,bool enabled,bool queryenabled,string decription,string code,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<UnitType>();
                var queryBuilder = QueryBuilder.Create<UnitType>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }

                return HandlerFactory.UnitTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<UnitType>>("调用企业类型业务逻辑:查询实体(企业类型)失败", ex);
            }
        } 
 
        public List<UnitType> SearchUnitTypesByQueryModel(QueryUnitTypeModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<UnitType>();
                var queryBuilder = QueryBuilder.Create<UnitType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }

                return HandlerFactory.UnitTypeBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用企业类型业务逻辑:通查询Model查询实体(企业类型)失败";
                return this.HandleException<List<UnitType>>(message, ex);
            }  
		} 

		 
        public List<UnitType> SearchPagedUnitTypesByQueryModel(QueryUnitTypeModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<UnitType>();
                var queryBuilder = QueryBuilder.Create<UnitType>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }

                return HandlerFactory.UnitTypeBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<UnitType>>("调用企业类型业务逻辑:通过查询Model分页查询实体(企业类型)失败", ex);
            }  
		}

		#endregion 企业类型 
		   
		#region 数据上传记录

		/// <summary>
        /// 获取实体数据上传记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public UploadRecord GetUploadRecord(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UploadRecordBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<UploadRecord>("调用数据上传记录业务逻辑:根据编号获取实体(数据上传记录)失败", ex);
            }
		} 

        /// <summary>
        /// 统计数据上传记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountUploadRecord(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UploadRecordBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用数据上传记录业务逻辑:统计所有(数据上传记录)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加数据上传记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddUploadRecord(UploadRecord value,out string msg)
		{
			try
            {
                return HandlerFactory.UploadRecordBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用数据上传记录业务逻辑:添加实体(数据上传记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除数据上传记录
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteUploadRecord(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.UploadRecordBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用数据上传记录业务逻辑:删除实体(数据上传记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存数据上传记录
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveUploadRecord(UploadRecord value, out string msg)
		{
			try
            {
                return HandlerFactory.UploadRecordBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用数据上传记录业务逻辑:保存实体(数据上传记录)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录数据上传记录
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<UploadRecord> AllUploadRecords(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UploadRecordBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用数据上传记录业务逻辑:获取所有实体(数据上传记录)失败";
                return this.HandleException<List<UploadRecord>>(message, ex);
            }
		}

		 
        public List<UploadRecord> QueryUploadRecords(string tablename,int indexfrom,int indexto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<UploadRecord>(); 
                if(!string.IsNullOrEmpty(tablename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TableName, tablename);
                }
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件

                return HandlerFactory.UploadRecordBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用数据上传记录业务逻辑:查询实体(数据上传记录)失败";
                return this.HandleException<List<UploadRecord>>(msg, ex);
            }
        } 
		
		 
        public List<UploadRecord> QueryPagedUploadRecords(string tablename,int indexfrom,int indexto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<UploadRecord>();
                var queryBuilder = QueryBuilder.Create<UploadRecord>(); 
                if(!string.IsNullOrEmpty(tablename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TableName, tablename);
                }
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件

                return HandlerFactory.UploadRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<UploadRecord>>("调用数据上传记录业务逻辑:查询实体(数据上传记录)失败", ex);
            }
        } 
 
        public List<UploadRecord> SearchUploadRecordsByQueryModel(QueryUploadRecordModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<UploadRecord>();
                var queryBuilder = QueryBuilder.Create<UploadRecord>(); 
                if(!string.IsNullOrEmpty(qModel.TableName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TableName, qModel.TableName);
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件

                return HandlerFactory.UploadRecordBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用数据上传记录业务逻辑:通查询Model查询实体(数据上传记录)失败";
                return this.HandleException<List<UploadRecord>>(message, ex);
            }  
		} 

		 
        public List<UploadRecord> SearchPagedUploadRecordsByQueryModel(QueryUploadRecordModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<UploadRecord>();
                var queryBuilder = QueryBuilder.Create<UploadRecord>(); 
                if(!string.IsNullOrEmpty(qModel.TableName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TableName, qModel.TableName);
                }
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件

                return HandlerFactory.UploadRecordBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<UploadRecord>>("调用数据上传记录业务逻辑:通过查询Model分页查询实体(数据上传记录)失败", ex);
            }  
		}

		#endregion 数据上传记录 
		   
		#region 系统用户

		/// <summary>
        /// 获取实体系统用户
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public User GetUser(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UserBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<User>("调用系统用户业务逻辑:根据编号获取实体(系统用户)失败", ex);
            }
		} 

        /// <summary>
        /// 统计系统用户
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountUser(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UserBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用系统用户业务逻辑:统计所有(系统用户)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加系统用户
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddUser(User value,out string msg)
		{
			try
            {
                return HandlerFactory.UserBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用系统用户业务逻辑:添加实体(系统用户)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除系统用户
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteUser(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.UserBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用系统用户业务逻辑:删除实体(系统用户)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存系统用户
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveUser(User value, out string msg)
		{
			try
            {
                return HandlerFactory.UserBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用系统用户业务逻辑:保存实体(系统用户)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录系统用户
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<User> AllUsers(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UserBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用系统用户业务逻辑:获取所有实体(系统用户)失败";
                return this.HandleException<List<User>>(message, ex);
            }
		}

		 
        public List<User> QueryUsers(string account,string pwd,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool enabled,bool queryenabled,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<User>(); 
                if(!string.IsNullOrEmpty(account)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Account, account);
                }
                if(!string.IsNullOrEmpty(pwd)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pwd, pwd);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.UserBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用系统用户业务逻辑:查询实体(系统用户)失败";
                return this.HandleException<List<User>>(msg, ex);
            }
        } 
		
		 
        public List<User> QueryPagedUsers(string account,string pwd,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,bool enabled,bool queryenabled,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<User>();
                var queryBuilder = QueryBuilder.Create<User>(); 
                if(!string.IsNullOrEmpty(account)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Account, account);
                }
                if(!string.IsNullOrEmpty(pwd)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pwd, pwd);
                }
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}

                return HandlerFactory.UserBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<User>>("调用系统用户业务逻辑:查询实体(系统用户)失败", ex);
            }
        } 
 
        public List<User> SearchUsersByQueryModel(QueryUserModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<User>();
                var queryBuilder = QueryBuilder.Create<User>(); 
                if(!string.IsNullOrEmpty(qModel.Account)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Account, qModel.Account);
                }
                if(!string.IsNullOrEmpty(qModel.Pwd)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pwd, qModel.Pwd);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.EmployeeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.EmployeeId, qModel.EmployeeId);
                }

                return HandlerFactory.UserBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用系统用户业务逻辑:通查询Model查询实体(系统用户)失败";
                return this.HandleException<List<User>>(message, ex);
            }  
		} 

		 
        public List<User> SearchPagedUsersByQueryModel(QueryUserModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<User>();
                var queryBuilder = QueryBuilder.Create<User>(); 
                if(!string.IsNullOrEmpty(qModel.Account)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Account, qModel.Account);
                }
                if(!string.IsNullOrEmpty(qModel.Pwd)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Pwd, qModel.Pwd);
                }
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.EmployeeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.EmployeeId, qModel.EmployeeId);
                }

                return HandlerFactory.UserBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<User>>("调用系统用户业务逻辑:通过查询Model分页查询实体(系统用户)失败", ex);
            }  
		}

		#endregion 系统用户 
		   
		#region 用户日志

		/// <summary>
        /// 获取实体用户日志
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public UserLog GetUserLog(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UserLogBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<UserLog>("调用用户日志业务逻辑:根据编号获取实体(用户日志)失败", ex);
            }
		} 

        /// <summary>
        /// 统计用户日志
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountUserLog(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UserLogBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用用户日志业务逻辑:统计所有(用户日志)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加用户日志
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddUserLog(UserLog value,out string msg)
		{
			try
            {
                return HandlerFactory.UserLogBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用用户日志业务逻辑:添加实体(用户日志)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除用户日志
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteUserLog(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.UserLogBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用用户日志业务逻辑:删除实体(用户日志)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存用户日志
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveUserLog(UserLog value, out string msg)
		{
			try
            {
                return HandlerFactory.UserLogBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用用户日志业务逻辑:保存实体(用户日志)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录用户日志
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<UserLog> AllUserLogs(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.UserLogBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用用户日志业务逻辑:获取所有实体(用户日志)失败";
                return this.HandleException<List<UserLog>>(message, ex);
            }
		}

		 
        public List<UserLog> QueryUserLogs(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string content,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<UserLog>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(content)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Content, content);
                }

                return HandlerFactory.UserLogBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用用户日志业务逻辑:查询实体(用户日志)失败";
                return this.HandleException<List<UserLog>>(msg, ex);
            }
        } 
		
		 
        public List<UserLog> QueryPagedUserLogs(DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string content,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<UserLog>();
                var queryBuilder = QueryBuilder.Create<UserLog>(); 
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(content)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Content, content);
                }

                return HandlerFactory.UserLogBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<UserLog>>("调用用户日志业务逻辑:查询实体(用户日志)失败", ex);
            }
        } 
 
        public List<UserLog> SearchUserLogsByQueryModel(QueryUserLogModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<UserLog>();
                var queryBuilder = QueryBuilder.Create<UserLog>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Content)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Content, qModel.Content);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.UserLogBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用用户日志业务逻辑:通查询Model查询实体(用户日志)失败";
                return this.HandleException<List<UserLog>>(message, ex);
            }  
		} 

		 
        public List<UserLog> SearchPagedUserLogsByQueryModel(QueryUserLogModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<UserLog>();
                var queryBuilder = QueryBuilder.Create<UserLog>(); 
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.Content)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Content, qModel.Content);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.UserLogBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<UserLog>>("调用用户日志业务逻辑:通过查询Model分页查询实体(用户日志)失败", ex);
            }  
		}

		#endregion 用户日志 
		   
		#region 车辆

		/// <summary>
        /// 获取实体车辆
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Vehicle GetVehicle(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.VehicleBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Vehicle>("调用车辆业务逻辑:根据编号获取实体(车辆)失败", ex);
            }
		} 

        /// <summary>
        /// 统计车辆
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountVehicle(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.VehicleBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用车辆业务逻辑:统计所有(车辆)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加车辆
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddVehicle(Vehicle value,out string msg)
		{
			try
            {
                return HandlerFactory.VehicleBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用车辆业务逻辑:添加实体(车辆)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除车辆
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteVehicle(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.VehicleBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用车辆业务逻辑:删除实体(车辆)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存车辆
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveVehicle(Vehicle value, out string msg)
		{
			try
            {
                return HandlerFactory.VehicleBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用车辆业务逻辑:保存实体(车辆)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录车辆
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Vehicle> AllVehicles(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.VehicleBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用车辆业务逻辑:获取所有实体(车辆)失败";
                return this.HandleException<List<Vehicle>>(message, ex);
            }
		}

		 
        public List<Vehicle> QueryVehicles(string type,int vehiclecategoryvaluefrom,int vehiclecategoryvalueto,string cubage,string licenseplate,string rule,string other,string driver,bool status,bool querystatus,bool isoutcheck,bool queryisoutcheck,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Vehicle>(); 
                if(!string.IsNullOrEmpty(type)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Type, type);
                }
                if(vehiclecategoryvalueto==vehiclecategoryvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.VehicleCategoryValue, vehiclecategoryvaluefrom);
                }
                else if(vehiclecategoryvalueto>vehiclecategoryvaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.VehicleCategoryValue, vehiclecategoryvaluefrom,vehiclecategoryvalueto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(cubage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Cubage, cubage);
                }
                if(!string.IsNullOrEmpty(licenseplate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePlate, licenseplate);
                }
                if(!string.IsNullOrEmpty(rule)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rule, rule);
                }
                if(!string.IsNullOrEmpty(other)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Other, other);
                }
                if(!string.IsNullOrEmpty(driver)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Driver, driver);
                }
                if(querystatus){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Status, status);
}
                if(queryisoutcheck){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutCheck, isoutcheck);
}

                return HandlerFactory.VehicleBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用车辆业务逻辑:查询实体(车辆)失败";
                return this.HandleException<List<Vehicle>>(msg, ex);
            }
        } 
		
		 
        public List<Vehicle> QueryPagedVehicles(string type,int vehiclecategoryvaluefrom,int vehiclecategoryvalueto,string cubage,string licenseplate,string rule,string other,string driver,bool status,bool querystatus,bool isoutcheck,bool queryisoutcheck,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Vehicle>();
                var queryBuilder = QueryBuilder.Create<Vehicle>(); 
                if(!string.IsNullOrEmpty(type)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Type, type);
                }
                if(vehiclecategoryvalueto==vehiclecategoryvaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.VehicleCategoryValue, vehiclecategoryvaluefrom);
                }
                else if(vehiclecategoryvalueto>vehiclecategoryvaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.VehicleCategoryValue, vehiclecategoryvaluefrom,vehiclecategoryvalueto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(cubage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Cubage, cubage);
                }
                if(!string.IsNullOrEmpty(licenseplate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePlate, licenseplate);
                }
                if(!string.IsNullOrEmpty(rule)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rule, rule);
                }
                if(!string.IsNullOrEmpty(other)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Other, other);
                }
                if(!string.IsNullOrEmpty(driver)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Driver, driver);
                }
                if(querystatus){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Status, status);
}
                if(queryisoutcheck){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutCheck, isoutcheck);
}

                return HandlerFactory.VehicleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Vehicle>>("调用车辆业务逻辑:查询实体(车辆)失败", ex);
            }
        } 
 
        public List<Vehicle> SearchVehiclesByQueryModel(QueryVehicleModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Vehicle>();
                var queryBuilder = QueryBuilder.Create<Vehicle>(); 
                if(!string.IsNullOrEmpty(qModel.Type)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Type, qModel.Type);
                }
                if(qModel.VehicleCategoryValueTo==qModel.VehicleCategoryValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.VehicleCategoryValue, qModel.VehicleCategoryValueFrom);
                }
                else if(qModel.VehicleCategoryValueTo>qModel.VehicleCategoryValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.VehicleCategoryValue, qModel.VehicleCategoryValueFrom,qModel.VehicleCategoryValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Cubage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Cubage, qModel.Cubage);
                }
                if(!string.IsNullOrEmpty(qModel.LicensePlate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePlate, qModel.LicensePlate);
                }
                if(!string.IsNullOrEmpty(qModel.Rule)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rule, qModel.Rule);
                }
                if(!string.IsNullOrEmpty(qModel.Other)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Other, qModel.Other);
                }
                if(!string.IsNullOrEmpty(qModel.Driver)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Driver, qModel.Driver);
                }
                if(qModel.QueryStatus){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Status, qModel.Status);
}
                if(qModel.QueryIsOutCheck){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutCheck, qModel.IsOutCheck);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.VehicleBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用车辆业务逻辑:通查询Model查询实体(车辆)失败";
                return this.HandleException<List<Vehicle>>(message, ex);
            }  
		} 

		 
        public List<Vehicle> SearchPagedVehiclesByQueryModel(QueryVehicleModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Vehicle>();
                var queryBuilder = QueryBuilder.Create<Vehicle>(); 
                if(!string.IsNullOrEmpty(qModel.Type)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Type, qModel.Type);
                }
                if(qModel.VehicleCategoryValueTo==qModel.VehicleCategoryValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.VehicleCategoryValue, qModel.VehicleCategoryValueFrom);
                }
                else if(qModel.VehicleCategoryValueTo>qModel.VehicleCategoryValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.VehicleCategoryValue, qModel.VehicleCategoryValueFrom,qModel.VehicleCategoryValueTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.Cubage)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Cubage, qModel.Cubage);
                }
                if(!string.IsNullOrEmpty(qModel.LicensePlate)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.LicensePlate, qModel.LicensePlate);
                }
                if(!string.IsNullOrEmpty(qModel.Rule)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Rule, qModel.Rule);
                }
                if(!string.IsNullOrEmpty(qModel.Other)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Other, qModel.Other);
                }
                if(!string.IsNullOrEmpty(qModel.Driver)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Driver, qModel.Driver);
                }
                if(qModel.QueryStatus){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Status, qModel.Status);
}
                if(qModel.QueryIsOutCheck){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.IsOutCheck, qModel.IsOutCheck);
}
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.VehicleBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Vehicle>>("调用车辆业务逻辑:通过查询Model分页查询实体(车辆)失败", ex);
            }  
		}

		#endregion 车辆 
		   
		#region 仓库

		/// <summary>
        /// 获取实体仓库
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public Warehouse GetWarehouse(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WarehouseBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<Warehouse>("调用仓库业务逻辑:根据编号获取实体(仓库)失败", ex);
            }
		} 

        /// <summary>
        /// 统计仓库
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountWarehouse(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WarehouseBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用仓库业务逻辑:统计所有(仓库)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加仓库
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddWarehouse(Warehouse value,out string msg)
		{
			try
            {
                return HandlerFactory.WarehouseBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用仓库业务逻辑:添加实体(仓库)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除仓库
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteWarehouse(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.WarehouseBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用仓库业务逻辑:删除实体(仓库)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存仓库
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveWarehouse(Warehouse value, out string msg)
		{
			try
            {
                return HandlerFactory.WarehouseBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用仓库业务逻辑:保存实体(仓库)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录仓库
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<Warehouse> AllWarehouses(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WarehouseBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用仓库业务逻辑:获取所有实体(仓库)失败";
                return this.HandleException<List<Warehouse>>(message, ex);
            }
		}

		 
        public List<Warehouse> QueryWarehouses(string name,string code,string mnemoniccode,string address,string managementcompany,string phone,string rentcompany,string rentyear,string area,string shadearea,string normalarea,string coldarea,string ypfzarea,string yhyssarea,string phcarea,string tyzqarea,string dwarea,string decription,bool enabled,bool queryenabled,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<Warehouse>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(mnemoniccode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, mnemoniccode);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(managementcompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManagementCompany, managementcompany);
                }
                if(!string.IsNullOrEmpty(phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, phone);
                }
                //if(!string.IsNullOrEmpty(rentcompany)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentCompany, rentcompany);
                //}
                //if(!string.IsNullOrEmpty(rentyear)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentYear, rentyear);
                //}
                if(!string.IsNullOrEmpty(area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, area);
                }
                if(!string.IsNullOrEmpty(shadearea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShadeArea, shadearea);
                }
                if(!string.IsNullOrEmpty(normalarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NormalArea, normalarea);
                }
                if(!string.IsNullOrEmpty(coldarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ColdArea, coldarea);
                }
                if(!string.IsNullOrEmpty(ypfzarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YPFZArea, ypfzarea);
                }
                if(!string.IsNullOrEmpty(yhyssarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YHYSSArea, yhyssarea);
                }
                if(!string.IsNullOrEmpty(phcarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PHCArea, phcarea);
                }
                if(!string.IsNullOrEmpty(tyzqarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TYZQArea, tyzqarea);
                }
                if(!string.IsNullOrEmpty(dwarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DWArea, dwarea);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件

                return HandlerFactory.WarehouseBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用仓库业务逻辑:查询实体(仓库)失败";
                return this.HandleException<List<Warehouse>>(msg, ex);
            }
        } 
		
		 
        public List<Warehouse> QueryPagedWarehouses(string name,string code,string mnemoniccode,string address,string managementcompany,string phone,string rentcompany,string rentyear,string area,string shadearea,string normalarea,string coldarea,string ypfzarea,string yhyssarea,string phcarea,string tyzqarea,string dwarea,string decription,bool enabled,bool queryenabled,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Warehouse>();
                var queryBuilder = QueryBuilder.Create<Warehouse>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(mnemoniccode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, mnemoniccode);
                }
                if(!string.IsNullOrEmpty(address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, address);
                }
                if(!string.IsNullOrEmpty(managementcompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManagementCompany, managementcompany);
                }
                if(!string.IsNullOrEmpty(phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, phone);
                }
                //if(!string.IsNullOrEmpty(rentcompany)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentCompany, rentcompany);
                //}
                //if(!string.IsNullOrEmpty(rentyear)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentYear, rentyear);
                //}
                if(!string.IsNullOrEmpty(area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, area);
                }
                if(!string.IsNullOrEmpty(shadearea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShadeArea, shadearea);
                }
                if(!string.IsNullOrEmpty(normalarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NormalArea, normalarea);
                }
                if(!string.IsNullOrEmpty(coldarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ColdArea, coldarea);
                }
                if(!string.IsNullOrEmpty(ypfzarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YPFZArea, ypfzarea);
                }
                if(!string.IsNullOrEmpty(yhyssarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YHYSSArea, yhyssarea);
                }
                if(!string.IsNullOrEmpty(phcarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PHCArea, phcarea);
                }
                if(!string.IsNullOrEmpty(tyzqarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TYZQArea, tyzqarea);
                }
                if(!string.IsNullOrEmpty(dwarea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DWArea, dwarea);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件

                return HandlerFactory.WarehouseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<Warehouse>>("调用仓库业务逻辑:查询实体(仓库)失败", ex);
            }
        } 
 
        public List<Warehouse> SearchWarehousesByQueryModel(QueryWarehouseModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<Warehouse>();
                var queryBuilder = QueryBuilder.Create<Warehouse>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.MnemonicCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, qModel.MnemonicCode);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.ManagementCompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManagementCompany, qModel.ManagementCompany);
                }
                if(!string.IsNullOrEmpty(qModel.Phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, qModel.Phone);
                }
                //if(!string.IsNullOrEmpty(qModel.RentCompany)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentCompany, qModel.RentCompany);
                //}
                //if(!string.IsNullOrEmpty(qModel.RentYear)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentYear, qModel.RentYear);
                //}
                if(!string.IsNullOrEmpty(qModel.Area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, qModel.Area);
                }
                if(!string.IsNullOrEmpty(qModel.ShadeArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShadeArea, qModel.ShadeArea);
                }
                if(!string.IsNullOrEmpty(qModel.NormalArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NormalArea, qModel.NormalArea);
                }
                if(!string.IsNullOrEmpty(qModel.ColdArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ColdArea, qModel.ColdArea);
                }
                if(!string.IsNullOrEmpty(qModel.YPFZArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YPFZArea, qModel.YPFZArea);
                }
                if(!string.IsNullOrEmpty(qModel.YHYSSArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YHYSSArea, qModel.YHYSSArea);
                }
                if(!string.IsNullOrEmpty(qModel.PHCArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PHCArea, qModel.PHCArea);
                }
                if(!string.IsNullOrEmpty(qModel.TYZQArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TYZQArea, qModel.TYZQArea);
                }
                if(!string.IsNullOrEmpty(qModel.DWArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DWArea, qModel.DWArea);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.WarehouseBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用仓库业务逻辑:通查询Model查询实体(仓库)失败";
                return this.HandleException<List<Warehouse>>(message, ex);
            }  
		} 

		 
        public List<Warehouse> SearchPagedWarehousesByQueryModel(QueryWarehouseModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<Warehouse>();
                var queryBuilder = QueryBuilder.Create<Warehouse>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.MnemonicCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, qModel.MnemonicCode);
                }
                if(!string.IsNullOrEmpty(qModel.Address)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if(!string.IsNullOrEmpty(qModel.ManagementCompany)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ManagementCompany, qModel.ManagementCompany);
                }
                if(!string.IsNullOrEmpty(qModel.Phone)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Phone, qModel.Phone);
                }
                //if(!string.IsNullOrEmpty(qModel.RentCompany)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentCompany, qModel.RentCompany);
                //}
                //if(!string.IsNullOrEmpty(qModel.RentYear)){//非null且非empty参与like条件
                //    queryBuilder.Like(a => a.RentYear, qModel.RentYear);
                //}
                if(!string.IsNullOrEmpty(qModel.Area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, qModel.Area);
                }
                if(!string.IsNullOrEmpty(qModel.ShadeArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ShadeArea, qModel.ShadeArea);
                }
                if(!string.IsNullOrEmpty(qModel.NormalArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.NormalArea, qModel.NormalArea);
                }
                if(!string.IsNullOrEmpty(qModel.ColdArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.ColdArea, qModel.ColdArea);
                }
                if(!string.IsNullOrEmpty(qModel.YPFZArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YPFZArea, qModel.YPFZArea);
                }
                if(!string.IsNullOrEmpty(qModel.YHYSSArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.YHYSSArea, qModel.YHYSSArea);
                }
                if(!string.IsNullOrEmpty(qModel.PHCArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.PHCArea, qModel.PHCArea);
                }
                if(!string.IsNullOrEmpty(qModel.TYZQArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.TYZQArea, qModel.TYZQArea);
                }
                if(!string.IsNullOrEmpty(qModel.DWArea)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DWArea, qModel.DWArea);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.WarehouseBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<Warehouse>>("调用仓库业务逻辑:通过查询Model分页查询实体(仓库)失败", ex);
            }  
		}

		#endregion 仓库 
		   
		#region 库区

		/// <summary>
        /// 获取实体库区
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public WarehouseZone GetWarehouseZone(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WarehouseZoneBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<WarehouseZone>("调用库区业务逻辑:根据编号获取实体(库区)失败", ex);
            }
		} 

        /// <summary>
        /// 统计库区
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountWarehouseZone(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WarehouseZoneBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用库区业务逻辑:统计所有(库区)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加库区
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddWarehouseZone(WarehouseZone value,out string msg)
		{
			try
            {
                return HandlerFactory.WarehouseZoneBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库区业务逻辑:添加实体(库区)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除库区
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteWarehouseZone(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.WarehouseZoneBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库区业务逻辑:删除实体(库区)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存库区
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveWarehouseZone(WarehouseZone value, out string msg)
		{
			try
            {
                return HandlerFactory.WarehouseZoneBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用库区业务逻辑:保存实体(库区)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录库区
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<WarehouseZone> AllWarehouseZones(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WarehouseZoneBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用库区业务逻辑:获取所有实体(库区)失败";
                return this.HandleException<List<WarehouseZone>>(message, ex);
            }
		}

		 
        public List<WarehouseZone> QueryWarehouseZones(string name,string decription,string code,string mnemoniccode,string area,bool enabled,bool queryenabled,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int warehousezonetypevaluefrom,int warehousezonetypevalueto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<WarehouseZone>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(mnemoniccode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, mnemoniccode);
                }
                if(!string.IsNullOrEmpty(area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, area);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(warehousezonetypevalueto==warehousezonetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.WarehouseZoneTypeValue, warehousezonetypevaluefrom);
                }
                else if(warehousezonetypevalueto>warehousezonetypevaluefrom){//From<To执行Between
                    queryBuilder.Between(a => a.WarehouseZoneTypeValue, warehousezonetypevaluefrom,warehousezonetypevalueto);
                }//From>To不参与条件

                return HandlerFactory.WarehouseZoneBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用库区业务逻辑:查询实体(库区)失败";
                return this.HandleException<List<WarehouseZone>>(msg, ex);
            }
        } 
		
		 
        public List<WarehouseZone> QueryPagedWarehouseZones(string name,string decription,string code,string mnemoniccode,string area,bool enabled,bool queryenabled,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,int warehousezonetypevaluefrom,int warehousezonetypevalueto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<WarehouseZone>();
                var queryBuilder = QueryBuilder.Create<WarehouseZone>(); 
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, decription);
                }
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(mnemoniccode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, mnemoniccode);
                }
                if(!string.IsNullOrEmpty(area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, area);
                }
                if(queryenabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, enabled);
}
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(warehousezonetypevalueto==warehousezonetypevaluefrom){//From==To执行==
                    queryBuilder.Equals(a => a.WarehouseZoneTypeValue, warehousezonetypevaluefrom);
                }
                else if(warehousezonetypevalueto>warehousezonetypevaluefrom){//From>To执行Between
                    queryBuilder.Between(a => a.WarehouseZoneTypeValue, warehousezonetypevaluefrom,warehousezonetypevalueto);
                }//From<To不参与条件

                return HandlerFactory.WarehouseZoneBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<WarehouseZone>>("调用库区业务逻辑:查询实体(库区)失败", ex);
            }
        } 
 
        public List<WarehouseZone> SearchWarehouseZonesByQueryModel(QueryWarehouseZoneModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<WarehouseZone>();
                var queryBuilder = QueryBuilder.Create<WarehouseZone>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.MnemonicCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, qModel.MnemonicCode);
                }
                if(!string.IsNullOrEmpty(qModel.Area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, qModel.Area);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.WarehouseZoneTypeValueTo==qModel.WarehouseZoneTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.WarehouseZoneTypeValue, qModel.WarehouseZoneTypeValueFrom);
                }
                else if(qModel.WarehouseZoneTypeValueTo>qModel.WarehouseZoneTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.WarehouseZoneTypeValue, qModel.WarehouseZoneTypeValueFrom,qModel.WarehouseZoneTypeValueTo);
                }//From>To不参与条件
                if(qModel.WarehouseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.WarehouseId, qModel.WarehouseId);
                }
                if(qModel.DictionaryStorageTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DictionaryStorageTypeId, qModel.DictionaryStorageTypeId);
                }
                if(qModel.DictionaryMeasurementUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DictionaryMeasurementUnitId, qModel.DictionaryMeasurementUnitId);
                }

                return HandlerFactory.WarehouseZoneBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用库区业务逻辑:通查询Model查询实体(库区)失败";
                return this.HandleException<List<WarehouseZone>>(message, ex);
            }  
		} 

		 
        public List<WarehouseZone> SearchPagedWarehouseZonesByQueryModel(QueryWarehouseZoneModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<WarehouseZone>();
                var queryBuilder = QueryBuilder.Create<WarehouseZone>(); 
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.Decription)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Decription, qModel.Decription);
                }
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.MnemonicCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MnemonicCode, qModel.MnemonicCode);
                }
                if(!string.IsNullOrEmpty(qModel.Area)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Area, qModel.Area);
                }
                if(qModel.QueryEnabled){//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
}
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.WarehouseZoneTypeValueTo==qModel.WarehouseZoneTypeValueFrom){//From==To执行==
                    queryBuilder.Equals(a => a.WarehouseZoneTypeValue, qModel.WarehouseZoneTypeValueFrom);
                }
                else if(qModel.WarehouseZoneTypeValueTo>qModel.WarehouseZoneTypeValueFrom){//From<To执行Between
                    queryBuilder.Between(a => a.WarehouseZoneTypeValue, qModel.WarehouseZoneTypeValueFrom,qModel.WarehouseZoneTypeValueTo);
                }//From>To不参与条件
                if(qModel.WarehouseId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.WarehouseId, qModel.WarehouseId);
                }
                if(qModel.DictionaryStorageTypeId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DictionaryStorageTypeId, qModel.DictionaryStorageTypeId);
                }
                if(qModel.DictionaryMeasurementUnitId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DictionaryMeasurementUnitId, qModel.DictionaryMeasurementUnitId);
                }

                return HandlerFactory.WarehouseZoneBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<WarehouseZone>>("调用库区业务逻辑:通过查询Model分页查询实体(库区)失败", ex);
            }  
		}

		#endregion 库区 
		   
		#region 报警设置

		/// <summary>
        /// 获取实体报警设置
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public WaringSet GetWaringSet(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WaringSetBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<WaringSet>("调用报警设置业务逻辑:根据编号获取实体(报警设置)失败", ex);
            }
		} 

        /// <summary>
        /// 统计报警设置
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountWaringSet(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WaringSetBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用报警设置业务逻辑:统计所有(报警设置)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加报警设置
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddWaringSet(WaringSet value,out string msg)
		{
			try
            {
                return HandlerFactory.WaringSetBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用报警设置业务逻辑:添加实体(报警设置)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除报警设置
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteWaringSet(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.WaringSetBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用报警设置业务逻辑:删除实体(报警设置)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存报警设置
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveWaringSet(WaringSet value, out string msg)
		{
			try
            {
                return HandlerFactory.WaringSetBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用报警设置业务逻辑:保存实体(报警设置)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录报警设置
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<WaringSet> AllWaringSets(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.WaringSetBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用报警设置业务逻辑:获取所有实体(报警设置)失败";
                return this.HandleException<List<WaringSet>>(message, ex);
            }
		}

		 
        public List<WaringSet> QueryWaringSets(string code,string name,string setvalue,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<WaringSet>(); 
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(setvalue)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SetValue, setvalue);
                }

                return HandlerFactory.WaringSetBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用报警设置业务逻辑:查询实体(报警设置)失败";
                return this.HandleException<List<WaringSet>>(msg, ex);
            }
        } 
		
		 
        public List<WaringSet> QueryPagedWaringSets(string code,string name,string setvalue,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<WaringSet>();
                var queryBuilder = QueryBuilder.Create<WaringSet>(); 
                if(!string.IsNullOrEmpty(code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, code);
                }
                if(!string.IsNullOrEmpty(name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, name);
                }
                if(!string.IsNullOrEmpty(setvalue)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SetValue, setvalue);
                }

                return HandlerFactory.WaringSetBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<WaringSet>>("调用报警设置业务逻辑:查询实体(报警设置)失败", ex);
            }
        } 
 
        public List<WaringSet> SearchWaringSetsByQueryModel(QueryWaringSetModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<WaringSet>();
                var queryBuilder = QueryBuilder.Create<WaringSet>(); 
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.SetValue)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SetValue, qModel.SetValue);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.WaringSetBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用报警设置业务逻辑:通查询Model查询实体(报警设置)失败";
                return this.HandleException<List<WaringSet>>(message, ex);
            }  
		} 

		 
        public List<WaringSet> SearchPagedWaringSetsByQueryModel(QueryWaringSetModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<WaringSet>();
                var queryBuilder = QueryBuilder.Create<WaringSet>(); 
                if(!string.IsNullOrEmpty(qModel.Code)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Code, qModel.Code);
                }
                if(!string.IsNullOrEmpty(qModel.Name)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if(!string.IsNullOrEmpty(qModel.SetValue)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SetValue, qModel.SetValue);
                }
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.WaringSetBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<WaringSet>>("调用报警设置业务逻辑:通过查询Model分页查询实体(报警设置)失败", ex);
            }  
		}

		#endregion 报警设置 
		   
		#region 销售出库单

		/// <summary>
        /// 获取实体销售出库单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        public OutInventoryDetail GetOutInventoryDetail(Guid id,out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.OutInventoryDetailBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
			    return this.HandleException<OutInventoryDetail>("调用销售出库单业务逻辑:根据编号获取实体(销售出库单)失败", ex);
            }
		} 

        /// <summary>
        /// 统计销售出库单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public int CountOutInventoryDetail(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.OutInventoryDetailBusinessHandler.Count();
            }
            catch (Exception ex)
            {
                message = "调用销售出库单业务逻辑:统计所有(销售出库单)数量失败";
                return this.HandleException<int>(message, ex);
            }
		} 

		/// <summary>
        /// 添加销售出库单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddOutInventoryDetail(OutInventoryDetail value,out string msg)
		{
			try
            {
                return HandlerFactory.OutInventoryDetailBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售出库单业务逻辑:添加实体(销售出库单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 删除销售出库单
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteOutInventoryDetail(Guid id, out string msg)
		{
			try
            {
                return HandlerFactory.OutInventoryDetailBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售出库单业务逻辑:删除实体(销售出库单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

        /// <summary>
        /// 保存销售出库单
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveOutInventoryDetail(OutInventoryDetail value, out string msg)
		{
			try
            {
                return HandlerFactory.OutInventoryDetailBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用销售出库单业务逻辑:保存实体(销售出库单)失败";
                return this.HandleException<bool>(msg, ex);
            }
		}

		 /// <summary>
        /// 所有记录销售出库单
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<OutInventoryDetail> AllOutInventoryDetails(out string message)
		{
			message = string.Empty;
            try
            {
                return HandlerFactory.OutInventoryDetailBusinessHandler.Queryable
				// .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用销售出库单业务逻辑:获取所有实体(销售出库单)失败";
                return this.HandleException<List<OutInventoryDetail>>(message, ex);
            }
		}

		 
        public List<OutInventoryDetail> QueryOutInventoryDetails(int indexfrom,int indexto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string productname,string productcode,string dictionarydosagecode,string origin,string batchnumber,int amountfrom,int amountto,decimal unitpricefrom,decimal unitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal pricefrom,decimal priceto,string measurementunit,string specificationcode,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,int outamountfrom,int outamountto,string warehousecode,string warehousename,string warehousezonecode,string warehousezonename,int cansalenumfrom,int cansalenumto,out string msg)
        {   msg=string.Empty;
            try
            {
                var queryBuilder = QueryBuilder.Create<OutInventoryDetail>(); 
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From>To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From>To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From>To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From>To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From>To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From>To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From>To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(outamountto==outamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, outamountfrom);
                }
                else if(outamountto>outamountfrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutAmount, outamountfrom,outamountto);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(warehousecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseCode, warehousecode);
                }
                if(!string.IsNullOrEmpty(warehousename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseName, warehousename);
                }
                if(!string.IsNullOrEmpty(warehousezonecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneCode, warehousezonecode);
                }
                if(!string.IsNullOrEmpty(warehousezonename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneName, warehousezonename);
                }
                if(cansalenumto==cansalenumfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, cansalenumfrom);
                }
                else if(cansalenumto>cansalenumfrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, cansalenumfrom,cansalenumto);
                }//From>To不参与条件

                return HandlerFactory.OutInventoryDetailBusinessHandler.Fetch(queryBuilder.Expression).ToList();
            }
            catch(Exception ex)
            {
                msg = "调用销售出库单业务逻辑:查询实体(销售出库单)失败";
                return this.HandleException<List<OutInventoryDetail>>(msg, ex);
            }
        } 
		
		 
        public List<OutInventoryDetail> QueryPagedOutInventoryDetails(int indexfrom,int indexto,DateTime createtimefrom,DateTime createtimeto,DateTime updatetimefrom,DateTime updatetimeto,string productname,string productcode,string dictionarydosagecode,string origin,string batchnumber,int amountfrom,int amountto,decimal unitpricefrom,decimal unitpriceto,decimal actualunitpricefrom,decimal actualunitpriceto,decimal pricefrom,decimal priceto,string measurementunit,string specificationcode,DateTime pruductdatefrom,DateTime pruductdateto,DateTime outvaliddatefrom,DateTime outvaliddateto,string factoryname,string description,int outamountfrom,int outamountto,string warehousecode,string warehousename,string warehousezonecode,string warehousezonename,int cansalenumfrom,int cansalenumto,int index,int size,out PagerInfo pager)
        {   
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<OutInventoryDetail>();
                var queryBuilder = QueryBuilder.Create<OutInventoryDetail>(); 
                if(indexto==indexfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, indexfrom);
                }
                else if(indexto>indexfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Index, indexfrom,indexto);
                }//From<To不参与条件
                if(createtimeto!=default(DateTime)&&createtimefrom!=default(DateTime)){//From==To执行==
                if(createtimeto==createtimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, createtimefrom);
                }
                else if(createtimeto>createtimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.CreateTime, createtimefrom,createtimeto);
                }}//From<To不参与条件
                if(updatetimeto!=default(DateTime)&&updatetimefrom!=default(DateTime)){//From==To执行==
                if(updatetimeto==updatetimefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
                }
                else if(updatetimeto>updatetimefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UpdateTime, updatetimefrom,updatetimeto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(productname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, productname);
                }
                if(!string.IsNullOrEmpty(productcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, productcode);
                }
                if(!string.IsNullOrEmpty(dictionarydosagecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, dictionarydosagecode);
                }
                if(!string.IsNullOrEmpty(origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, origin);
                }
                if(!string.IsNullOrEmpty(batchnumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, batchnumber);
                }
                if(amountto==amountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, amountfrom);
                }
                else if(amountto>amountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.Amount, amountfrom,amountto);
                }//From<To不参与条件
                if(unitpriceto==unitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, unitpricefrom);
                }
                else if(unitpriceto>unitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.UnitPrice, unitpricefrom,unitpriceto);
                }//From<To不参与条件
                if(actualunitpriceto==actualunitpricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, actualunitpricefrom);
                }
                else if(actualunitpriceto>actualunitpricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, actualunitpricefrom,actualunitpriceto);
                }//From<To不参与条件
                if(priceto==pricefrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, pricefrom);
                }
                else if(priceto>pricefrom){//From>To执行Between
                    queryBuilder.Between(a => a.Price, pricefrom,priceto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(measurementunit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, measurementunit);
                }
                if(!string.IsNullOrEmpty(specificationcode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, specificationcode);
                }
                if(pruductdateto!=default(DateTime)&&pruductdatefrom!=default(DateTime)){//From==To执行==
                if(pruductdateto==pruductdatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, pruductdatefrom);
                }
                else if(pruductdateto>pruductdatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.PruductDate, pruductdatefrom,pruductdateto);
                }}//From<To不参与条件
                if(outvaliddateto!=default(DateTime)&&outvaliddatefrom!=default(DateTime)){//From==To执行==
                if(outvaliddateto==outvaliddatefrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, outvaliddatefrom);
                }
                else if(outvaliddateto>outvaliddatefrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutValidDate, outvaliddatefrom,outvaliddateto);
                }}//From<To不参与条件
                if(!string.IsNullOrEmpty(factoryname)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, factoryname);
                }
                if(!string.IsNullOrEmpty(description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, description);
                }
                if(outamountto==outamountfrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, outamountfrom);
                }
                else if(outamountto>outamountfrom){//From>To执行Between
                    queryBuilder.Between(a => a.OutAmount, outamountfrom,outamountto);
                }//From<To不参与条件
                if(!string.IsNullOrEmpty(warehousecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseCode, warehousecode);
                }
                if(!string.IsNullOrEmpty(warehousename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseName, warehousename);
                }
                if(!string.IsNullOrEmpty(warehousezonecode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneCode, warehousezonecode);
                }
                if(!string.IsNullOrEmpty(warehousezonename)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneName, warehousezonename);
                }
                if(cansalenumto==cansalenumfrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, cansalenumfrom);
                }
                else if(cansalenumto>cansalenumfrom){//From>To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, cansalenumfrom,cansalenumto);
                }//From<To不参与条件

                return HandlerFactory.OutInventoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo();  
                return this.HandleException<List<OutInventoryDetail>>("调用销售出库单业务逻辑:查询实体(销售出库单)失败", ex);
            }
        } 
 
        public List<OutInventoryDetail> SearchOutInventoryDetailsByQueryModel(QueryOutInventoryDetailModel qModel,out string message)
		{
			 
            try
            {
                message=string.Empty;
                var order = EntityOrderDictionary.GetOrder<OutInventoryDetail>();
                var queryBuilder = QueryBuilder.Create<OutInventoryDetail>(); 
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.OutAmountTo==qModel.OutAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, qModel.OutAmountFrom);
                }
                else if(qModel.OutAmountTo>qModel.OutAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutAmount, qModel.OutAmountFrom,qModel.OutAmountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.WarehouseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseCode, qModel.WarehouseCode);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseName, qModel.WarehouseName);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseZoneCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneCode, qModel.WarehouseZoneCode);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseZoneName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneName, qModel.WarehouseZoneName);
                }
                if(qModel.CanSaleNumTo==qModel.CanSaleNumFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, qModel.CanSaleNumFrom);
                }
                else if(qModel.CanSaleNumTo>qModel.CanSaleNumFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, qModel.CanSaleNumFrom,qModel.CanSaleNumTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.SalesOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderId, qModel.SalesOrderId);
                }
                if(qModel.SalesOrderDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailId, qModel.SalesOrderDetailId);
                }
                if(qModel.SalesOrderReturnId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderReturnId, qModel.SalesOrderReturnId);
                }
                if(qModel.SalesOrderDetailReturnId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailReturnId, qModel.SalesOrderDetailReturnId);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }
                if(qModel.SalesOutInventoryID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOutInventoryID, qModel.SalesOutInventoryID);
                }

                return HandlerFactory.OutInventoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch(Exception ex)
            {  
                message="调用销售出库单业务逻辑:通查询Model查询实体(销售出库单)失败";
                return this.HandleException<List<OutInventoryDetail>>(message, ex);
            }  
		} 

		 
        public List<OutInventoryDetail> SearchPagedOutInventoryDetailsByQueryModel(QueryOutInventoryDetailModel qModel,int index,int size,out PagerInfo pager)
		{
			 
            pager = PagerInfo.Validate(new PagerInfo {Index = index, Size = size});
            try
            {
                var order = EntityOrderDictionary.GetOrder<OutInventoryDetail>();
                var queryBuilder = QueryBuilder.Create<OutInventoryDetail>(); 
                if(qModel.IndexTo==qModel.IndexFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Index, qModel.IndexFrom);
                }
                else if(qModel.IndexTo>qModel.IndexFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Index, qModel.IndexFrom,qModel.IndexTo);
                }//From>To不参与条件
                if(qModel.CreateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if(qModel.UpdateUserId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if(qModel.CreateTimeTo!=default(DateTime)&&qModel.CreateTimeFrom!=default(DateTime)){
                if(qModel.CreateTimeTo==qModel.CreateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                }
                else if(qModel.CreateTimeTo>qModel.CreateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom,qModel.CreateTimeTo);
                }//From>To不参与条件
                }
                if(qModel.UpdateTimeTo!=default(DateTime)&&qModel.UpdateTimeFrom!=default(DateTime)){
                if(qModel.UpdateTimeTo==qModel.UpdateTimeFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                }
                else if(qModel.UpdateTimeTo>qModel.UpdateTimeFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom,qModel.UpdateTimeTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.productName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productName, qModel.productName);
                }
                if(!string.IsNullOrEmpty(qModel.productCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.productCode, qModel.productCode);
                }
                if(!string.IsNullOrEmpty(qModel.DictionaryDosageCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.DictionaryDosageCode, qModel.DictionaryDosageCode);
                }
                if(!string.IsNullOrEmpty(qModel.Origin)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Origin, qModel.Origin);
                }
                if(!string.IsNullOrEmpty(qModel.BatchNumber)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.BatchNumber, qModel.BatchNumber);
                }
                if(qModel.AmountTo==qModel.AmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Amount, qModel.AmountFrom);
                }
                else if(qModel.AmountTo>qModel.AmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Amount, qModel.AmountFrom,qModel.AmountTo);
                }//From>To不参与条件
                if(qModel.UnitPriceTo==qModel.UnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.UnitPrice, qModel.UnitPriceFrom);
                }
                else if(qModel.UnitPriceTo>qModel.UnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.UnitPrice, qModel.UnitPriceFrom,qModel.UnitPriceTo);
                }//From>To不参与条件
                if(qModel.ActualUnitPriceTo==qModel.ActualUnitPriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom);
                }
                else if(qModel.ActualUnitPriceTo>qModel.ActualUnitPriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.ActualUnitPrice, qModel.ActualUnitPriceFrom,qModel.ActualUnitPriceTo);
                }//From>To不参与条件
                if(qModel.PriceTo==qModel.PriceFrom){//From==To执行==
                    queryBuilder.Equals(a => a.Price, qModel.PriceFrom);
                }
                else if(qModel.PriceTo>qModel.PriceFrom){//From<To执行Between
                    queryBuilder.Between(a => a.Price, qModel.PriceFrom,qModel.PriceTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.MeasurementUnit)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.MeasurementUnit, qModel.MeasurementUnit);
                }
                if(!string.IsNullOrEmpty(qModel.SpecificationCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.SpecificationCode, qModel.SpecificationCode);
                }
                if(qModel.PruductDateTo!=default(DateTime)&&qModel.PruductDateFrom!=default(DateTime)){
                if(qModel.PruductDateTo==qModel.PruductDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.PruductDate, qModel.PruductDateFrom);
                }
                else if(qModel.PruductDateTo>qModel.PruductDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.PruductDate, qModel.PruductDateFrom,qModel.PruductDateTo);
                }//From>To不参与条件
                }
                if(qModel.OutValidDateTo!=default(DateTime)&&qModel.OutValidDateFrom!=default(DateTime)){
                if(qModel.OutValidDateTo==qModel.OutValidDateFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutValidDate, qModel.OutValidDateFrom);
                }
                else if(qModel.OutValidDateTo>qModel.OutValidDateFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutValidDate, qModel.OutValidDateFrom,qModel.OutValidDateTo);
                }//From>To不参与条件
                }
                if(!string.IsNullOrEmpty(qModel.FactoryName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.FactoryName, qModel.FactoryName);
                }
                if(!string.IsNullOrEmpty(qModel.Description)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Description, qModel.Description);
                }
                if(qModel.OutAmountTo==qModel.OutAmountFrom){//From==To执行==
                    queryBuilder.Equals(a => a.OutAmount, qModel.OutAmountFrom);
                }
                else if(qModel.OutAmountTo>qModel.OutAmountFrom){//From<To执行Between
                    queryBuilder.Between(a => a.OutAmount, qModel.OutAmountFrom,qModel.OutAmountTo);
                }//From>To不参与条件
                if(!string.IsNullOrEmpty(qModel.WarehouseCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseCode, qModel.WarehouseCode);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseName, qModel.WarehouseName);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseZoneCode)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneCode, qModel.WarehouseZoneCode);
                }
                if(!string.IsNullOrEmpty(qModel.WarehouseZoneName)){//非null且非empty参与like条件
                    queryBuilder.Like(a => a.WarehouseZoneName, qModel.WarehouseZoneName);
                }
                if(qModel.CanSaleNumTo==qModel.CanSaleNumFrom){//From==To执行==
                    queryBuilder.Equals(a => a.CanSaleNum, qModel.CanSaleNumFrom);
                }
                else if(qModel.CanSaleNumTo>qModel.CanSaleNumFrom){//From<To执行Between
                    queryBuilder.Between(a => a.CanSaleNum, qModel.CanSaleNumFrom,qModel.CanSaleNumTo);
                }//From>To不参与条件
                if(qModel.StoreId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }
                if(qModel.SalesOrderId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderId, qModel.SalesOrderId);
                }
                if(qModel.SalesOrderDetailId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailId, qModel.SalesOrderDetailId);
                }
                if(qModel.SalesOrderReturnId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderReturnId, qModel.SalesOrderReturnId);
                }
                if(qModel.SalesOrderDetailReturnId!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOrderDetailReturnId, qModel.SalesOrderDetailReturnId);
                }
                if(qModel.DrugInventoryRecordID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.DrugInventoryRecordID, qModel.DrugInventoryRecordID);
                }
                if(qModel.SalesOutInventoryID!=default(Guid)){//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.SalesOutInventoryID, qModel.SalesOutInventoryID);
                }

                return HandlerFactory.OutInventoryDetailBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
            }
            catch(Exception ex)
            {
                pager=new PagerInfo(); 
                return this.HandleException<List<OutInventoryDetail>>("调用销售出库单业务逻辑:通过查询Model分页查询实体(销售出库单)失败", ex);
            }  
		}

		#endregion 销售出库单 

        #region 首映供货个人

        /// <summary>
        /// 所有记录购货单位提货人员
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns> 
        public List<SupplyPerson> AllSupplyPersons(out string message)
        {
            message = string.Empty;
            try
            {
                return HandlerFactory.SupplyPersonBusinessHandler.Queryable
                    // .Where(t=>!t.Deleted)
                              .ToList();
            }
            catch (Exception ex)
            {
                message = "调用购货单位提货人员业务逻辑:获取所有实体(购货单位提货人员)失败";
                return this.HandleException<List<SupplyPerson>>(message, ex);
            }
        }

        public List<SupplyPerson> SearchSupplyPersonsByQueryModel(QuerySupplyPersonModel qModel, out string message)
        {

            try
            {
                message = string.Empty;
                var order = EntityOrderDictionary.GetOrder<SupplyPerson>();
                var queryBuilder = QueryBuilder.Create<SupplyPerson>();
                if (!string.IsNullOrEmpty(qModel.Name))
                {//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Name, qModel.Name);
                }
                if (!string.IsNullOrEmpty(qModel.IDFile))
                {//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDFile, qModel.IDFile);
                }
                if (!string.IsNullOrEmpty(qModel.IDNumber))
                {//非null且非empty参与like条件
                    queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
                }
                if (!string.IsNullOrEmpty(qModel.Tel))
                {//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Tel, qModel.Tel);
                }
                if (!string.IsNullOrEmpty(qModel.Address))
                {//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Address, qModel.Address);
                }
                if (qModel.BirthdayTo != default(DateTime) && qModel.BirthdayFrom != default(DateTime))
                {
                    if (qModel.BirthdayTo == qModel.BirthdayFrom)
                    {//From==To执行==
                        queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
                    }
                    else if (qModel.BirthdayTo > qModel.BirthdayFrom)
                    {//From<To执行Between
                        queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom, qModel.BirthdayTo);
                    }//From>To不参与条件
                }
                if (!string.IsNullOrEmpty(qModel.Gender))
                {//非null且非empty参与like条件
                    queryBuilder.Like(a => a.Gender, qModel.Gender);
                }
                if (qModel.CreateUserId != default(Guid))
                {//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
                }
                if (qModel.UpdateUserId != default(Guid))
                {//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
                }
                if (qModel.CreateTimeTo != default(DateTime) && qModel.CreateTimeFrom != default(DateTime))
                {
                    if (qModel.CreateTimeTo == qModel.CreateTimeFrom)
                    {//From==To执行==
                        queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
                    }
                    else if (qModel.CreateTimeTo > qModel.CreateTimeFrom)
                    {//From<To执行Between
                        queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom, qModel.CreateTimeTo);
                    }//From>To不参与条件
                }
                if (qModel.UpdateTimeTo != default(DateTime) && qModel.UpdateTimeFrom != default(DateTime))
                {
                    if (qModel.UpdateTimeTo == qModel.UpdateTimeFrom)
                    {//From==To执行==
                        queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
                    }
                    else if (qModel.UpdateTimeTo > qModel.UpdateTimeFrom)
                    {//From<To执行Between
                        queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom, qModel.UpdateTimeTo);
                    }//From>To不参与条件
                }
                if (qModel.QueryValid)
                {//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Valid, qModel.Valid);
                }
                if (qModel.QueryEnabled)
                {//enabeQuery参与查询条件
                    queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
                }
                //if (qModel.PurchaseUnitId != default(Guid))
                //{//非null且非empty参与like条件
                //    queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
                //}
                if (qModel.StoreId != default(Guid))
                {//非null且非empty参与like条件
                    queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
                }

                return HandlerFactory.SupplyPersonBusinessHandler.Fetch(queryBuilder.Expression, order).ToList();
            }
            catch (Exception ex)
            {
                message = "调用购货单位提货人员业务逻辑:通查询Model查询实体(购货单位提货人员)失败";
                return this.HandleException<List<SupplyPerson>>(message, ex);
            }
        }

        /// <summary>
        /// 获取实体人首映供货个人
        /// </summary>
        /// <param name="id"></param>
        /// <param name="message"></param>
        /// <returns></returns> 
        /// 
        public SupplyPerson GetSupplyPerson(Guid id, out string message)
        {
            message = string.Empty;
            try
            {
                return HandlerFactory.SupplyPersonBusinessHandler.Get(id);
            }
            catch (Exception ex)
            {
                return this.HandleException<SupplyPerson>("调用购货单位提货人员业务逻辑:根据编号获取实体(购货单位提货人员)失败", ex);
            }
        }

        ///// <summary>
        ///// 统计购货单位提货人员
        ///// </summary>
        ///// <param name="message"></param>
        ///// <returns></returns> 
        //public int CountSupplyPerson(out string message)
        //{
        //    message = string.Empty;
        //    try
        //    {
        //        return HandlerFactory.SupplyPersonBusinessHandler.Count();
        //    }
        //    catch (Exception ex)
        //    {
        //        message = "调用购货单位提货人员业务逻辑:统计所有(购货单位提货人员)数量失败";
        //        return this.HandleException<int>(message, ex);
        //    }
        //}

        /// <summary>
        /// 添加购货单位提货人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool AddSupplyPerson(SupplyPerson value, out string msg)
        {
            try
            {
                return HandlerFactory.SupplyPersonBusinessHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:添加实体(购货单位提货人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
        }

        /// <summary>
        /// 删除购货单位提货人员
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool DeleteSupplyPerson(Guid id, out string msg)
        {
            try
            {
                return HandlerFactory.SupplyPersonBusinessHandler.Delete(id, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:删除实体(购货单位提货人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
        }

        /// <summary>
        /// 保存购货单位提货人员
        /// </summary>
        /// <param name="value"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool SaveSupplyPerson(SupplyPerson value, out string msg)
        {
            try
            {
                return HandlerFactory.SupplyPersonBusinessHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用购货单位提货人员业务逻辑:保存实体(购货单位提货人员)失败";
                return this.HandleException<bool>(msg, ex);
            }
        }




        //public List<SupplyPerson> QuerySupplyPersons(string name, string idfile, string idnumber, string tel, string address, DateTime birthdayfrom, DateTime birthdayto, string gender, DateTime createtimefrom, DateTime createtimeto, DateTime updatetimefrom, DateTime updatetimeto, bool valid, bool queryvalid, bool enabled, bool queryenabled, out string msg)
        //{
        //    msg = string.Empty;
        //    try
        //    {
        //        var queryBuilder = QueryBuilder.Create<SupplyPerson>();
        //        if (!string.IsNullOrEmpty(name))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Name, name);
        //        }
        //        if (!string.IsNullOrEmpty(idfile))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.IDFile, idfile);
        //        }
        //        if (!string.IsNullOrEmpty(idnumber))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.IDNumber, idnumber);
        //        }
        //        if (!string.IsNullOrEmpty(tel))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Tel, tel);
        //        }
        //        if (!string.IsNullOrEmpty(address))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Address, address);
        //        }
        //        if (birthdayto != default(DateTime) && birthdayfrom != default(DateTime))
        //        {//From==To执行==
        //            if (birthdayto == birthdayfrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.Birthday, birthdayfrom);
        //            }
        //            else if (birthdayto > birthdayfrom)
        //            {//From<To执行Between
        //                queryBuilder.Between(a => a.Birthday, birthdayfrom, birthdayto);
        //            }
        //        }//From>To不参与条件
        //        if (!string.IsNullOrEmpty(gender))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Gender, gender);
        //        }
        //        if (createtimeto != default(DateTime) && createtimefrom != default(DateTime))
        //        {//From==To执行==
        //            if (createtimeto == createtimefrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.CreateTime, createtimefrom);
        //            }
        //            else if (createtimeto > createtimefrom)
        //            {//From<To执行Between
        //                queryBuilder.Between(a => a.CreateTime, createtimefrom, createtimeto);
        //            }
        //        }//From>To不参与条件
        //        if (updatetimeto != default(DateTime) && updatetimefrom != default(DateTime))
        //        {//From==To执行==
        //            if (updatetimeto == updatetimefrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
        //            }
        //            else if (updatetimeto > updatetimefrom)
        //            {//From<To执行Between
        //                queryBuilder.Between(a => a.UpdateTime, updatetimefrom, updatetimeto);
        //            }
        //        }//From>To不参与条件
        //        if (queryvalid)
        //        {//enabeQuery参与查询条件
        //            queryBuilder.Equals(a => a.Valid, valid);
        //        }
        //        if (queryenabled)
        //        {//enabeQuery参与查询条件
        //            queryBuilder.Equals(a => a.Enabled, enabled);
        //        }

        //        return HandlerFactory.SupplyPersonBusinessHandler.Fetch(queryBuilder.Expression).ToList();
        //    }
        //    catch (Exception ex)
        //    {
        //        msg = "调用购货单位提货人员业务逻辑:查询实体(购货单位提货人员)失败";
        //        return this.HandleException<List<SupplyPerson>>(msg, ex);
        //    }
        //}


        //public List<SupplyPerson> QueryPagedSupplyPersons(string name, string idfile, string idnumber, string tel, string address, DateTime birthdayfrom, DateTime birthdayto, string gender, DateTime createtimefrom, DateTime createtimeto, DateTime updatetimefrom, DateTime updatetimeto, bool valid, bool queryvalid, bool enabled, bool queryenabled, int index, int size, out PagerInfo pager)
        //{
        //    pager = PagerInfo.Validate(new PagerInfo { Index = index, Size = size });
        //    try
        //    {
        //        var order = EntityOrderDictionary.GetOrder<SupplyPerson>();
        //        var queryBuilder = QueryBuilder.Create<SupplyPerson>();
        //        if (!string.IsNullOrEmpty(name))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Name, name);
        //        }
        //        if (!string.IsNullOrEmpty(idfile))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.IDFile, idfile);
        //        }
        //        if (!string.IsNullOrEmpty(idnumber))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.IDNumber, idnumber);
        //        }
        //        if (!string.IsNullOrEmpty(tel))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Tel, tel);
        //        }
        //        if (!string.IsNullOrEmpty(address))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Address, address);
        //        }
        //        if (birthdayto != default(DateTime) && birthdayfrom != default(DateTime))
        //        {//From==To执行==
        //            if (birthdayto == birthdayfrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.Birthday, birthdayfrom);
        //            }
        //            else if (birthdayto > birthdayfrom)
        //            {//From>To执行Between
        //                queryBuilder.Between(a => a.Birthday, birthdayfrom, birthdayto);
        //            }
        //        }//From<To不参与条件
        //        if (!string.IsNullOrEmpty(gender))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Gender, gender);
        //        }
        //        if (createtimeto != default(DateTime) && createtimefrom != default(DateTime))
        //        {//From==To执行==
        //            if (createtimeto == createtimefrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.CreateTime, createtimefrom);
        //            }
        //            else if (createtimeto > createtimefrom)
        //            {//From>To执行Between
        //                queryBuilder.Between(a => a.CreateTime, createtimefrom, createtimeto);
        //            }
        //        }//From<To不参与条件
        //        if (updatetimeto != default(DateTime) && updatetimefrom != default(DateTime))
        //        {//From==To执行==
        //            if (updatetimeto == updatetimefrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.UpdateTime, updatetimefrom);
        //            }
        //            else if (updatetimeto > updatetimefrom)
        //            {//From>To执行Between
        //                queryBuilder.Between(a => a.UpdateTime, updatetimefrom, updatetimeto);
        //            }
        //        }//From<To不参与条件
        //        if (queryvalid)
        //        {//enabeQuery参与查询条件
        //            queryBuilder.Equals(a => a.Valid, valid);
        //        }
        //        if (queryenabled)
        //        {//enabeQuery参与查询条件
        //            queryBuilder.Equals(a => a.Enabled, enabled);
        //        }

        //        return HandlerFactory.SupplyPersonBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
        //    }
        //    catch (Exception ex)
        //    {
        //        pager = new PagerInfo();
        //        return this.HandleException<List<SupplyPerson>>("调用购货单位提货人员业务逻辑:查询实体(购货单位提货人员)失败", ex);
        //    }
        //}




        //public List<SupplyPerson> SearchPagedSupplyPersonsByQueryModel(QuerySupplyPersonModel qModel, int index, int size, out PagerInfo pager)
        //{

        //    pager = PagerInfo.Validate(new PagerInfo { Index = index, Size = size });
        //    try
        //    {
        //        var order = EntityOrderDictionary.GetOrder<SupplyPerson>();
        //        var queryBuilder = QueryBuilder.Create<SupplyPerson>();
        //        if (!string.IsNullOrEmpty(qModel.Name))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Name, qModel.Name);
        //        }
        //        if (!string.IsNullOrEmpty(qModel.IDFile))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.IDFile, qModel.IDFile);
        //        }
        //        if (!string.IsNullOrEmpty(qModel.IDNumber))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.IDNumber, qModel.IDNumber);
        //        }
        //        if (!string.IsNullOrEmpty(qModel.Tel))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Tel, qModel.Tel);
        //        }
        //        if (!string.IsNullOrEmpty(qModel.Address))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Address, qModel.Address);
        //        }
        //        if (qModel.BirthdayTo != default(DateTime) && qModel.BirthdayFrom != default(DateTime))
        //        {
        //            if (qModel.BirthdayTo == qModel.BirthdayFrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.Birthday, qModel.BirthdayFrom);
        //            }
        //            else if (qModel.BirthdayTo > qModel.BirthdayFrom)
        //            {//From<To执行Between
        //                queryBuilder.Between(a => a.Birthday, qModel.BirthdayFrom, qModel.BirthdayTo);
        //            }//From>To不参与条件
        //        }
        //        if (!string.IsNullOrEmpty(qModel.Gender))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Like(a => a.Gender, qModel.Gender);
        //        }
        //        if (qModel.CreateUserId != default(Guid))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Equals(a => a.CreateUserId, qModel.CreateUserId);
        //        }
        //        if (qModel.UpdateUserId != default(Guid))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Equals(a => a.UpdateUserId, qModel.UpdateUserId);
        //        }
        //        if (qModel.CreateTimeTo != default(DateTime) && qModel.CreateTimeFrom != default(DateTime))
        //        {
        //            if (qModel.CreateTimeTo == qModel.CreateTimeFrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.CreateTime, qModel.CreateTimeFrom);
        //            }
        //            else if (qModel.CreateTimeTo > qModel.CreateTimeFrom)
        //            {//From<To执行Between
        //                queryBuilder.Between(a => a.CreateTime, qModel.CreateTimeFrom, qModel.CreateTimeTo);
        //            }//From>To不参与条件
        //        }
        //        if (qModel.UpdateTimeTo != default(DateTime) && qModel.UpdateTimeFrom != default(DateTime))
        //        {
        //            if (qModel.UpdateTimeTo == qModel.UpdateTimeFrom)
        //            {//From==To执行==
        //                queryBuilder.Equals(a => a.UpdateTime, qModel.UpdateTimeFrom);
        //            }
        //            else if (qModel.UpdateTimeTo > qModel.UpdateTimeFrom)
        //            {//From<To执行Between
        //                queryBuilder.Between(a => a.UpdateTime, qModel.UpdateTimeFrom, qModel.UpdateTimeTo);
        //            }//From>To不参与条件
        //        }
        //        if (qModel.QueryValid)
        //        {//enabeQuery参与查询条件
        //            queryBuilder.Equals(a => a.Valid, qModel.Valid);
        //        }
        //        if (qModel.QueryEnabled)
        //        {//enabeQuery参与查询条件
        //            queryBuilder.Equals(a => a.Enabled, qModel.Enabled);
        //        }
        //        if (qModel.PurchaseUnitId != default(Guid))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Equals(a => a.PurchaseUnitId, qModel.PurchaseUnitId);
        //        }
        //        if (qModel.StoreId != default(Guid))
        //        {//非null且非empty参与like条件
        //            queryBuilder.Equals(a => a.StoreId, qModel.StoreId);
        //        }

        //        return HandlerFactory.SupplyPersonBusinessHandler.Fetch(queryBuilder.Expression, order, pager).ToList();
        //    }
        //    catch (Exception ex)
        //    {
        //        pager = new PagerInfo();
        //        return this.HandleException<List<SupplyPerson>>("调用购货单位提货人员业务逻辑:通过查询Model分页查询实体(购货单位提货人员)失败", ex);
        //    }
        //}

        #endregion 购货单位提货人员 

        #region 不合格药品处理

        public bool AddDrugsUnqualification(drugsUnqualication value, out string msg)
        {
            try
            {
                return HandlerFactory.DrugsUnqualificationHandler.Add(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用不合格药品处理逻辑:添加实体(不合格药品)失败";
                return this.HandleException<bool>(msg, ex);
            }
        }

        public bool SaveDrugsUnqualification(drugsUnqualication value, out string msg)
        {
            try
            {
                return HandlerFactory.DrugsUnqualificationHandler.Save(value, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用不合格药品处理逻辑:更新实体(不合格药品)失败";
                return this.HandleException<bool>(msg, ex);
            }
        }
        public bool DeleteDrugsUnqualification(Guid ItemID, out string msg)
        {
            try
            {
                return HandlerFactory.DrugsUnqualificationHandler.Delete(ItemID, out msg);
            }
            catch (Exception ex)
            {
                msg = "调用不合格药品处理逻辑:更新实体(不合格药品)失败";
                return this.HandleException<bool>(msg, ex);
            }
        }
        #endregion
			}
}
