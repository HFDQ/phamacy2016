//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BugsBox.Pharmacy.AppClient.NS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.bugsbox.bugsbox/PharmacyNotification", ConfigurationName="NS.IPharmacyNotification", CallbackContract=typeof(BugsBox.Pharmacy.AppClient.NS.IPharmacyNotificationCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPharmacyNotification {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/RegisterCli" +
            "entNotification")]
        void RegisterClientNotification(BugsBox.Pharmacy.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/CloseClient" +
            "Notification")]
        void CloseClientNotification(BugsBox.Pharmacy.Models.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPharmacyNotificationCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/test")]
        void test(string a);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/UserOnLine")]
        void UserOnLine(BugsBox.Pharmacy.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/SayHello")]
        void SayHello(string hello);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/RoleAuthori" +
            "tyChanged")]
        void RoleAuthorityChanged();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/DrugLock")]
        void DrugLock(int number);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/SupplyUnitL" +
            "ock")]
        void SupplyUnitLock(int number);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/PurchaseUni" +
            "tLock")]
        void PurchaseUnitLock(int number);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/NeedApprova" +
            "l")]
        void NeedApproval(BugsBox.Pharmacy.Business.Models.WarningData[] approvals);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/NeedDrugMai" +
            "ntain")]
        void NeedDrugMaintain(int day);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/NeedHandled" +
            "DoubtDrug")]
        void NeedHandledDoubtDrug(int number);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/NeedHandleS" +
            "ale")]
        void NeedHandleSale(BugsBox.Pharmacy.Business.Models.WarningData[] approvals);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/NeedHandleP" +
            "urchase")]
        void NeedHandlePurchase(BugsBox.Pharmacy.Business.Models.WarningData[] approvals);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.bugsbox.bugsbox/PharmacyNotification/IPharmacyNotification/DrugOutofSt" +
            "ock")]
        void DrugOutofStock(int number);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPharmacyNotificationChannel : BugsBox.Pharmacy.AppClient.NS.IPharmacyNotification, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PharmacyNotificationClient : System.ServiceModel.DuplexClientBase<BugsBox.Pharmacy.AppClient.NS.IPharmacyNotification>, BugsBox.Pharmacy.AppClient.NS.IPharmacyNotification {
        
        public PharmacyNotificationClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PharmacyNotificationClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PharmacyNotificationClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PharmacyNotificationClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PharmacyNotificationClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterClientNotification(BugsBox.Pharmacy.Models.User user) {
            base.Channel.RegisterClientNotification(user);
        }
        
        public void CloseClientNotification(BugsBox.Pharmacy.Models.User user) {
            base.Channel.CloseClientNotification(user);
        }
    }
}
