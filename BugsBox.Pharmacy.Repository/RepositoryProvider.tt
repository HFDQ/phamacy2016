<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #> 
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="$(SolutionDir)\\_output\\_temp\\BugsBox.Pharmacy.Models\\BugsBox.Pharmacy.Models.dll" #> 
<#@ assembly name="$(SolutionDir)\\_output\\_temp\\BugsBox.Pharmacy.Models\\BugsBox.Application.Core.dll" #> 
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Xml" #>
<#@ import namespace="BugsBox.Pharmacy.Models" #>   
<#@ output extension=".cs" #>
<#
Type EntityType=typeof(Entity);
//Type BaseUnitType=typeof(BaseUnit);
Assembly assembly=EntityType.Assembly;
string baseEntityTypeName="BugsBox.Pharmacy.Models";
var entityTypes=assembly.GetTypes()
.Where(t =>t!=typeof(PharmacyLicense)&& !t.IsAbstract&&(t.BaseType==EntityType||t.BaseType==typeof(BaseUnit)||t.BaseType==typeof(PharmacyLicense))).ToList(); 
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using BugsBox.Application.Core;
using BugsBox.Common;
using BugsBox.Pharmacy.Models;
using BugsBox.Pharmacy.Repository;

namespace BugsBox.Pharmacy.Repository
{
 
   public class RepositoryProvider:IDisposable
    {

	   public Db Db {get;private set;}

       public RepositoryProvider(Db db)
       {
           this.Db = db;
		  //LoggerHelper.Instance.Warning("RepositoryProvider 创建了");
       }

	  
		<#foreach (Type handler in entityTypes){
					
		#>
private I<#= handler.Name #>Repository _<#= handler.Name #>Repository=null;
	    /// <summary> 
		/// <#= EntityExtensions.GetDescription(handler)#>(<#= handler.Name #>) 仓储对象
        /// </summary>
		public I<#= handler.Name #>Repository <#= handler.Name #>Repository
		{
			get
			{
				lock(this)
				{
					if( _<#= handler.Name #>Repository==null)
					{
						_<#= handler.Name #>Repository=new <#= handler.Name #>Repository(Db);
						_<#= handler.Name #>Repository.RepositoryProvider = this;
					}
					return _<#= handler.Name #>Repository;
				}
			}
		} 
		<#}#>   
		public void Dispose()
		{ 
			<#foreach (Type handler in entityTypes){
					
			#> 
			if( _<#= handler.Name #>Repository!=null)
			{
				_<#= handler.Name #>Repository.Dispose();
			} <#}#>  
			
		}
	}
}
